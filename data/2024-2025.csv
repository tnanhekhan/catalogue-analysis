Column Name,Content
Software Engineering,"Educational institute Graduate School of Informatics Programme type Master's Credits 60 EC Duration 1 year Instruction language English Education form Full-time, Day-time class Contact Education Desk FNWI Science Park 904 020 5257100 TheMaster Software Engineeringis a one-year academic programme with a compulsory curriculum of 60 EC. It familiarises students with the broad and dynamic field of software engineering. Software engineering projects are complex undertakings, and there is no single recipe that guarantees success in all cases. This one year master's programme makes students better software engineers, designers and architects. It enables graduates to make significant contributions to large-scale software projects in industry and academia alike. Software engineering uses many results from computer science, but the Master programme Software Engineering distinguishes itself from classical computer science curricula in a number of aspects, among others the size and complexity of software systems concerned and the role of human factors in the software engineering process. Both aspects lead to a high degree of uncertainty about the impact and validity of design decisions. What is good for performance may be detrimental for understandability, maintainability and re-use. Software engineers must strive to understand these trade-offs and reduce dependencies. As changing and conflicting goals are omnipresent, software continuously needs to evolve. The software engineering domain in itself is in constant flux. Innovations in technology, design patterns and techniques are continuous. Out-of-the-box solutions often have their specific limitations. We believe a good software engineer is like a good researcher. We teach our students how to acquire relevant knowledge, how to improve making decisions, how to reflect on their current approaches and ideas and to continuously question their assumptions. We expect students to have a solid technological basis and a fundamental understanding of computer science and software. From a technical perspective the curriculum covers software quality, specification-based testing and verification, code analysis and transformation as well as code evolution according to software metrics. These cross-cutting issues are complemented with domain-specific software concerns from new and emerging domains, such as cloud-based software and cyber-physical systems. Non-technical topics focus on requirements engineering and on organizational aspects of the software engineering process. Continuous interaction between students and staff is characteristic for the programme. Students work on challenging assignments and receive immediate feedback. Educational institute Graduate School of Informatics Programme type Master's Credits 60 EC Duration 1 year Instruction language English Education form Full-time, Day-time class Contact Education Desk FNWIScience Park 904020 5257100"
Programme,"Website:http://www.student.uva.nl/se Programme Director:dr. A.M. (Ana) Oprescu Programme coordinator:mr. drs. N. (Nienke) Boevé-Spil Study adviser:C. A. (Charlotte) Gevaert MSc Programme organisation:The programme takes one academic year (60 credits) to complete and awards a Master of Science degree in Software Engineering. We offer 1-year full-time and 2-year part-time options. Study load and credits:The University of Amsterdam (UvA) applies the European Credit Transfer System (ECTS). The general study load for students is 30 EC per semester. A full academic year of two semesters equals 60 EC. Each semester lasts 20 weeks with 3 periods: 2 periods of 8 weeks and a third period of 4 weeks. A student’s study load (both contact hours and hours spent studying and preparing for assignments) is measured in European Credits (EC). According to Dutch law 1 EC represents 28 hours of work and 60 EC represent one academic year of full-time study. This is equivalent to about 40 hours of work per week. Regular courses: Period 1: Period 2: Period 4: Preparation Master Project: This special course runs throughout periods 1, 2 and 3 complements the regular courses in teaching general academic and research skills with a focus on software engineering skills and background literature. In period 3 students prepare a research proposal that sets the scene for their graduation project. Master Project Software Engineering: The 18-EC graduation project spans periods 5 and 6. During this graduation project students demonstrate the skills they have obtained so far. Graduation projects can be done in industry, at other research institutions or embedded within research groups at the University of Amsterdam. The graduation project leads to a written thesis to be orally defended in front of a committee.  Sem. 1 Sem. 2 EC Requirements Engineering   6 Software Specification, Verification and Testing   6 Preparation Masterproject Software Engineering   6 Masterproject Software Engineering   18 Software Evolution   6 Model-based Design of Cyber-physical Systems   6 Software Process   6 DevOps and Cloud-based Software   6 Requirements Engineering Software Specification, Verification and Testing Software Evolution Model-based Design of Cyber-physical Systems DevOps and Cloud-based Software Software Process"
Part-time programme,"In the part-time variant one course is taken per period instead of two. Students are expected to work appoximately 20 hours per week and to spend two full days per week on campus, either Monday/Tuesday or Wednesday/Thursday. Presence is required to attend lectures, workshops and labs, but likewise to do group work with other students. We do not prescribe any particular order of courses, and students can adapt their schedule to external needs and requirements. Students who are interested in doing the part-time variant are advised to contact the study adviser and/or programme coordinator to discuss the study plan."
Practical matters,"Canvas page The Canvas page of the master's programme Software Engineering provides SE students with the most important information and links (to the SE student website) necessary for students, such as the student handbook, Examinations Board, study adviser, Education Desk, master thesis project journey, etc. The master's programme Software Engineering Canvas page: Master Software Engineering (uva.nl)  LinkedIn community page This group is intended for current (and past) students/staff/researchers related to the Master Software Engineering at the University of Amsterdam. Team SE owns and manages the Software Engineering community page to post about interesting news, events and job opportunities to current students. We will also post about alumni events and use the group to keep in touch with our alumni. (3) Master Software Engineering @ UvA (Past & Present) | Groups | LinkedIn "
Contact," Study adviser The study adviser for the master's programme Software Engineering isCharlotte Gevaert. The study adviser is available for students who require support, supervision and information during their studies. Any conversations you have with the study adviser will be strictly confidential. Please visitthis websitefor more information about what the study adviser can do for you and for the contact information.  Programme coordinator The programme coordinator of the master's programme Software Engineering isNienke Boevé. She is available for students and staff who have programme specific issues or questions. Students and staff can contact her by e-mail:master-se-science@uva.nlorn.boeve-spil@uva.nl.  Education Desk FNWI The Education Desk FNWI handles most practical and administrative matters for students enrolled at the Faculty of Science. The Desk is located on the first floor in the Science Park Building 904. Phone:020 5257100 E-mail:servicedesk-esc-science@uva.nl Visitthis webpagefor information about the Education Desk FNWI and their opening hours.  Examinations Board The Examinations Board assesses requests and complaints concerning the Education and Examinations Regulations. Onthis webpageyou can find more (contact) information about the Examinations Board.  Programme director The programme director of the master's programme Software Engineering isAna Maria Oprescu."
Requirements Engineering,"Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of At the heart Requirements Engineering is making careful decisions about what system to construct. To understand what decisions to make we have to gather and structure  knowledge. About the domain, but also about what is feasible. Humans are by no means truth telling and finding machines and our decision making is often flawed. This interactive course explores requirement engineering approaches and pitfalls by discussing real life cases. You will dive into  psychological and philosophical sources. You will also practice a lot, with the primary focus on interviewing.  Knowledge of requirement engineering, for example books of Sommerville, Robertson, van Lamsweerde, Wiegers or Pohl. 'Modeling techniques', e.g. UML diagrams to describe software behaviour. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration Reading tests, lab work, exam. Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering You will understand why organizational and stakeholder needs are hard to express, capture and understand You will learn the shortcomings in the (agile) methods and best practices that are widely used Furthermore you will practice knowledge gathering and system modeling techniques Lecture Seminar Working independently on e.g. a project or thesis Supervision/feedback meeting Self-study Presentation/symposium Literature:Noise: a flaw in human judgement (Kahneman) Noise: a flaw in human judgement (Kahneman) Syllabus:  Noise: a flaw in human judgement (Kahneman) "
"Software Specification, Verification and Testing","Course catalogue number 5364SSVT6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Software specification, verification, and testing entail checking whether a given software system satisfies given requirements and/or specifications. Without a specification, it is impossible to state what a piece of software should do, and there is no reasonable way to set up the test process. An informal specification is not enough. If we aim to automate the test process we need pre-given information about: Programs written in functional or imperative languages can be tested, given a formal specification, by means of a random test generator. This test method will be illustrated for a number of example programs that are written in Haskell. The course assumes basic familiarity with this language and focusses on how to test programs written in either functional or imperative style, and how to use tools for automated test generation. Basic familiarity with logic and functional programming in Haskell. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration The course is mainly aimed at Software Engineering master students. Course examination consists of several assignments plus a final assessment of both the theory and practical parts. We will mainly use Canvas to broadcast information and course materials, as well as announcements during the course contact hours. Course catalogue number 5364SSVT6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering understand and write specifications in the language of predicate logic use type-specification and abstraction to make programs more easily testable write formal specifications for testing Haskell code use random test generation for automating the test process Lecture Seminar Laptop seminar Self-study Literature:Graham Hutton,Programming in Haskell, Cambridge University Press 2016 (Second Edition).Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,Logic in Action, electronically available fromhttp://www.logicinaction.orgKees Doets and Jan van Eijck,The Haskell Road to Logic, Maths and Programming. College Publications, London 2012. Graham Hutton,Programming in Haskell, Cambridge University Press 2016 (Second Edition). Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,Logic in Action, electronically available fromhttp://www.logicinaction.org Kees Doets and Jan van Eijck,The Haskell Road to Logic, Maths and Programming. College Publications, London 2012. Graham Hutton,Programming in Haskell, Cambridge University Press 2016 (Second Edition). Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,Logic in Action, electronically available fromhttp://www.logicinaction.org Kees Doets and Jan van Eijck,The Haskell Road to Logic, Maths and Programming. College Publications, London 2012. which tests are relevant --> this information states the preconditions of the code what the outcomes of the relevant tests should be --> this information states the postconditions of the code"
Preparation Masterproject Software Engineering,"Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For both part-time and full-time students. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of During paper sessions you learn skills to find, read and assess relevant scientific publications. You will also learn to build argumentation structures you need for your theory and analysis. For your graduation project, you can choose from a number of defined themes. It is also possible to define a project yourself, once you have thoroughly examined the foundation and feasibility of your idea. The lecturer will help you during the preparation. You will also discuss your ideas with other students. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration The student can pass the course by getting approval from the course coordinator and the academic supervisor for two deliverables: Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For both part-time and full-time students. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. K. Papagiannopoulos (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   dr. K. Papagiannopoulos (co-ordinator) Master's Software Engineering Problem analysis Scientific literature survey Theory building Hypothesizing Structuring research and validation Project planning Scientific reporting Self-study Presentation/symposium Working independently on e.g. a project or thesis Supervision/feedback meeting Seminar Other:Study materials are made available through the course’s Canvas page. Study materials are made available through the course’s Canvas page. Study materials are made available through the course’s Canvas page. An interest in reading and writing scientific literature Affinity with reading and writing English text Knowledge of current challenges and results in software engineering Graduation project proposal Survey of related literature"
Masterproject Software Engineering,"Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: 4 out of the 6 mandatory courses have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Carry out the research as proposed by the plan you made in the preparation phase. An academic supervisor will be available for (weekly) feedback and discussion. Part-time students will need to discuss their planning with the coordinator and the academic supervisor, as there are various possibilities to distribute the necessary work across the study time. Preparation Master Project The Master Project Software Engineering is assessed along three dimensions: Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: 4 out of the 6 mandatory courses have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. ir. M.C. Bor (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   dr. ir. M.C. Bor (co-ordinator) Master's Software Engineering Acquiring the ability to do research by designing, executing and reporting on a project in the area of software engineering research Adding knowledge or gathering new evidence in the field of software engineering Self-study Presentation/symposium Working independently on e.g. a project or thesis Supervision/feedback meeting Literature:Scientific literature Scientific literature Scientific literature research carried out written thesis presentation and discussion during the defense session In order to start the Master’s project you need to have approval from the thesis coordinator and your academic supervisor on your project proposal."
Software Evolution,"Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of This course is designed around lab sessions in which we study real and large (open-source) software systems. We use Rascal -a programming language workbench, or meta programming language- to apply and build software metrics, software analyses, software visualisations and software transformations. Seehttp://www.rascal-mpl.org.The student is supported with introductory material and interactive lab sessions (including a guest lecture) to learn Rascal. The course consists of a series of lectures on the theory of software maintenance and evolution, guest lecturers from field experts, working in pairs on practical assignments and a guided study of research papers on maintenance, maintainability, empirical software engineering and language engineering. Example topics are clone detection, maintainability metrics, and (automated) refactoring. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration This course uses the following form of assessments, that will be detailed at the start of the course: The course reader and assignments will be made available on Canvas. Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. L.T. van Binsbergen (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   dr. L.T. van Binsbergen (co-ordinator) Master's Software Engineering Understand a wide range of challenges stemming from the fact that software is developed in large, dynamic teams, is subjected to changing requirements and needs to be adapted to new contexts Apply language engineering and empirical software engineering techniques to large code-bases in order to analyze them using various software quality metrics (e.g. to measure maintainability) Analyze scientific contributions from selected papers addressing the challenges in software evolution discussed in lectures and covered in practicals Evaluate one's own implementation of a software analysis tool by experimenting with the implementation (e.g. tweaking parameters or implementation choices), drawing comparisons with alternative approaches in literature, and/or against a set of clearly specified requirements Advanced programming skills in several programming languages including functional programming Experience with sizeable programming projects (e.g. Project Software Engineering) Ideally also knowledge of compiler construction (e.g. parsing, ASTs, basic code analysis, etc.) Good (academic) English reading and writing skills Lecture Laptop seminar Computer lab session/practical training Self-study Presentation/symposium Syllabus:Reader consisting of selected papers on software evolution Reader consisting of selected papers on software evolution Other:http://www.rascal-mpl.orgPotentially other (academic) sources made available on Canvas http://www.rascal-mpl.org Potentially other (academic) sources made available on Canvas Reader consisting of selected papers on software evolution http://www.rascal-mpl.org Potentially other (academic) sources made available on Canvas practical lab assignments performed in pairs and assessed by a demonstration/presentation and a report individual reading and writing exercise in the form of an annotated bibliography for a selection of papers"
Model-based Design of Cyber-physical Systems,"Course catalogue number 5364MBDC6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Cyber-physical systems (CPS) are systems that integrate computation, sensing, actuation, and networking to interact with and control the physical world. They are built for a particular purpose and exist in many application domains. Well-known examples of CPS from different domains include satellites, airplanes, cars, x-ray machines, printers, radars, and lithography machines. The design of CPS is a multi-disciplinary activity that combines different fields, such as embedded systems, software engineering, control theory, and mechatronics, and is fundamentally different from the design of general-purpose computer systems, such as a desktop computer. CPS are subject to different non-functional requirements, such as size, weight, energy consumption, reliability, security, and cost. Some cyber-physical systems, such as a car or an airplane, are furthermore safety critical, and must guarantee that a system failure cannot result in death or injury. Such a system must always be available and must reliably produce correct results. To further complicate matters, the correctness of most CPS is not just defined by the correct result of a computation, but by the correct result and the correct timing. For example, consider an air-bag controller in a car, which must inflate the air-bag in time before the driver’s head hits the steering wheel, or a flight control system, which must correct turbulence before the airplane becomes unstable. Trends show that CPS across application domains are getting more and more complex. The consequences of this increasing complexity are visible in daily practice in which industry struggles to efficiently develop correct and well-performing CPS. This course is an introduction to CPS and their design, with a focus on computing aspects (hardware and software). It teaches how the increasing complexity of CPS can be addressed by model-based design methodologies in which abstraction, provided by models used for specification, analysis, simulation, or synthesis, play an essential role in increasing system quality and reducing development time and overall system cost. The course covers the following topics: More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration A Canvas site for the course is available Course catalogue number 5364MBDC6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. ir. M.C. Bor (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   dr. ir. M.C. Bor (co-ordinator) Master's Software Engineering The student is able to explain the key characteristics and complexity drivers of cyber-physical systems The student is able to model the behavior of software using Statecharts and generate code The student is able to functionally verify systems using methods based on Petri Net models The student is able to create a domain-specific language (DSL) that allows specification and validation of models in a particular domain, and generation of design artifacts The student is able to verify schedulability of periodic tasks and perform cache analysis on a single-core system, and explain the added challenges in a multi-core system The student is able to explain how design-space exploration identifies hardware and software configurations that satisfy multi-dimensional constraints on e.g. cost, performance and energy consumption The student is able to work together in a team to develop software that satisfies its requirements for a given cyber-physical system in a model-based manner An introduction to cyber-physical systems and their key characteristics and complexity drivers Model-based specification, analysis, and verification of functional and non-functional behavior of cyber-physical systems Model-based software development for cyber-physical systems Identification and selection of suitable hardware and software configurations that satisfy multi-dimensional constraints on e.g. cost, performance, and energy consumption in a cyber-physical system Programming (Java, Python, C++, or similar language) Computer Organization (preferred, not mandatory) Lecture Laptop seminar Self-study Working independently on e.g. a project or thesis Three assignments Practical group project"
Software Process,"Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Developing large scale software systems is challenging for many reasons. Our understanding of what needs to be done is at best incomplete, at points invalid, and subject to change. It’s hard to determine the adequacy of plans and code. The biggest projects require collaboration of thousands of people, yet our mechanisms for division of work, coordination, and keeping track of progress have severe limitations. Learning is the credo, but in reality it proofs hard to adapt. Everything we do has impact, and not before long we work within the constraints of our own legacy. During this course you will read a lot about the many aspects of organizing software engineering. There will be guest lecturers to share their experiences with you. You will analyze a failed case and come up with a game plan for a project. Knowledge of software methods like Rup, Scrum, Xp and software practices like pair programming, test first. Experience with working in real software engineering. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration Reading tests, reports, exam. Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering Understanding the dynamics of realizing software solutions in a business or government context Understanding the choices you can make to successfully create and deliver a software system An introduction to empirical research to software engineering Lecture Seminar Presentation/symposium Supervision/feedback meeting"
DevOps and Cloud-based Software,"Course catalogue number 5364DCBS6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of DevOps is a modern software and applications development model that realises the continuous integration (CI), continuous deployment (CD) and continuous improvement of the services and applications that is deeply based on the cloud virtualisation, on demand services deployment and precision services monitoring currently available on the major cloud platforms. The course discusses the basic concepts of DevOps, including its philosophy, workflow, monitoring methods, and tools. Students will apply these concepts to understand how they can be best implemented to automate development, test, and release practices. Students will work in teams to apply DevOps model and tools to develop working applications and will use one of cloud and DevOps platforms. The following topics will be covered in the course: The course will also feature guest lectures from local cloud providers and DevOps companies. Familiarity with one of the programming languages: Java, C or Python, and with any IDE platform. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration The course assessment includes the following components: individual practical assignments; literature study; group project report  and code; project development process. Course catalogue number 5364DCBS6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. Z. Zhao (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   dr. Z. Zhao (co-ordinator) Master's Software Engineering Students are familiar with the concept of DevOps and related technologies, their benefits for organisational IT infrastructure and services management; understand organisational aspects of DevOps, describe relation of DevOps to other technologies Students will understand how to build cloud-based applications and use cloud automation tools in the DevOps process applied to various applications and software development scenarios/processes. Students can analyze practical cloud application problems, apply agile and DevOps practices in teamwork, and develop solutions using cloud computing and automation techniques. Introduction DevOps, core concepts and models, Continuous Delivery (CD), Continuous Integration (CI), Continuous Deployment. Agile development, relation to Agile, Scrum, Kanban, Lean Cloud Computing architecture, service models, virtualisation, resources management and monitoring DevOps and software engineering on major cloud platforms: AWS, Microsoft Azure. Cloud powered applications deployment, accounts management Cloud automation tools and platforms: Chef, Terraform, Ansible, and DevOps tools available from the major cloud providers AWS and Azure Software delivery life cycle in an agile DevOps organisation, QA in cloud based software development systems, secure applications development with DevSecOps DevOps applications architecture, configuration management, monitoring, environment setup on the selected cloud platform AWS or Microsoft Azure. Lecture Self-study Working independently on e.g. a project or thesis Laptop seminar Presentation/symposium Supervision/feedback meeting Other:Online materials will be provided via Canvas. Online materials will be provided via Canvas. Online materials will be provided via Canvas. Availability of Canvas site"
