Column Name,Content
Software Engineering,"Educational institute Graduate School of Informatics Credits 60 EC Duration 1 Year Instruction language English Education form Full-time and part-time, Day-time class Contact drs. R. J. Kellermann Deibel Science Park 904 +31 20 5255856 The programme takes one academic year (60 credits), which awards a Master of Science degree in Software Engineering. There is also the possibility to do the MSc SE part-time. The part-time programme takes two years instead of one. The website of the MSc Software Enginering:Please refer tohttp://www.student.uva.nl/sefor all announcements and information on the MSc Software Engineering. The University of Amsterdam (UvA) uses the European credit system based on the European Credit Transfer System (ECTS). The general study load for students is 30 EC per semester. A full academic year of two semesters equals 60 EC. A semester term lasts 20 weeks with 3 blocks: 2 blocks of 8 weeks and a third block of 4 weeks. A studentâ€™s study load (both contact hours and hours spent studying and preparing for assignments) is measured in European Credits (EC). Under Dutch law 1 EC represents 28 hours of work and 60 EC represent one academic year of full-time study. This is equivalent to about 40 hours (28 hours per EC) per week. Educational institute Graduate School of Informatics Credits 60 EC Duration 1 Year Instruction language English Education form Full-time and part-time, Day-time class Contact drs. R. J. Kellermann DeibelScience Park 904+31 20 5255856 Programme DirectorSoftware Engineering dr. M. Bruntink M.Bruntink@uva.nl"
Content,"The Master Software Engineering has as goal to familiarize students with the broad and dynamic field of software engineering. Software engineering projects are complex and there is no recipe that guarantees success. This one year master makes students better engineers and designers, enabling them to make a significant contribution to large software projects and research projects addressing big software engineering questions. Software engineering uses many results from computer science but distinguishes itself from classical computer science curricula with respect to the role of human factors, system size and volatility of requirements. These factors cause a high degree of uncertainty about the impact and validity of design decisions. What is good for performance can be detrimental for understand ability. As software engineers and researchers we strive to understand these trade offs and reduce dependencies. As change and conflicting stakes are omnipresent, software continuously needs to evolve. The software engineering domain in itself is in constant flux. Innovations in technology, design patterns and techniques are continuous. However, out-of-the-box solutions often have their specific limitations. We believe a good software engineer is like a good researcher. We intend to teach our students how to acquire relevant knowledge, how to improve making decisions, how to reflect on their current approach, how to learn to question their assumptions and how to assess their ideas. We expect students to have a solid technological basis and a fundamental understanding of computer science and software. From a technical perspective the curriculum covers software quality, specification-based automated testing, automatic code analysis, automatic code transformation and development of domain specific languages. Non-technical topics focus on how to develop a software architecture, on understanding issues in requirements engineering and on organizational aspects of software engineering. In the master there is a lot of interaction between students and staff. Students work on challenging assignments and get immediate feedback, stimulating rework, making the program very intensive."
The Software Engineering curriculum,The Master's Programme in Software Engineering is a one-year academic programme. The curriculum consists of a mandatory programme of 60 EC. .
Software Engineering,"Full-time Programme Part-time programmeIn the part-time programme just one course is taken per block. You will spent in total around 20 hours a week, of which 1 or 2 days at university. Semester 1 Sem. 1 Sem. 2 EC sem.1-block 1:    Software Architecture   6 Software Testing   6 sem.1-block 2:    Requirements Engineering   6 Software Evolution   6 sem.1-block 1,2,3, and sem.2 block 1:    Preparation Masterproject Software Engineering   6 Semester 2    sem.2-block 1:    Software Process   6 Software Construction   6 sem.2-block 1,2,3:    Masterproject Software Engineering   18 First year Second year sem.1-block 1: sem.1-block 1: Software Architecture Software Testing ORSoftware Testing ORSoftware Architecture  sem.1-block 2: sem.1-block 2: Requirements Engineering Software Evolution ORSoftware Evolution ORRequirements Engineering   sem.1-block 3: sem.1-block 3: Preparation Masterproject Software Engineering Masterproject Software Engineering  sem.2-block 1: sem.2-block 1: Software Construction Software Construction ORSoftware Process ORSoftware Process  sem.1-block 1,2,3 and sem.2-block 1 sem.2-block 1,2,3: Preparation Masterproject Software Engineering Masterproject Software Engineering"
The teaching staff,The content and curriculum of the master Software Engineering has been created by members of the SE teaching staff. The teaching staff consists of employees from: The core of the teaching staff of SE consists of: * coordinator Lecturer e-mail Dr. M. Bruntink (UvA) * M.Bruntink@uva.nl Drs. H. Dekkers (UvA) H.L.dekkers@uva.nl Prof. dr. D.J.N. van Eijck (CWI-UvA) jan.van.eijck@cwi.nl Prof. dr. P. Klint (CWI - UvA) Paul.Klint@cwi.nl Dr. T. van der Storm T.vanderStorm@uva.nl Dr. J.J. Vinju (CWI-UvA) Jurgen.Vinju@cwi.nl Prof. dr. J.C. van Vliet (VU) hans@cs.vu.nl the Instituut voor Informatica (IvI) of the FNWI; the Cluster Software Engineering ( http://www.cwi.nl/sen) of the 'Centrum voor Wiskunde en Informatica' (CWI-SEN); the Information management and SE department at the VU.
Objectives and exit qualifications of the Software Engineering programme,"Objectives of the Software Engineering Programme Exit qualifications of the Software Engineering Programme General Specific exit qualifications per course: The aim of Software Engineering is to systematically design, construct and maintain large software systems that are delivered in time and within budget, that are reliable and efficient, and that are maintainable over the long term. The Software Engineering programme educates students to become professional software engineers who can not only be employed by industry and government, but can also be active in higher education and academic research. The graduate has insight in the most important theories, methods and techniques in the domain of Software Engineering and has sufficient background to familiarize him/herself with new methods and techniques. The graduate can apply this insight to find innovative solutions for existing and new problems, while applying theory in the right way in practice. He/she can analyze and solve domain-specific problems as well as general Software Engineering problems. The graduate can make a valuable contribution to complex software projects that require the independent and critical application of academic knowledge and skills. The graduate has sufficient technical knowledge and intellectual capacities to play - after some years of practical experience - a managerial or advisory role in the Software Engineering profession. The graduate can formulate a vision regarding Software Engineering and can contribute to the evolution, innovation and policy development needed for software systems. The graduate can solve Software Engineering problems using abstraction and modelling, and can create solutions that take their societal context into consideration, even if only partial information is available. The graduate can clearly report on his/her findings, both orally and in writing, and can explain problems at the right level of abstraction. The graduate has the skills to explore (search, read, assess) documentation, literature and tools in the domain of Software Engineering. The graduate can reflect on his/her own accomplishments and can therefore continuously develop him/herself. The graduate can act well inmono-disciplinary teams. The graduate has research skills at the academic level and can autonomously perform research in the domain of Software Engineering. The graduate can understand the experiences of others. Software Evolution: the graduate masters the methods and techniques needed to analyze an existing software system and to enable it to evolve given changing requirements. Software Testing: the graduate can produce formal specifications of modest-sized samples of software and is able to use formal specifications to generate relevant tests for them. Software Construction: the graduate knows how to employ model-driven and language-driven approaches in software construction. The graduate is also able to reason about and reflect upon aspects of design, code quality, and software construction methods. Software Architecture: the graduate can translate system requirements into a software architecture, handle trade-offs between conflicting requirements, motivate choices made, and assess an architecture document for different stakeholders having different priorities. Requirements Engineering: the graduate understands why user needs are so hard to express, capture and understand. The graduate knows the shortcomings of best practices like product owner, prototyping, interviewing and use cases. The graduate has had a first experience with data-driven methods for requirements engineering like Contextual Design. Software Process: the graduate understands why big software engineering projects are prone to failure. The graduate has insight in how performance is influenced at different levels: that of the individual software engineer, the team and the whole organization. The graduate is able to understand why a method like RUP or Scrum is sometimes successful and sometimes not and how to adapt a method based on a situational analysis."
Admission Requirements MSc Software Engineering,"(a) A Bachelor Informatics or Technical Informatics from a Dutch university. (b) A foreign qualification comparable to 1 (a). In an assessment the quality, motivation and the level of knowledge of the candidate will be reviewed. (c) Every Higher Vocational Education (HBO) Bachelor in Informatics (HIO), Technical Informatics, or a Bachelor in a comparable HVE (HBO) programme with a graduate point average (GPA) of 7 (out of 10) or higher, for students that successfully pass the assessment for the master Software Engineering, which students must also have completed a study programme that includes the following courses, or courses that are comparable to these:(a) Data structures and algorithms,(b) Software and database design,(c) Operating systems,(d) Programming languages,(e) Software engineering.In the assessment the quality, motivation and the level of knowledge of the candidate will be reviewed. (a) Data structures and algorithms, (b) Software and database design, (c) Operating systems, (d) Programming languages, (e) Software engineering. (d) All other candidates who have successfully completed a (substantial part of 1a) comparable or related study programme, and who exhibit during an admission procedure sufficient quality, motivation and prerequisite knowledge or experience in order to successfully complete the study programme. In the review of candidates the focus will be specifically on the following aspects:Basic knowledge of discrete mathematicsBasic knowledge of logicBasic knowledge of formal language theoryBasic knowledge of data structures and algorithmsBasic knowledge of compiler constructionBasic knowledge of software engineeringBasic knowledge of design patterns and UMLProgramming capabilities (Linux, C, Java, develop-environments)General academic skills Basic knowledge of discrete mathematics Basic knowledge of logic Basic knowledge of formal language theory Basic knowledge of data structures and algorithms Basic knowledge of compiler construction Basic knowledge of software engineering Basic knowledge of design patterns and UML Programming capabilities (Linux, C, Java, develop-environments) General academic skills (a) Data structures and algorithms, (b) Software and database design, (c) Operating systems, (d) Programming languages, (e) Software engineering. Basic knowledge of discrete mathematics Basic knowledge of logic Basic knowledge of formal language theory Basic knowledge of data structures and algorithms Basic knowledge of compiler construction Basic knowledge of software engineering Basic knowledge of design patterns and UML Programming capabilities (Linux, C, Java, develop-environments) General academic skills Admission to the master programme Software Engineering is possible for students with either of the following qualifications:(a) A Bachelor Informatics or Technical Informatics from a Dutch university.(b) A foreign qualification comparable to 1 (a). In an assessment the quality, motivation and the level of knowledge of the candidate will be reviewed.(c) Every Higher Vocational Education (HBO) Bachelor in Informatics (HIO), Technical Informatics, or a Bachelor in a comparable HVE (HBO) programme with a graduate point average (GPA) of 7 (out of 10) or higher, for students that successfully pass the assessment for the master Software Engineering, which students must also have completed a study programme that includes the following courses, or courses that are comparable to these:(a) Data structures and algorithms,(b) Software and database design,(c) Operating systems,(d) Programming languages,(e) Software engineering.In the assessment the quality, motivation and the level of knowledge of the candidate will be reviewed.(d) All other candidates who have successfully completed a (substantial part of 1a) comparable or related study programme, and who exhibit during an admission procedure sufficient quality, motivation and prerequisite knowledge or experience in order to successfully complete the study programme. In the review of candidates the focus will be specifically on the following aspects:Basic knowledge of discrete mathematicsBasic knowledge of logicBasic knowledge of formal language theoryBasic knowledge of data structures and algorithmsBasic knowledge of compiler constructionBasic knowledge of software engineeringBasic knowledge of design patterns and UMLProgramming capabilities (Linux, C, Java, develop-environments)General academic skillsThe above mentioned procedure will be further established by the Examination Board. (a) A Bachelor Informatics or Technical Informatics from a Dutch university. (b) A foreign qualification comparable to 1 (a). In an assessment the quality, motivation and the level of knowledge of the candidate will be reviewed. (c) Every Higher Vocational Education (HBO) Bachelor in Informatics (HIO), Technical Informatics, or a Bachelor in a comparable HVE (HBO) programme with a graduate point average (GPA) of 7 (out of 10) or higher, for students that successfully pass the assessment for the master Software Engineering, which students must also have completed a study programme that includes the following courses, or courses that are comparable to these:(a) Data structures and algorithms,(b) Software and database design,(c) Operating systems,(d) Programming languages,(e) Software engineering.In the assessment the quality, motivation and the level of knowledge of the candidate will be reviewed. (a) Data structures and algorithms, (b) Software and database design, (c) Operating systems, (d) Programming languages, (e) Software engineering. (d) All other candidates who have successfully completed a (substantial part of 1a) comparable or related study programme, and who exhibit during an admission procedure sufficient quality, motivation and prerequisite knowledge or experience in order to successfully complete the study programme. In the review of candidates the focus will be specifically on the following aspects:Basic knowledge of discrete mathematicsBasic knowledge of logicBasic knowledge of formal language theoryBasic knowledge of data structures and algorithmsBasic knowledge of compiler constructionBasic knowledge of software engineeringBasic knowledge of design patterns and UMLProgramming capabilities (Linux, C, Java, develop-environments)General academic skills Basic knowledge of discrete mathematics Basic knowledge of logic Basic knowledge of formal language theory Basic knowledge of data structures and algorithms Basic knowledge of compiler construction Basic knowledge of software engineering Basic knowledge of design patterns and UML Programming capabilities (Linux, C, Java, develop-environments) General academic skills Every application for admission will be reviewed by the Examination Board. Without approval of admission by the Examination Board no candidate will have access to the master programme of Software Engineering. Atthe request of a student, the Examination Board may deviate from the provisions of paragraph 1."
Software Engineering,
Software Architecture,"Course catalogue number 5364SOAR6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of  After this course, the student is able to: translate requirements into a system architecture, handle trade-offs between conflicting requirements and motivate choices made, assess an architecture document for different stakeholders having different priorities.   Keywords: Design decisions, architecture documentation, software quality, architectural patterns, design patterns, architecture trade-off analysis, views, viewpoints, architectural evolution. This course examines fundamental design decisions that should ensure that a software system is able to meet the quality requirements. This concerns the division of a system into components, the relationships between these components, the quality requirements of the individual components and the system as a whole, and decisions that need to be made to choose between conflicting requirements.   General knowledge of software engineering; construction of programs of considerable size.  Registration is required via https://www.sis.uva.nlâ†’ URLuntil four weeks before the start of the semester.  Lecture, seminar and computer lab   L. Bass, P. Clements and R. Kazman. 'Software Architecture in Practice'. Addison-Wesley, 2012. (Third edition.)   Examination and laboratory work  Course catalogue number 5364SOAR6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator)prof.dr. J.C. van Vliet Is part of Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) prof.dr. J.C. van Vliet Software Engineering"
Software Testing,"Course catalogue number 5364SOTE6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of After the course, the student is able to understand and produce formal specifications of modest-sized samples of software, and is able to use formal specifications to generate relevant tests for the software. Software testing is checking whether a given software system satisfies given requirements or specifications. Without a specification, it is impossible to state what a piece of software should do, and there is no reasonable way to set up the test process. An informal specification is not enough, for if we want to automate the test process we need pre-given information about (i) which tests are relevant, and about (ii) what the outcomes of the relevant tests should be. The information about (i) states the preconditions of the code, and the information about (ii) states the postconditions. Programs written in functional or imperative languages can be tested, given a formal specification, by means of a random test generator. This test method will be illustrated for a number of example programs written in Haskell. The course includes a lightning introduction to this languages, and then focusses on how to test programs written in either functional or imperative style, and how to use tools for automated test generation. Registration is required via https://www.sis.uva.nlâ†’ URLuntil four weeks before the start of the semester. To be announced Lectures, seminars and computer lab sessions. Course Book: Kees Doets and Jan van Eijck, 'The Haskell Road to Logic, Maths and Programming'. College Publications, London 2012. This book can be ordered (at a discount) with the lecturer. Course reader: Jan van Eijck, 'Purely Functional Algorithm Specification'. Will be made available during the course. Recommended background reading: M. Huth and M. Ryan, 'Logic in Computer Science: Modelling and Reasoning about Systems',Cambridge University Press 2004 (Second Edition). Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,'Logic in Action', electronically available fromhttp://www.logicinaction.org Course examination will consist of assignments during the course plus a final exam consisting of a theory part and a computer lab part. Final grade determined for 40 % by the course assignment results and for 60 % by the result on the final exam. Course catalogue number 5364SOTE6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) prof. dr. D.J.N. van Eijck (co-ordinator) Is part of Software Engineering Add course to planner Sem. 1 Sem. 2   prof. dr. D.J.N. van Eijck (co-ordinator) Software Engineering"
Requirements Engineering,"Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s)  College/graduate Graduate School of Informatics Lecturer(s) Is part of The success of a software system depends on the proper interpretation and analysis of user needs. Experience shows that it is extremely difficult to adequately define and specify a system. The perception of customers and users on the problem is often incomplete, inaccurate and changes over time. Knowledge is hard to express and to transfer. During this course you will understand why user needs are so hard to express, capture and understand. You will also learn the shortcomings of best practices like scrum, prototyping, interviewing and use cases. Furthermore you will learn about data-driven methods for requirements engineering like Contextual Design. Requirements methods and techniques will be discussed during the lectures. If feasible the whole student group will collaborate in one real life requirements project based on the method of contextual design. Next to specific RE literature we will also study literature from psychology, law, philosophy and cognitive science to get a better understanding of the subject. Finally students will design and do an experiment to show the inherent weakness of requirements best practices, like the use of prototyping for requirement validation. This will be done from the perspective of human factors. Knowledge of requirement engineering, for example books of Sommerville, Robertson, van Lamsweerde, Wiegers or Pohl. 'Modeling techniques', e.g. UML diagrams to describe software behoviour. Registration is required viahttps://www.sis.uva.nluntil four weeks before the start of the semester. Lecture, seminar and computer lab. Thinking, fast and slow, Kahneman Reading tests, paper and lab work. Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2 Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Is part of Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Software Engineering"
Preparation Masterproject Software Engineering,"Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For part-time (2 year students): all other courses in the program have been passed. For full-time (1 year students): To continue with the Masterâ€™s project preparation in the second semester (January), all courses of the first semester have to be passed. Time period(s)   College/graduate Graduate School of Informatics Lecturer(s) Is part of The objective of the course is teaching the skills needed to successfully complete the Masterâ€™s (graduation) project. In summary these skills are: During paper sessions you learn skills to find, read and assess relevant scientific publications. You will also learn to build argumentation structures you need for your theory and analysis. For your graduation you can choose from a number of defined themes. In exceptional cases it is possible to define a project yourself. A tutor will help you during the preparation. You will also discuss your ideas with other students. Registration is required viahttps://www.sis.uva.nluntil four weeks before the start of the semester. This is a mixed theoretical and practical course. The format is aimed at exercising skills needed to complete the Masterâ€™s project. There are interactive sessions where scientific reading, writing, research design, and presentation skills are covered. Study materials are made available through the courseâ€™s BlackBoard page. The student can pass the course by getting approval by a lecturer (tutor) for two deliverables: Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For part-time (2 year students): all other courses in the program have been passed. For full-time (1 year students): To continue with the Masterâ€™s project preparation in the second semester (January), all courses of the first semester have to be passed. Time period(s) Sem. 1Sem. 2 Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. M. Bruntinkdrs. H.L. Dekkersprof. dr. D.J.N. van Eijckdr. T. van der Stormdr. S.F.M van Vlijmendr. V.V. Zaytsev (co-ordinator) Is part of Software Engineering Add course to planner Sem. 1 Sem. 2   dr. M. Bruntink drs. H.L. Dekkers prof. dr. D.J.N. van Eijck dr. T. van der Storm dr. S.F.M van Vlijmen dr. V.V. Zaytsev (co-ordinator) Software Engineering Problem analysis, Scientific literature survey, Theory building, Hypothesizing, Structuring research and validation, Project planning, Scientific reporting. An interest in reading and writing scientific literature. Affinity with reading and writing English text. Knowledge of current challenges and results in software engineering. Plan for the Masters project, Survey of related literature."
Software Process,"Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s)  College/graduate Graduate School of Informatics Lecturer(s) Is part of During this course you will come to understand why big software engineering projects are prone to failure. You will come to understand how performance is influenced at different levels: that of the individual software engineer, the team and the whole organization. You will learn about motivation, competences, and the crucial role of culture. Also you will learn about organizational paradigms and control mechanisms, quality paradigms, and the role of planning and design in a world that is volatile and of which a lot is unknown. As software engineering is a special kind of organization, you will also learn how effective our best practices are. With this knowledge you will be able to understand why a method like RUP or Scrum is sometimes successful and sometimes not. You will also come to assess such a method and better be able to use it in such a way to improve overall project performance. Developing large scale software systems is challenging for many reasons. We work from a set of requirements that are ambiguous and incomplete, may be invalid and are subject to change. Itâ€™s hard to determine the quality and doneness of (intermediate) deliverables like designs, plans and code. We have to coordinate up to 1.000 software engineers with imperfect mechanisms for separation of concerns. To be able to understand reasons for software project failure we study failed projects. We learn about organizational control mechanisms and look at theory from social sciences notably motivation, empowerment, effective teams and coordination strategies. Last but not least we look at what we can learn from the quality community: Lean, CMMi, TQM, Kaizen. We will also examine evidence about the practices we apply in software engineering, like test first, pair programming, software architecture. Knowledge of software methods like Rup, Scrum, Xp and software practices like pair programming, test first. Experience with working in big projects. Lecture, work groups, seminar. Andy Oram, Greg Wilson'Making Software:What Really Works, and Why We Believe It'. Reading tests, essay and lab work. Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2 Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Is part of Software Engineering Add course to planner Sem. 1 Sem. 2   Registration is   required viahttps://www.sis.uva.nlbefore the start of the semester. Please   visit the website of your programme throughhttp://student.uva.nland check   the A-Z list â€™Course and Exam Registrationâ€™ for more information. drs. H.L. Dekkers (co-ordinator) Software Engineering"
Software Construction,"Course catalogue number 5364SOCO6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of The course focuses on methods and techniques of software construction. This primarily covers the programming and implementation activities of a software engineering project. Examples of such activities are coding and debugging, detailed design, unit testing, code reviews, optimization, component integration and code generation. The course has two main objectivea: In the practical course students will implement a Domain-Specific Language (DSL). This involves both language engineering aspects (parsing, type checking, interpretation etc.) as well as a substantial amount of programming and discussion. The code will be reviewed based on aspects of code quality, simplicity, readability, modularity, separation of concerns and consistency of style. Lectures will provide the required background on DSLs, model-driven engineering (MDE), compiler theory, generative programming, code quality, ""Don't-Repeat-Yourself"" (DRY), code smells and design patterns. Additional academic literature covers subjects such as design-by-contract, SOLID principles, data abstraction, modularity, hierarchy and object-oriented frameworks. Students are required to complete a take home exam based on the academic literature, so as to show they master concepts and practices relevant for high quality software construction. Technical mastery of one or more object-oriented programming languages (e.g., Java, C#, etc.). Lectures, workshops and computer lab. Required reading (tentative):Â Crista Lopes, 'Exercises in Programming Styles'. Syllabus of landmark papers on topics in software construction. 60 Successful completion of the take home exam, final grade based on submitted code. Course catalogue number 5364SOCO6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. T. van der Storm (co-ordinator)dr. J.J. Vinju Is part of Software Engineering Add course to planner Sem. 1 Sem. 2   Registration is   required viahttps://www.sis.uva.nlbefore the start of the semester. Please   visit the website of your programme throughhttp://student.uva.nland check   the A-Z list â€™Course and Exam Registrationâ€™ for more information. dr. T. van der Storm (co-ordinator) dr. J.J. Vinju Software Engineering Inform students about the area of software language engineering: how to employ model-driven and language-driven approaches in software construction. This is includes basic theory of compiler construction. Actively engage students to reason about and reflect upon aspect of design, code quality, and software construction methods."
Masterproject Software Engineering,"Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s)  College/graduate Graduate School of Informatics Lecturer(s) Is part of Carry out the research as proposed by the plan you made in the preparation phase. A lecturer (tutor) will be available for weekly feedback and discussion. Part time students will need to free time to work at least two month full time on their research. In order to start the Masterâ€™s project you need to have approval from a lecturer (tutor) on your project plan and related literature survey. Registration is NOT required but will be done by the Servicedesk of the ESC after the completion of the Master Project. The Masterâ€™s project consists of a software engineering-themed research assignment (an internship) at either a company or a research institution. Blackboard Scientific literature Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s) Sem. 1Sem. 2 Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. M. Bruntinkdrs. H.L. Dekkersprof. dr. D.J.N. van Eijckprof.dr. P. Klintdr. T. van der Stormdr. V.V. Zaytsev (co-ordinator) Is part of Software Engineering Add course to planner Sem. 1 Sem. 2   dr. M. Bruntink drs. H.L. Dekkers prof. dr. D.J.N. van Eijck prof.dr. P. Klint dr. T. van der Storm dr. V.V. Zaytsev (co-ordinator) Software Engineering Acquiring the ability to do research by designing, executing and reporting on a project in the area of software engineering research, Adding knowledge or gathering new evidence in the field of software engineering. Quality of the work as reported on in the thesis, Quality of the presentation given during the defense session."
Software Engineering,
Software Evolution,"Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of Our objectives are three-fold. The first objective is to acquire an understanding and appreciation of the challenges posed by software maintenance and software evolution. The second objective is to learn about quality of architecture and source code and how it affects software maintenance and evolution. The final objective is to be able to select and also construct software analysis and software transformation tools to help obtain insight in software quality and to help improve software quality. The course ties in closely with paper writing sessions where the objectives are to learn from academic literature, to develop curiosity, and to improve argumentation and writing skills. This course is designed around lab sessions in which we study real and large (open-source) software systems, written in languages like C, Java, PHP or Ruby. We use Rascal -a programming language workbench, or meta programming language- to apply and build software metrics, software analyses, software visualisations and (if time permits) software transformations. See http://www.rascal-mpl.org. The student is supported with introductory courses and interactive lab sessions while learning this new language in the beginning. The course is supported by a series of lectures on the theory of software maintenance and evolution, and a guided study of a number of research papers about maintenance, reverse engineering, reengineering and renovation. Example topics are clone detection, mining software repositories and refactoring. During the course students all write a short, but in-depth, paper about one of these subjects (possibly supported by facts generated by the lab exercises). Advanced programming skills in several programming languages.Basic knowledge of compiler construction (parsing, ASTs, basic code analysis, etc.)Good (academic) English reading and writing skills Registration is required viahttps://www.sis.uva.nluntil four weeks before the start of the semester. The format is focused on practical skills via the lab exercises, such as exploring source code and building tools, and academic skills via the paper writing component. Every week we start with two hour lecture on the theory of software evolution, which is required to understand the material covered in the lab exercises. The rest of the day and the following day are lab hours. You also need two hours time every other week to prepare for the bi-weekly two-hour paper sessions. - http://www.rascal-mpl.org- reader consisting of material on software evolution- potentially other (academic) sources This course typically uses various types of assessment, that will be detailed at the start of the course:- lab assignments, assessed by demonstration and oral exam- online test to assess basic skills- paper/essay- exam In this course we use the experimental programming language Rascal, which is (beta) open-source software and new to most students. On top of that we dive into many new topics for the students. Therefore the lab time is designed to be an integral and interactive part of the teaching, where the lecturer and the students are both present. Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. M. Bruntink (co-ordinator)dr. T. van der Storm Is part of Software Engineering Add course to planner Sem. 1 Sem. 2   dr. M. Bruntink (co-ordinator) dr. T. van der Storm Software Engineering"
