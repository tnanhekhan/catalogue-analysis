Column Name,Content
Software Engineering,"Educational institute Graduate School of Informatics Programme type Master's Credits 60 EC Duration 1 year Instruction language English Education form Full-time, Day-time class Contact Education Desk FNWI Science Park 904 020 5257100 The programme takes one academic year (60 credits) and awards a Master of Science degree in Software Engineering. It is likewise possible to attend the programme part-time, which takes two years instead of one. Programme Director Software Engineering: dr. C.U. Grelck Website:please, refer tohttp://www.student.uva.nl/sefor all announcements and information regarding the Master Software Engineering. Study load and credits: The University of Amsterdam (UvA) applies the European Credit Transfer System (ECTS). The general study load for students is 30 EC per semester. A full academic year of two semesters equals 60 EC. Each semester lasts 20 weeks with 3 periods: 2 periods of 8 weeks and a third period of 4 weeks. A student’s study load (both contact hours and hours spent studying and preparing for assignments) is measured in European Credits (EC). Under Dutch law 1 EC represents 28 hours of work and 60 EC represent one academic year of full-time study. This is equivalent to about 40 hours of work per week. Educational institute Graduate School of Informatics Programme type Master's Credits 60 EC Duration 1 year Instruction language English Education form Full-time, Day-time class Contact Education Desk FNWIScience Park 904020 5257100"
Programme,"The Master Software Engineering is a one-year academic programme with a mandatory curriculum of 60 EC. It familiarises students with the broad and dynamic field of software engineering. Software engineering projects are complex undertakings, and there is no one recipe that guarantees success in all cases. This one year master programme makes students better software engineers, designers and architects. It enables graduates to make significant contributions to large-scale software projects in industry and academia alike. Software engineering uses many results from computer science, but the Master Software Engineering distinguishes itself from classical computer science curricula in a number of aspects, among others the size and complexity of software systems concerned, the role of human factors and the volatility of requirements. These aspects lead to a high degree of uncertainty about the impact and validity of design decisions. What is good for performance may be detrimental for understandability, maintainability and re-use. Software engineers must strive to understand these trade-offs and reduce dependencies. As changing and conflicting goals are omnipresent, software continuously needs to evolve. The software engineering domain in itself is in constant flux. Innovations in technology, design patterns and techniques are continuous. However, out-of-the-box solutions often have their specific limitations. We believe a good software engineer is like a good researcher. We intend to teach our students how to acquire relevant knowledge, how to improve making decisions, how to reflect on their current approach, how to learn to question their assumptions and how to assess their ideas. We expect students to have a solid technological basis and a fundamental understanding of computer science and software. From a technical perspective the curriculum covers software quality, specification-based automated testing, automatic code analysis, automatic code transformation and development of domain specific languages. Non-technical topics focus on software architectures, on requirements engineering and on organizational aspects of software engineering. Continuous interaction between students and staff is characteristic for the programme. Students work on challenging assignments and receive immediate feedback, making the programme very intensive.  Sem. 1 Sem. 2 EC Requirements Engineering   6 Software Specification, Verification and Testing   6 Preparation Masterproject Software Engineering   6 Embedded Software and Systems   6 Software Evolution   6 DevOps and Cloud-based Software   6 Software Process   6 Masterproject Software Engineering   18"
Part-time programme,In the part-time variant one course is taken per period instead of two. Students are expected to work around 20 hours per week and to spend two full days at university.
Contact,Education Desk FNWIScience Park 904 B0020 5257100servicedesk-esc-science@uva.nl
Requirements Engineering,"Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of The success of a software system depends on the proper interpretation and analysis of stakeholder needs. Experience shows that it is extremely difficult to adequately define and specify a system. The perception of stakeholders and users of the problem is often incomplete, inaccurate and changes over time. Knowledge is hard to express and to transfer. During this course you will understand why stakeholder needs are so hard to express, capture and understand. You will also learn the shortcomings of best practices like scrum, prototyping, interviewing and use cases. Furthermore you will learn about data-driven methods for requirements engineering like Contextual Design. Requirements methods and techniques will be discussed during the lectures. If possible, you will do a real life requirements project. Next to specific RE literature we will also study literature from law, philosophy and cognitive science to get a better understanding of the subject. Finally students will design and do an experiment to show the inherent weakness of requirements best practices, like the use of prototyping for requirement validation. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. Reading tests, paper and lab work. Recommended prior knowledge: Knowledge of requirement engineering, for example books of Sommerville, Robertson, van Lamsweerde, Wiegers or Pohl. 'Modeling techniques', e.g. UML diagrams to describe software behaviour. Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering Lecture Seminar Literature:D. Kahneman 'Thinking, fast and slow'. D. Kahneman 'Thinking, fast and slow'. Syllabus:  D. Kahneman 'Thinking, fast and slow'. "
"Software Specification, Verification and Testing","Course catalogue number 5364SSVT6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of At the end of the course, the student is Software specification, verification, and testing entail checking whether a given software system satisfies given requirements and/or specifications. Without a specification, it is impossible to state what a piece of software should do, and there is no reasonable way to set up the test process. An informal specification is not enough. If we aim to automate the test process we need pre-given information about: Programs written in functional or imperative languages can be tested, given a formal specification, by means of a random test generator. This test method will be illustrated for a number of example programs that are written in Haskell. The course assumes basic familiarity with this language and focusses on how to test programs written in either functional or imperative style, and how to use tools for automated test generation. Basic familiarity with functional programming in Haskell. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. Course examination consists of weekly assignments plus a final exam both the theory and practical parts. Final grade determined for 40% by the weekly assignment results and for 60% by the result on the final exam. Course catalogue number 5364SSVT6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering able to understand and produce formal specifications of modest-sized samples of software, able to use formal specifications to generate relevant tests for the software Lecture Seminar Laptop seminar Self-study Literature:Graham Hutton, 'Programming in Haskell', Cambridge University Press 2016 (Second Edition).Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,'Logic in Action', electronically available fromhttp://www.logicinaction.orgRecommended background reading: Kees Doets and Jan van Eijck, 'The Haskell Road to Logic, Maths and Programming'. College Publications, London 2012. This book can be ordered (at a discount) with the lecturer. Graham Hutton, 'Programming in Haskell', Cambridge University Press 2016 (Second Edition). Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,'Logic in Action', electronically available fromhttp://www.logicinaction.org Recommended background reading: Kees Doets and Jan van Eijck, 'The Haskell Road to Logic, Maths and Programming'. College Publications, London 2012. This book can be ordered (at a discount) with the lecturer. Graham Hutton, 'Programming in Haskell', Cambridge University Press 2016 (Second Edition). Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,'Logic in Action', electronically available fromhttp://www.logicinaction.org Recommended background reading: Kees Doets and Jan van Eijck, 'The Haskell Road to Logic, Maths and Programming'. College Publications, London 2012. This book can be ordered (at a discount) with the lecturer. which tests are relevant --> this information states the preconditions of the code what the outcomes of the relevant tests should be --> this information states the postconditions of the code."
Preparation Masterproject Software Engineering,"Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For both part-time and full-time students. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of The objective of the course is teaching the skills needed to successfully complete the Master’s (graduation) project. In summary these skills are: During paper sessions you learn skills to find, read and assess relevant scientific publications. You will also learn to build argumentation structures you need for your theory and analysis. For your graduation you can choose from a number of defined themes. In exceptional cases it is possible to define a project yourself. A tutor will help you during the preparation. You will also discuss your ideas with other students. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. The student can pass the course by getting approval by a lecturer (tutor) for two deliverables: Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For both part-time and full-time students. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering Problem analysis, Scientific literature survey, Theory building, Hypothesizing, Structuring research and validation, Project planning, Scientific reporting. Self-study Presentation/symposium Working independently on e.g. a project or thesis Supervision/feedback meeting Seminar Other:Study materials are made available through the course’s Canvas page. Study materials are made available through the course’s Canvas page. Study materials are made available through the course’s Canvas page. An interest in reading and writing scientific literature. Affinity with reading and writing English text. Knowledge of current challenges and results in software engineering. Plan for the Masters project, Survey of related literature."
Embedded Software and Systems,"Course catalogue number 5364EMSS6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of The overall course objective is the design, development and verification of embedded software and systems: This course targets the software design and programming of embedded systems, i.e., computing systems which are not immediately recognized as such. Examples include mobile phones, TV sets, consumer electronics, Internet-of-Things, but also airplanes, cars, and satellites. Designing such embedded systems differs fundamentally from traditional design methods for general-purpose computer software: Embedded systems are subject to specific requirements, especially in terms of efficiency (size, weight and power) and costs. At the same time, embedded systems are subject to increased reliability constraints. The go-to solution to resolve system errors for general-purpose computing, i.e., a complete system restart, is typically precluded in an embedded system. The system must always be available and must always reliably produce correct results. To further complicate matters, the correctness of most embedded systems is not just defined by the correct result of a computation, but by the correct result and the correct timing. Imagine an air-bag controller, which must inflate the air-bag in time before the driver’s head hits the steering wheel, or a flight control system, which must correct turbulences, before the airplane becomes instable. Concerning less critical cases, we have for instance media players where the playback is delayed or the quality is degraded. In this course, we will provide an introduction to the domain of embedded computer systems, and teach common design and development methods of embedded software and systems. The course covers the following topics: More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. Course catalogue number 5364EMSS6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. ing. S.J. Altmeyer (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. ing. S.J. Altmeyer (co-ordinator) Master's Software Engineering The students know the characteristics of embedded software and systems and how to accommodate these characteristics during the design-phase. The students are able to specify and develop embedded software and systems for a given embedded architecture. Characteristics and constraints of embedded systems Embedded system design flow Specification of the functional and non-functional behavior of an embedded system Selection and configuration of suitable embedded architectures Analysis of non-functional behavior of embedded systems Correctness verification of (non-)functional properties of embedded systems C-Knowledge (preferred, not mandatory) Computer Organization (preferred, not mandatory) Lecture Self-study Working independently on e.g. a project or thesis Laptop seminar Practical Project Assignments Examination"
Software Evolution,"Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Exit qualification: “The graduate masters the methods and techniques needed to analyze an existing software system and to enable it to evolve given changing requirements.” Our objectives are three-fold: The course ties in closely with paper writing sessions where the objectives are to learn from academic literature, to develop curiosity, and to improve argumentation and writing skills. This course is designed around lab sessions in which we study real and large (open-source) software systems, written in languages like C, Java, PHP or Ruby. We use Rascal -a programming language workbench, or meta programming language- to apply and build software metrics, software analyses, software visualisations and (if time permits) software transformations. Seehttp://www.rascal-mpl.org.The student is supported with introductory courses and interactive lab sessions while learning this new language in the beginning. The course is supported by a series of lectures on the theory of software maintenance and evolution, guest lecturers from field experts, and a guided study of a number of research papers about maintenance, reverse engineering, reengineering and renovation. Example topics are clone detection, mining software repositories and refactoring. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. This course typically uses the following assessments, that will be detailed at the start of the course: The grade weights are indicative and will be detailed at the start of the course. Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) R.A. van Rozen (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   R.A. van Rozen (co-ordinator) Master's Software Engineering The first objective is to acquire an understanding and appreciation of the challenges posed by software maintenance and software evolution. The second objective is to learn about quality of software and source code and how it affects software maintenance and evolution. The final objective is to be able to select and also construct software analysis and software transformation tools to help obtain insight in software quality and to help improve software quality. Advanced programming skills in several programming languages. Knowledge of compiler construction (parsing, ASTs, basic code analysis, etc.). Good (academic) English reading and writing skills. Lecture Laptop seminar Computer lab session/practical training Self-study Syllabus:Reader consisting of selected papers on software evolution Reader consisting of selected papers on software evolution Other:http://www.rascal-mpl.orgPotentially other (academic) sources http://www.rascal-mpl.org Potentially other (academic) sources Reader consisting of selected papers on software evolution http://www.rascal-mpl.org Potentially other (academic) sources online test to assess basic skills practical lab assignments, assessed by demonstration and oral exam (2/3 of final grade) writing exercise(s): essay and/or annotated bilbiography (1/3 final grade)"
DevOps and Cloud-based Software,"Course catalogue number 5364DCBS6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of DevOps is a modern software and applications development model that realises the continuous integration (CI), continuous deployment (CD) and continuous improvement of the services and applications that is deeply based on the cloud virtualisation, on demand services deployment and precision services monitoring currently available on the major cloud platforms. The course discusses the basic concepts of DevOps, including its philosophy, workflow, monitoring methods, and tools. Students will apply these concepts to understand how they can be best implemented to automate development, test, and release practices. Students will work in teams to apply DevOps model and tools to develop working applications and will use one of cloud and DevOps platforms. The following topics will be covered in the course: The course will also feature guest lectures from local cloud providers or DevOps companies. Knowledge of one of programming languages Java, C or Python and one of IDE platforms More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. The course assessment includes two parts: individual assignment (30%) and final project (70%, of which final report and code 40% and project development process 30%) Course catalogue number 5364DCBS6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dhr. Y. Demchenko (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dhr. Y. Demchenko (co-ordinator) Master's Software Engineering Graduates are familiar with the concept of DevOps and related technologies, their benefits for organisational IT infrastructure and services management; understand organisational aspects of DevOps, describe relation of DevOps to other technologies Graduates will understand how to build cloud based applications and use cloud automation tools in the DevOps process applied to a range of applications and software development scenarios/processes Graduates will understand functionalities offered by the popular DevOps and cloud automations tools such as Chef, Puppet, Ansible, SlipStream and have practical hands on experience with one of such tools Introduction DevOps, core concepts and models, Continuous Delivery (CD), Continuous Integration (CI), Continuous Deployment. Agile development, relation to Agile, Scrum, Lean, ITSM Cloud Computing architecture, service models, virtualisation, resources management and monitoring DevOps and software engineering on major cloud platforms: AWS, Microsoft Azure. Cloud powered applications deployment, accounts management Cloud automation tools and platforms: Chef, Puppet, Ansible, SlipStream Software delivery lifecycle in an agile DevOps organisation, QA in cloud based software development systems, software security and Security Development Lifecycle management (SDLM) DevOps applications architecture, configuration management, environment setups in AWS cloud using SlipStream platform Lecture Self-study Working independently on e.g. a project or thesis Laptop seminar Presentation/symposium"
Software Process,"Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of During this course you will come to understand why big software engineering projects are prone to failure. You will come to understand how performance is influenced at different levels: that of the individual software engineer, the team and the whole organization. You will learn about motivation, competences, and the crucial role of culture. Also you will learn about organizational paradigms and control mechanisms, quality paradigms, and the role of planning and design in a world that is volatile and of which a lot is unknown. As software engineering is a special kind of organization, you will also learn how effective our best practices are. With this knowledge you will be able to understand why a method like RUP or Scrum is sometimes successful and sometimes not. You will also come to assess such a method and better be able to use it in a situational fit way to improve overall project performance. Developing large scale software systems is challenging for many reasons. We work from a set of requirements that are ambiguous and incomplete, may be invalid and are subject to change. It’s hard to determine the quality and doneness of (intermediate) deliverables like designs, plans and code. We have to coordinate up to 1.000 software engineers with imperfect mechanisms for separation of concerns. To be able to understand reasons for software project failure we study failed projects. We learn about organizational control mechanisms and look at theory from social sciences notably motivation, empowerment, effective teams and coordination strategies. Last but not least we look at what we can learn from the quality community: Lean, CMMi, TQM, Kaizen. We will also examine evidence about the practices we apply in software engineering, like test first, pair programming, software architecture. Knowledge of software methods like Rup, Scrum, Xp and software practices like pair programming, test first. Experience with working in big projects. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. Reading tests, essay and lab work. Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering Lecture Seminar Literature:Andy Oram, Greg Wilson'Making Software: What Really Works, and Why We Believe It'. Andy Oram, Greg Wilson'Making Software: What Really Works, and Why We Believe It'. Andy Oram, Greg Wilson'Making Software: What Really Works, and Why We Believe It'."
Masterproject Software Engineering,"Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Carry out the research as proposed by the plan you made in the preparation phase. A lecturer (tutor) will be available for weekly feedback and discussion. Part time students will need to free time to work at least two month full time on their research. Preparation Master Project The schedule for this course is published onDataNose. Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering Acquiring the ability to do research by designing, executing and reporting on a project in the area of software engineering research, Adding knowledge or gathering new evidence in the field of software engineering. Self-study Presentation/symposium Working independently on e.g. a project or thesis Supervision/feedback meeting Literature:Scientific literature Scientific literature Scientific literature Quality of the work as reported on in the thesis, Quality of the presentation given during the defense session. In order to start the Master’s project you need to have approval from a lecturer (tutor) on your project plan and related literature survey."
