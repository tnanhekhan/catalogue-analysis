Column Name,Content
Software Engineering,"Educational institute Graduate School of Informatics Programme type Master's Credits 60 EC Duration 1 Year Instruction language English Education form Full-time and part-time, Day-time class Contact drs. R. J. Kellermann Deibel Science Park 904 +31 20 5255856 The programme takes one academic year (60 credits) and awards a Master of Science degree in Software Engineering. It is likewise possible to attend the programme part-time, which takes two years instead of one. Website: Please, refer tohttp://www.student.uva.nl/sefor all announcements and information regarding the Master Software Engineering. Study load and credits: The University of Amsterdam (UvA) applies the European Credit Transfer System (ECTS). The general study load for students is 30 EC per semester. A full academic year of two semesters equals 60 EC. Each semester lasts 20 weeks with 3 periods: 2 periods of 8 weeks and a third period of 4 weeks. A student’s study load (both contact hours and hours spent studying and preparing for assignments) is measured in European Credits (EC). Under Dutch law 1 EC represents 28 hours of work and 60 EC represent one academic year of full-time study. This is equivalent to about 40 hours  of work per week. Educational institute Graduate School of Informatics Programme type Master's Credits 60 EC Duration 1 Year Instruction language English Education form Full-time and part-time, Day-time class Contact drs. R. J. Kellermann DeibelScience Park 904+31 20 5255856 Programme DirectorSoftware Engineering dr. C.U. Grelck C.U.Grelck@uva.nl"
Content,"The Master Software Engineering familiarises students with the broad and dynamic field of software engineering. Software engineering projects are complex undertakings, and there is no one recipe that guarantees success in all cases. This one year master programme makes students better software engineers, designers and architects. It enables graduates to make significant contributions to large-scale software projects in industry and academia alike. Software engineering uses many results from computer science, but the Master Software Engineering distinguishes itself from classical computer science curricula in a number of aspects, among others the size and complexity of software systems concerned, the role of human factors and the volatility of requirements. These aspects lead to a high degree of uncertainty about the impact and validity of design decisions. What is good for performance may be detrimental for understandability, maintainability and re-use. Software engineers must strive to understand these trade-offs and reduce dependencies. As changing and conflicting goals are omnipresent, software continuously needs to evolve. The software engineering domain in itself is in constant flux. Innovations in technology, design patterns and techniques are continuous. However, out-of-the-box solutions often have their specific limitations. We believe a good software engineer is like a good researcher. We intend to teach our students how to acquire relevant knowledge, how to improve making decisions, how to reflect on their current approach, how to learn to question their assumptions and how to assess their ideas. We expect students to have a solid technological basis and a fundamental understanding of computer science and software. From a technical perspective the curriculum covers software quality, specification-based automated testing, automatic code analysis, automatic code transformation and development of domain specific languages. Non-technical topics focus on software architectures, on requirements engineering and on organizational aspects of software engineering. Continuous interaction between students and staff is characteristic for the programme. Students work on challenging assignments and receive immediate feedback, making the programme very intensive."
The Software Engineering curriculum,The Master Software Engineering is a one-year academic programme with a mandatory curriculum  of 60 EC.
Software Engineering,"Full-time Programme Part-time programmeIn the part-time variant one course is taken per period instead of two. Students are expected to work around 20 hours per week and to spend two full days at university. Semester 1 Sem. 1 Sem. 2 EC sem.1-period 1:    Requirements Engineering   6 Software Testing   6 sem.1-period 2:    Software Architecture   6 Software Evolution   6 sem.1-period 1,2,3, and sem.2 period 4:    Preparation Masterproject Software Engineering   6 Semester 2    sem.2-period 4:    Software Process   6 Software Construction   6 sem.2-period 4,5,6:    Masterproject Software Engineering   18 First year Second year sem.1-period 1: sem.1-period 1: Requirements Engineering Software Testing ORSoftware Testing ORRequirements Engineering  sem.1-period 2: sem.1-period 2: Software Architecture Software Evolution ORSoftware Evolution ORSoftware Architecture   sem.1-period 3: sem.1-period 3: Preparation Masterproject Software Engineering Masterproject Software Engineering  sem.2-period 4: sem.2-period 4: Software Construction Software Construction ORSoftware Process ORSoftware Process  sem.1-period 1,2,3 and sem.2-period 4 sem.2-period 4,5,6: Preparation Masterproject Software Engineering Masterproject Software Engineering"
The teaching staff,"The Master Software Engineering has been designed by members of the SE teaching team, which consists of employees from: Core teaching staff: * coordinator Lecturer e-mail dr. C. Grelck * C.U.Grelck@uva.nl drs. H. Dekkers H.L.dekkers@uva.nl prof. dr. D.J.N. van Eijck (CWI-UvA) jan.van.eijck@cwi.nl drs. W. Leeuwis W.Leeuwis@uva.nl dr. T. van der Storm T.vanderStorm@uva.nl the Instituut voor Informatica (IvI) of the FNWI; the Cluster Software Engineering (http://www.cwi.nl/sen) of the 'Centrum voor Wiskunde en Informatica' (CWI-SEN); the Information Management and Software Engineering department at the VU."
Objectives and exit qualifications of the Software Engineering programme,"Objectives of the Software Engineering Programme Exit qualifications of the Software Engineering Programme General Specific exit qualifications per course: The      aim of Software Engineering is to systematically design, construct and      maintain large software systems that are delivered in time and within      budget, that are reliable and efficient, and that are maintainable over      the long term. The      Software Engineering programme educates students to become professional      software engineers who can not only be employed by industry and      government, but can also be active in higher education and academic      research. The      graduate has insight in the most important theories, methods and      techniques in the domain of Software Engineering and has sufficient      background to familiarize him/herself with new methods and techniques. The      graduate can apply this insight to find innovative solutions for existing      and new problems, while applying theory in the right way in practice.      He/she can analyze and solve domain-specific problems as well as general      Software Engineering problems. The      graduate can make a valuable contribution to complex software projects      that require the independent and critical application of academic      knowledge and skills. The      graduate has sufficient technical knowledge and intellectual capacities to      play - after some years of practical experience - a managerial or advisory      role in the Software Engineering profession. The      graduate can formulate a vision regarding Software Engineering and can      contribute to the evolution, innovation and policy development needed for      software systems. The      graduate can solve Software Engineering problems using abstraction and      modelling, and can create solutions that take their societal context into      consideration, even if only partial information is available. The      graduate can clearly report on his/her findings, both orally and in      writing, and can explain problems at the right level of abstraction. The      graduate has the skills to explore (search, read, assess) documentation,      literature and tools in the domain of Software Engineering. The      graduate can reflect on his/her own accomplishments and can therefore continuously      develop him/herself. The      graduate can act well inmono-disciplinary teams. The      graduate has research skills at the academic level and can autonomously      perform research in the domain of Software Engineering. The      graduate can understand the experiences of others. Software      Evolution: the graduate masters the methods and techniques needed to      analyze an existing software system and to enable it to evolve given      changing requirements. Software      Testing: the graduate can produce formal specifications of modest-sized      samples of software and is able to use formal specifications to generate      relevant tests for them. Software      Construction: the graduate knows how to employ model-driven and      language-driven approaches in software construction. The graduate is also      able to reason about and reflect upon aspects of design, code quality, and      software construction methods. Software      Architecture: the graduate can translate system requirements into a      software architecture, handle trade-offs between conflicting requirements,      motivate choices made, and assess an architecture document for different      stakeholders having different priorities. Requirements      Engineering: the graduate understands why user needs are so hard to      express, capture and understand. The graduate knows the shortcomings of      best practices like product owner, prototyping, interviewing and use      cases. The graduate has had a first experience with data-driven methods      for requirements engineering like Contextual Design. Software      Process: the graduate understands why big software engineering projects      are prone to failure. The graduate has insight in how performance is      influenced at different levels: that of the individual software engineer,      the team and the whole organization. The graduate is able to understand      why a method like RUP or Scrum is sometimes successful and sometimes not      and how to adapt a method based on a situational analysis."
Admission Requirements MSc Software Engineering,"1. Admission to the master programme Software Engineering is possible for students with either of the following qualifications: In the assessment the quality, motivation and the level of knowledge of the candidate will be reviewed. The above mentioned procedure will be further established by the Examinations Board. 2. Every      application for admission will be reviewed by the Examination Board.      Without approval of admission by the Examinations Board no candidate will      have access to the master programme of Software Engineering. 3. At      the request of a student, the Examinations Board may deviate from the      provisions of paragraph 1. (a)       A Bachelor Informatics or Technical Informatics from a Dutch university.(b)       A foreign qualification comparable to 1 (a). In an assessment the       quality, motivation and the level of knowledge of the candidate will be       reviewed.(c)       Every Higher Vocational Education (HBO) Bachelor in Informatics (HIO),       Technical Informatics, or a Bachelor in a comparable HVE (HBO) programme       with a graduate point average (GPA) of 7 (out of 10) or higher, for       students who successfully pass the assessment for the Master Software       Engineering, which students must also have completed a study programme       that includes the following courses, or courses that are comparable to       these: (a)        Data structures and algorithms, (b)        Software and database design, (c)        Operating systems, (d)        Programming languages, (e)        Software engineering. (d)       All other candidates who have successfully completed a (substantial part       of 1a) comparable or related study programme, and who exhibit during an       admission procedure sufficient quality, motivation and prerequisite       knowledge or experience in order to successfully complete the study       programme. In the review of candidates the focus will be specifically on       the following aspects: Basic        knowledge of discrete mathematics Basic        knowledge of logic Basic        knowledge of formal language theory Basic        knowledge of data structures and algorithms Basic        knowledge of compiler construction Basic        knowledge of software engineering Basic        knowledge of design patterns and UML Programming        capabilities (Linux, C, Java, develop-environments) General        academic skills"
Software Engineering,
Requirements Engineering,"Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of The success of a software system depends on the proper interpretation and analysis of user needs. Experience shows that it is extremely difficult to adequately define and specify a system. The perception of customers and users of the problem is often incomplete, inaccurate and changes over time. Knowledge is hard to express and to transfer. During this course you will understand why user needs are so hard to express, capture and understand. You will also learn the shortcomings of best practices like scrum, prototyping, interviewing and use cases. Furthermore you will learn about data-driven methods for requirements engineering like Contextual Design. Requirements methods and techniques will be discussed during the lectures. If feasible the whole student group will collaborate in one real life requirements project based on the method of contextual design. Next to specific RE literature we will also study literature from psychology, law, philosophy and cognitive science to get a better understanding of the subject. Finally students will design and do an experiment to show the inherent weakness of requirements best practices, like the use of prototyping for requirement validation. This will be done from the perspective of human factors. Information about procedures can be found athttp://www.student.uva.nl/se/az/item/course-registration.html. Lecture, seminar and computer lab. Reading tests, paper and lab work. Recommended prior knowledge: Knowledge of requirement engineering, for example books of Sommerville, Robertson, van Lamsweerde, Wiegers or Pohl. 'Modeling techniques', e.g. UML diagrams to describe software behaviour. Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering Literature:  D. Kahneman 'Thinking, fast and slow'."
Software Testing,"Course catalogue number 5364SOTE6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of After the course, the student is able to understand and produce formal specifications of modest-sized samples of software, and is able to use formal specifications to generate relevant tests for the software. Software testing is checking whether a given software system satisfies given requirements or specifications. Without a specification, it is impossible to state what a piece of software should do, and there is no reasonable way to set up the test process. An informal specification is not enough, for if we want to automate the test process we need pre-given information about (i) which tests are relevant, and about (ii) what the outcomes of the relevant tests should be. The information about (i) states the preconditions of the code, and the information about (ii) states the postconditions. Programs written in functional or imperative languages can be tested, given a formal specification, by means of a random test generator. This test method will be illustrated for a number of example programs written in Haskell. The course includes a lightning introduction to this languages, and then focusses on how to test programs written in either functional or imperative style, and how to use tools for automated test generation. Information about procedures can be found athttp://www.student.uva.nl/se/az/item/course-registration.html. Lectures, seminars and computer lab sessions. Course examination will consist of assignments during the course plus a final exam consisting of a theory part and a computer lab part. Final grade determined for 40% by the course assignment results and for 60% by the result on the final exam. Course catalogue number 5364SOTE6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) prof. dr. D.J.N. van Eijck (co-ordinator) Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   prof. dr. D.J.N. van Eijck (co-ordinator) Master's Software Engineering Literature: Kees Doets and Jan van Eijck, 'The Haskell Road to Logic, Maths and Programming'. College Publications, London 2012. This book can be ordered (at a discount) with the lecturer. Literature: Recommended background reading: M. Huth and M. Ryan, 'Logic in Computer Science: Modelling and Reasoning about Systems',Cambridge University Press 2004 (Second Edition). Literature: Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,'Logic in Action', electronically available fromhttp://www.logicinaction.org Syllabus: Reader: Jan van Eijck, 'Purely Functional Algorithm Specification'. Will be made available during the course. Syllabus: Syllabus:"
Software Architecture,"Course catalogue number 5364SOAR6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of After this course, the student is able to: translate stakeholder's requirements into a software architecture, handle trade-offs between conflicting requirements and motivate choices and assess an (other's) architecture document for completeness and value for development. Keywords: architecture design, architecture trade-off analysis, architectural vies, architectural evolution, desig decisions, architecture decisions, software quality and architecture patterns. This course examines fundamental architecture design decisions that should ensure that a software system is able to achieve as much as possible the quality requirements. This concerns the division of a system into components, the relationships between these components, the quality requirements of the individual components and the system as a whole, and decisions that need to be made to balance between conflicting requirements. Information about procedures can be found athttp://www.student.uva.nl/se/az/item/course-registration.html. Lecture, seminars, workshops and practice in computer lab. Written examination (40% of final grade) and laboratory work (60% of final grade). The grade weights are indicative and will be detailed at the start of the course. Recommended prior knowledge:General knowledge of (and experience in) software engineering; construction of programs of considerable size. Preferably experience in developing software in a large organization. Course catalogue number 5364SOAR6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering Literature: L. Bass, P. Clements and R. Kazman. 'Software Architecture in Practice'. Addison-Wesley, 2012. (Third edition.) Other: Various architecture relevant papers which will be provided during the course."
Software Evolution,"Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of Exit qualification: “The graduate masters the methods and techniques needed to analyze an existing software system and to enable it to evolve given changing requirements.” Our objectives are three-fold: The course ties in closely with paper writing sessions where the objectives are to learn from academic literature, to develop curiosity, and to improve argumentation and writing skills. This course is designed around lab sessions in which we study real and large (open-source) software systems, written in languages like C, Java, PHP or Ruby. We use Rascal -a programming language workbench, or meta programming language- to apply and build software metrics, software analyses, software visualisations and (if time permits) software transformations. Seehttp://www.rascal-mpl.org.The student is supported with introductory courses and interactive lab sessions while learning this new language in the beginning. The course is supported by a series of lectures on the theory of software maintenance and evolution, guest lecturers from field experts, and a guided study of a number of research papers about maintenance, reverse engineering, reengineering and renovation. Example topics are clone detection, mining software repositories and refactoring. Information about procedures can be found athttp://www.student.uva.nl/se/az/item/course-registration.html. The format is focused on practical skills via the lab exercises, such as exploring source code and building tools, and academic skills via the paper sessions. Every week we start with a two hour lecture on the theory of software evolution, which is required to understand the material covered in the lab exercises. The rest of the day and the following day are lab hours. You also need two hours time every other week to prepare for the bi-weekly two-hour paper sessions. In this course we use the experimental programming language Rascal, which is (beta) open-source software and new to most students. On top of that we dive into many new topics for the students. Therefore the lab time is designed to be an integral and interactive part of the teaching, where the lecturer and the students are both present. This course typically uses the following assessments, that will be detailed at the start of the course: The grade weights are indicative and will be detailed at the start of the course. Recommended prior knowledge: Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. C.U. Grelck (co-ordinator) Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. C.U. Grelck (co-ordinator) Master's Software Engineering The first objective is to acquire an understanding and appreciation of the challenges posed by software maintenance and software evolution. The second objective is to learn about quality of software and source code and how it affects software maintenance and evolution. The final objective is to be able to select and also construct software analysis and software transformation tools to help obtain insight in software quality and to help improve software quality. Syllabus: Reader consisting of selected papers on software evolution Other: http://www.rascal-mpl.org:<a href=:'>http://www.rascal-mpl.org:http://www.rascal-mpl.org Other: Potentially other (academic) sources online test to assess basic skills practical lab assignments, assessed by demonstration and oral exam (2/3 of final grade) writing exercise(s): essay and/or annotated bilbiography (1/3 final grade) Advanced programming skills in several programming languages. Knowledge of compiler construction (parsing, ASTs, basic code analysis, etc.). Good (academic) English reading and writing skills."
Preparation Masterproject Software Engineering,"Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For part-time (2 year students): all other courses in the program have been passed. For full-time (1 year students): To continue with the Master’s project preparation in the second semester (January), all courses of the first semester have to be passed. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of The objective of the course is teaching the skills needed to successfully complete the Master’s (graduation) project. In summary these skills are: During paper sessions you learn skills to find, read and assess relevant scientific publications. You will also learn to build argumentation structures you need for your theory and analysis. For your graduation you can choose from a number of defined themes. In exceptional cases it is possible to define a project yourself. A tutor will help you during the preparation. You will also discuss your ideas with other students. Information about procedures can be found athttp://www.student.uva.nl/se/az/item/course-registration.html. This is a mixed theoretical and practical course. The format is aimed at exercising skills needed to complete the Master’s project. There are interactive sessions where scientific reading, writing, research design, and presentation skills are covered. The student can pass the course by getting approval by a lecturer (tutor) for two deliverables: Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For part-time (2 year students): all other courses in the program have been passed. For full-time (1 year students): To continue with the Master’s project preparation in the second semester (January), all courses of the first semester have to be passed. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator)prof. dr. D.J.N. van Eijckdr. T. van der Storm Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) prof. dr. D.J.N. van Eijck dr. T. van der Storm Master's Software Engineering Problem analysis, Scientific literature survey, Theory building, Hypothesizing, Structuring research and validation, Project planning, Scientific reporting. Other: Study materials are made available through the course’s BlackBoard page. An interest in reading and writing scientific literature. Affinity with reading and writing English text. Knowledge of current challenges and results in software engineering. Plan for the Masters project, Survey of related literature."
Software Process,"Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of During this course you will come to understand why big software engineering projects are prone to failure. You will come to understand how performance is influenced at different levels: that of the individual software engineer, the team and the whole organization. You will learn about motivation, competences, and the crucial role of culture. Also you will learn about organizational paradigms and control mechanisms, quality paradigms, and the role of planning and design in a world that is volatile and of which a lot is unknown. As software engineering is a special kind of organization, you will also learn how effective our best practices are. With this knowledge you will be able to understand why a method like RUP or Scrum is sometimes successful and sometimes not. You will also come to assess such a method and better be able to use it in such a way to improve overall project performance. Developing large scale software systems is challenging for many reasons. We work from a set of requirements that are ambiguous and incomplete, may be invalid and are subject to change. It’s hard to determine the quality and doneness of (intermediate) deliverables like designs, plans and code. We have to coordinate up to 1.000 software engineers with imperfect mechanisms for separation of concerns. To be able to understand reasons for software project failure we study failed projects. We learn about organizational control mechanisms and look at theory from social sciences notably motivation, empowerment, effective teams and coordination strategies. Last but not least we look at what we can learn from the quality community: Lean, CMMi, TQM, Kaizen. We will also examine evidence about the practices we apply in software engineering, like test first, pair programming, software architecture. Information about procedures can be found athttp://www.student.uva.nl/se/az/item/course-registration.html. Lecture, work groups, seminar. Reading tests, essay and lab work. Recommended prior knowledge:Knowledge of software methods like Rup, Scrum, Xp and software practices like pair programming, test first. Experience with working in big projects. Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering Literature: Andy Oram, Greg Wilson'Making Software: What Really Works, and Why We Believe It'."
Software Construction,"Course catalogue number 5364SOCO6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of The course focuses on methods and techniques of software construction. This primarily covers the programming and implementation activities of a software engineering project. Examples of such activities are coding and debugging, detailed design, unit testing, code reviews, optimization, component integration and code generation. The course has two main objectivea: In the practical course students will implement a Domain-Specific Language (DSL). This involves both language engineering aspects (parsing, type checking, interpretation etc.) as well as a substantial amount of programming and discussion. The code will be reviewed based on aspects of code quality, simplicity, readability, modularity, separation of concerns and consistency of style. Lectures will provide the required background on DSLs, model-driven engineering (MDE), compiler theory, generative programming, code quality, ""Don't-Repeat-Yourself"" (DRY), code smells and design patterns. Additional academic literature covers subjects such as design-by-contract, SOLID principles, data abstraction, modularity, hierarchy, programming style, code smells, and object-oriented frameworks. Students are required to complete an exam based on the academic literature, to show they master concepts and practices relevant for high quality software construction. Information about procedures can be found athttp://www.student.uva.nl/se/az/item/course-registration.html. Assessment is based on the code produced during the lab and a final exam. Both need to be completed successfully. Final grade is the average of both lab and exam grades. This is a Bring-Your-Own-Device (BYOD) course, so a laptop is required. See here more info:http://student.uva.nl/se/az/item/bring-your-own-device.html Technical mastery of one or more programming languages (e.g., Java, C#, etc.). Maximum number of students: 60 Course catalogue number 5364SOCO6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. T. van der Storm (co-ordinator)dr. J.J. Vinju Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. T. van der Storm (co-ordinator) dr. J.J. Vinju Master's Software Engineering Inform students about the area of software language engineering: how to employ model-driven and language-driven approaches in software construction. This is includes basic theory of compiler construction. Actively engage students to reason about and reflect upon aspect of design, code quality, and software construction methods. Lecture Seminar Computer lab session/practical training Supervision/feedback meeting Literature: Required reading: Crista Lopes', 'Exercises in Programming Styles'. Syllabus: Syllabus of landmark papers on topics in software construction."
Software Engineering,
Masterproject Software Engineering,"Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of Carry out the research as proposed by the plan you made in the preparation phase. A lecturer (tutor) will be available for weekly feedback and discussion. Part time students will need to free time to work at least two month full time on their research. Information about procedures can be found athttp://www.student.uva.nl/se/az/item/course-registration.html. The Master’s project consists of a software engineering-themed research assignment (an internship) at either a company or a research institution. Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkersprof. dr. D.J.N. van Eijckdr. C.U. Grelck (co-ordinator)dr. T. van der Storm Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers prof. dr. D.J.N. van Eijck dr. C.U. Grelck (co-ordinator) dr. T. van der Storm Master's Software Engineering Acquiring the ability to do research by designing, executing and reporting on a project in the area of software engineering research, Adding knowledge or gathering new evidence in the field of software engineering. Literature: Scientific literature Quality of the work as reported on in the thesis, Quality of the presentation given during the defense session. In order to start the Master’s project you need to have approval from a lecturer (tutor) on your project plan and related literature survey."
