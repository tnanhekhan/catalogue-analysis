Year,Software Architecture,Software Testing,Requirements Engineering,Preparation Masterproject Software Engineering,Software Process,Software Construction,Masterproject Software Engineering,Software Evolution,Software Architecture (VU),"Software Specification, Verification and Testing",Embedded Software and Systems,DevOps and Cloud-based Software,Model-based Design of Cyber-physical Systems,Software Architecture_keywords,Software Architecture_2word_phrases,Software Architecture_3word_phrases,Software Testing_keywords,Software Testing_2word_phrases,Software Testing_3word_phrases,Requirements Engineering_keywords,Requirements Engineering_2word_phrases,Requirements Engineering_3word_phrases,Preparation Masterproject Software Engineering_keywords,Preparation Masterproject Software Engineering_2word_phrases,Preparation Masterproject Software Engineering_3word_phrases,Software Process_keywords,Software Process_2word_phrases,Software Process_3word_phrases,Software Construction_keywords,Software Construction_2word_phrases,Software Construction_3word_phrases,Masterproject Software Engineering_keywords,Masterproject Software Engineering_2word_phrases,Masterproject Software Engineering_3word_phrases,Software Evolution_keywords,Software Evolution_2word_phrases,Software Evolution_3word_phrases,Software Architecture (VU)_keywords,Software Architecture (VU)_2word_phrases,Software Architecture (VU)_3word_phrases,"Software Specification, Verification and Testing_keywords","Software Specification, Verification and Testing_2word_phrases","Software Specification, Verification and Testing_3word_phrases",Embedded Software and Systems_keywords,Embedded Software and Systems_2word_phrases,Embedded Software and Systems_3word_phrases,DevOps and Cloud-based Software_keywords,DevOps and Cloud-based Software_2word_phrases,DevOps and Cloud-based Software_3word_phrases,Model-based Design of Cyber-physical Systems_keywords,Model-based Design of Cyber-physical Systems_2word_phrases,Model-based Design of Cyber-physical Systems_3word_phrases
2014-2015,"Course catalogue number 5364SOAR6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of  After this course, the student is able to: translate requirements into a system architecture, handle trade-offs between conflicting requirements and motivate choices made, assess an architecture document for different stakeholders having different priorities.   Keywords: Design decisions, architecture documentation, software quality, architectural patterns, design patterns, architecture trade-off analysis, views, viewpoints, architectural evolution. This course examines fundamental design decisions that should ensure that a software system is able to meet the quality requirements. This concerns the division of a system into components, the relationships between these components, the quality requirements of the individual components and the system as a whole, and decisions that need to be made to choose between conflicting requirements.   General knowledge of software engineering; construction of programs of considerable size.  Registration is required via https://www.sis.uva.nl→ URLuntil four weeks before the start of the semester.  Lecture, seminar and computer lab   L. Bass, P. Clements and R. Kazman. 'Software Architecture in Practice'. Addison-Wesley, 2012. (Third edition.)   Examination and laboratory work  Course catalogue number 5364SOAR6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator)prof.dr. J.C. van Vliet Is part of Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) prof.dr. J.C. van Vliet Software Engineering","Course catalogue number 5364SOTE6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of After the course, the student is able to understand and produce formal specifications of modest-sized samples of software, and is able to use formal specifications to generate relevant tests for the software. Software testing is checking whether a given software system satisfies given requirements or specifications. Without a specification, it is impossible to state what a piece of software should do, and there is no reasonable way to set up the test process. An informal specification is not enough, for if we want to automate the test process we need pre-given information about (i) which tests are relevant, and about (ii) what the outcomes of the relevant tests should be. The information about (i) states the preconditions of the code, and the information about (ii) states the postconditions. Programs written in functional or imperative languages can be tested, given a formal specification, by means of a random test generator. This test method will be illustrated for a number of example programs written in Haskell. The course includes a lightning introduction to this languages, and then focusses on how to test programs written in either functional or imperative style, and how to use tools for automated test generation. Registration is required via https://www.sis.uva.nl→ URLuntil four weeks before the start of the semester. To be announced Lectures, seminars and computer lab sessions. Course Book: Kees Doets and Jan van Eijck, 'The Haskell Road to Logic, Maths and Programming'. College Publications, London 2012. This book can be ordered (at a discount) with the lecturer. Course reader: Jan van Eijck, 'Purely Functional Algorithm Specification'. Will be made available during the course. Recommended background reading: M. Huth and M. Ryan, 'Logic in Computer Science: Modelling and Reasoning about Systems',Cambridge University Press 2004 (Second Edition). Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,'Logic in Action', electronically available fromhttp://www.logicinaction.org Course examination will consist of assignments during the course plus a final exam consisting of a theory part and a computer lab part. Final grade determined for 40 % by the course assignment results and for 60 % by the result on the final exam. Course catalogue number 5364SOTE6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) prof. dr. D.J.N. van Eijck (co-ordinator) Is part of Software Engineering Add course to planner Sem. 1 Sem. 2   prof. dr. D.J.N. van Eijck (co-ordinator) Software Engineering","Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s)  College/graduate Graduate School of Informatics Lecturer(s) Is part of The success of a software system depends on the proper interpretation and analysis of user needs. Experience shows that it is extremely difficult to adequately define and specify a system. The perception of customers and users on the problem is often incomplete, inaccurate and changes over time. Knowledge is hard to express and to transfer. During this course you will understand why user needs are so hard to express, capture and understand. You will also learn the shortcomings of best practices like scrum, prototyping, interviewing and use cases. Furthermore you will learn about data-driven methods for requirements engineering like Contextual Design. Requirements methods and techniques will be discussed during the lectures. If feasible the whole student group will collaborate in one real life requirements project based on the method of contextual design. Next to specific RE literature we will also study literature from psychology, law, philosophy and cognitive science to get a better understanding of the subject. Finally students will design and do an experiment to show the inherent weakness of requirements best practices, like the use of prototyping for requirement validation. This will be done from the perspective of human factors. Knowledge of requirement engineering, for example books of Sommerville, Robertson, van Lamsweerde, Wiegers or Pohl. 'Modeling techniques', e.g. UML diagrams to describe software behoviour. Registration is required viahttps://www.sis.uva.nluntil four weeks before the start of the semester. Lecture, seminar and computer lab. Thinking, fast and slow, Kahneman Reading tests, paper and lab work. Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2 Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Is part of Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Software Engineering","Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For part-time (2 year students): all other courses in the program have been passed. For full-time (1 year students): To continue with the Master’s project preparation in the second semester (January), all courses of the first semester have to be passed. Time period(s)   College/graduate Graduate School of Informatics Lecturer(s) Is part of The objective of the course is teaching the skills needed to successfully complete the Master’s (graduation) project. In summary these skills are: During paper sessions you learn skills to find, read and assess relevant scientific publications. You will also learn to build argumentation structures you need for your theory and analysis. For your graduation you can choose from a number of defined themes. In exceptional cases it is possible to define a project yourself. A tutor will help you during the preparation. You will also discuss your ideas with other students. Registration is required viahttps://www.sis.uva.nluntil four weeks before the start of the semester. This is a mixed theoretical and practical course. The format is aimed at exercising skills needed to complete the Master’s project. There are interactive sessions where scientific reading, writing, research design, and presentation skills are covered. Study materials are made available through the course’s BlackBoard page. The student can pass the course by getting approval by a lecturer (tutor) for two deliverables: Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For part-time (2 year students): all other courses in the program have been passed. For full-time (1 year students): To continue with the Master’s project preparation in the second semester (January), all courses of the first semester have to be passed. Time period(s) Sem. 1Sem. 2 Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. M. Bruntinkdrs. H.L. Dekkersprof. dr. D.J.N. van Eijckdr. T. van der Stormdr. S.F.M van Vlijmendr. V.V. Zaytsev (co-ordinator) Is part of Software Engineering Add course to planner Sem. 1 Sem. 2   dr. M. Bruntink drs. H.L. Dekkers prof. dr. D.J.N. van Eijck dr. T. van der Storm dr. S.F.M van Vlijmen dr. V.V. Zaytsev (co-ordinator) Software Engineering Problem analysis, Scientific literature survey, Theory building, Hypothesizing, Structuring research and validation, Project planning, Scientific reporting. An interest in reading and writing scientific literature. Affinity with reading and writing English text. Knowledge of current challenges and results in software engineering. Plan for the Masters project, Survey of related literature.","Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s)  College/graduate Graduate School of Informatics Lecturer(s) Is part of During this course you will come to understand why big software engineering projects are prone to failure. You will come to understand how performance is influenced at different levels: that of the individual software engineer, the team and the whole organization. You will learn about motivation, competences, and the crucial role of culture. Also you will learn about organizational paradigms and control mechanisms, quality paradigms, and the role of planning and design in a world that is volatile and of which a lot is unknown. As software engineering is a special kind of organization, you will also learn how effective our best practices are. With this knowledge you will be able to understand why a method like RUP or Scrum is sometimes successful and sometimes not. You will also come to assess such a method and better be able to use it in such a way to improve overall project performance. Developing large scale software systems is challenging for many reasons. We work from a set of requirements that are ambiguous and incomplete, may be invalid and are subject to change. It’s hard to determine the quality and doneness of (intermediate) deliverables like designs, plans and code. We have to coordinate up to 1.000 software engineers with imperfect mechanisms for separation of concerns. To be able to understand reasons for software project failure we study failed projects. We learn about organizational control mechanisms and look at theory from social sciences notably motivation, empowerment, effective teams and coordination strategies. Last but not least we look at what we can learn from the quality community: Lean, CMMi, TQM, Kaizen. We will also examine evidence about the practices we apply in software engineering, like test first, pair programming, software architecture. Knowledge of software methods like Rup, Scrum, Xp and software practices like pair programming, test first. Experience with working in big projects. Lecture, work groups, seminar. Andy Oram, Greg Wilson'Making Software:What Really Works, and Why We Believe It'. Reading tests, essay and lab work. Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2 Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Is part of Software Engineering Add course to planner Sem. 1 Sem. 2   Registration is   required viahttps://www.sis.uva.nlbefore the start of the semester. Please   visit the website of your programme throughhttp://student.uva.nland check   the A-Z list ’Course and Exam Registration’ for more information. drs. H.L. Dekkers (co-ordinator) Software Engineering","Course catalogue number 5364SOCO6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of The course focuses on methods and techniques of software construction. This primarily covers the programming and implementation activities of a software engineering project. Examples of such activities are coding and debugging, detailed design, unit testing, code reviews, optimization, component integration and code generation. The course has two main objectivea: In the practical course students will implement a Domain-Specific Language (DSL). This involves both language engineering aspects (parsing, type checking, interpretation etc.) as well as a substantial amount of programming and discussion. The code will be reviewed based on aspects of code quality, simplicity, readability, modularity, separation of concerns and consistency of style. Lectures will provide the required background on DSLs, model-driven engineering (MDE), compiler theory, generative programming, code quality, ""Don't-Repeat-Yourself"" (DRY), code smells and design patterns. Additional academic literature covers subjects such as design-by-contract, SOLID principles, data abstraction, modularity, hierarchy and object-oriented frameworks. Students are required to complete a take home exam based on the academic literature, so as to show they master concepts and practices relevant for high quality software construction. Technical mastery of one or more object-oriented programming languages (e.g., Java, C#, etc.). Lectures, workshops and computer lab. Required reading (tentative): Crista Lopes, 'Exercises in Programming Styles'. Syllabus of landmark papers on topics in software construction. 60 Successful completion of the take home exam, final grade based on submitted code. Course catalogue number 5364SOCO6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. T. van der Storm (co-ordinator)dr. J.J. Vinju Is part of Software Engineering Add course to planner Sem. 1 Sem. 2   Registration is   required viahttps://www.sis.uva.nlbefore the start of the semester. Please   visit the website of your programme throughhttp://student.uva.nland check   the A-Z list ’Course and Exam Registration’ for more information. dr. T. van der Storm (co-ordinator) dr. J.J. Vinju Software Engineering Inform students about the area of software language engineering: how to employ model-driven and language-driven approaches in software construction. This is includes basic theory of compiler construction. Actively engage students to reason about and reflect upon aspect of design, code quality, and software construction methods.","Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s)  College/graduate Graduate School of Informatics Lecturer(s) Is part of Carry out the research as proposed by the plan you made in the preparation phase. A lecturer (tutor) will be available for weekly feedback and discussion. Part time students will need to free time to work at least two month full time on their research. In order to start the Master’s project you need to have approval from a lecturer (tutor) on your project plan and related literature survey. Registration is NOT required but will be done by the Servicedesk of the ESC after the completion of the Master Project. The Master’s project consists of a software engineering-themed research assignment (an internship) at either a company or a research institution. Blackboard Scientific literature Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s) Sem. 1Sem. 2 Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. M. Bruntinkdrs. H.L. Dekkersprof. dr. D.J.N. van Eijckprof.dr. P. Klintdr. T. van der Stormdr. V.V. Zaytsev (co-ordinator) Is part of Software Engineering Add course to planner Sem. 1 Sem. 2   dr. M. Bruntink drs. H.L. Dekkers prof. dr. D.J.N. van Eijck prof.dr. P. Klint dr. T. van der Storm dr. V.V. Zaytsev (co-ordinator) Software Engineering Acquiring the ability to do research by designing, executing and reporting on a project in the area of software engineering research, Adding knowledge or gathering new evidence in the field of software engineering. Quality of the work as reported on in the thesis, Quality of the presentation given during the defense session.","Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of Our objectives are three-fold. The first objective is to acquire an understanding and appreciation of the challenges posed by software maintenance and software evolution. The second objective is to learn about quality of architecture and source code and how it affects software maintenance and evolution. The final objective is to be able to select and also construct software analysis and software transformation tools to help obtain insight in software quality and to help improve software quality. The course ties in closely with paper writing sessions where the objectives are to learn from academic literature, to develop curiosity, and to improve argumentation and writing skills. This course is designed around lab sessions in which we study real and large (open-source) software systems, written in languages like C, Java, PHP or Ruby. We use Rascal -a programming language workbench, or meta programming language- to apply and build software metrics, software analyses, software visualisations and (if time permits) software transformations. See http://www.rascal-mpl.org. The student is supported with introductory courses and interactive lab sessions while learning this new language in the beginning. The course is supported by a series of lectures on the theory of software maintenance and evolution, and a guided study of a number of research papers about maintenance, reverse engineering, reengineering and renovation. Example topics are clone detection, mining software repositories and refactoring. During the course students all write a short, but in-depth, paper about one of these subjects (possibly supported by facts generated by the lab exercises). Advanced programming skills in several programming languages.Basic knowledge of compiler construction (parsing, ASTs, basic code analysis, etc.)Good (academic) English reading and writing skills Registration is required viahttps://www.sis.uva.nluntil four weeks before the start of the semester. The format is focused on practical skills via the lab exercises, such as exploring source code and building tools, and academic skills via the paper writing component. Every week we start with two hour lecture on the theory of software evolution, which is required to understand the material covered in the lab exercises. The rest of the day and the following day are lab hours. You also need two hours time every other week to prepare for the bi-weekly two-hour paper sessions. - http://www.rascal-mpl.org- reader consisting of material on software evolution- potentially other (academic) sources This course typically uses various types of assessment, that will be detailed at the start of the course:- lab assignments, assessed by demonstration and oral exam- online test to assess basic skills- paper/essay- exam In this course we use the experimental programming language Rascal, which is (beta) open-source software and new to most students. On top of that we dive into many new topics for the students. Therefore the lab time is designed to be an integral and interactive part of the teaching, where the lecturer and the students are both present. Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. M. Bruntink (co-ordinator)dr. T. van der Storm Is part of Software Engineering Add course to planner Sem. 1 Sem. 2   dr. M. Bruntink (co-ordinator) dr. T. van der Storm Software Engineering",-,-,-,-,-,"['architectural', 'requirements', 'documentation', 'software', 'engineering', 'semester', 'informatics', 'instruction', 'seminar', 'components', 'edition', 'catalogue', 'language', 'planner', 'assess', 'sem', 'uva', 'quality', '5364soar6y', 'patterns', 'stakeholders', 'urluntil', 'sis', 'priorities', 'ordinator', 'practice', 'clements', 'conflicting', 'considerable', 'motivate']","['requirements architecture', 'software architecture', 'architecture documentation', 'software engineering', 'assess architecture', 'software quality', 'documentation software', 'informatics lecturer', 'edition examination', 'translate requirements', 'course catalogue', 'design patterns', 'instruction english', 'components quality', 'construction programs', 'start semester', 'keywords design', '2012 edition', 'document different', 'computer lab', 'sis uva', 'choices assess', 'kazman software', 'sem 1sem', 'number 5364soar6y', 'nl urluntil', 'credits ec', 'practice addison', 'size registration', 'required https']","['software architecture practice', 'translate requirements architecture', 'assess architecture document', 'architectural evolution course', 'decisions architecture documentation', 'requirements general knowledge', 'design patterns architecture', 'knowledge software engineering', 'software engineering add', 'decisions ensure software', 'documentation software quality', 'components quality requirements', 'graduate school informatics', 'lecture seminar computer', 'requirements concerns division', 'requirements motivate choices', '2012 edition examination', 'ec language instruction', 'engineering construction programs', 'course catalogue number', 'vliet software engineering', 'keywords design decisions', 'programs considerable size', 'clements kazman software', 'laboratory work course', 'weeks start semester', 'uva nl urluntil', 'analysis views viewpoints', '2see sem sem', 'registration required https']","['specification', 'tests', 'requirements', 'instruction', 'programming', 'automate', 'languages', 'haskell', 'semester', 'assignments', 'informatics', 'imperative', 'postconditions', 'modelling', 'final', 'logicinaction', 'sem', 'registration', 'generate', 'electronically', 'informal', 'pre', 'understand', 'seminars', 'www', '5364sote6y', 'sis', 'modest', 'focusses', 'huth']","['software testing', 'languages tested', 'formal specification', 'information tests', 'language instruction', 'haskell course', 'postconditions programs', 'examination consist', 'programming college', 'code information', 'example programs', 'given requirements', 'set test', 'course assignment', 'want automate', 'modelling reasoning', 'semester announced', 'lab final', 'informatics lecturer', 'functional imperative', 'planner sem', 'process informal', 'checking given', 'generation registration', 'understand produce', 'lightning introduction', 'sis uva', 'credits ec', 'required https', 'impossible state']","['test programs written', 'imperative languages tested', 'specification available course', 'software testing checking', 'languages tested given', 'test process informal', 'tested given formal', 'automate test process', 'information tests relevant', 'haskell course includes', 'given formal specification', 'preconditions code information', 'exam consisting theory', 'programs written functional', 'introduction languages focusses', 'instruction english time', 'ordinator software engineering', 'given software satisfies', 'computer science modelling', 'states postconditions programs', 'reasoning systems cambridge', 'process need pre', 'weeks start semester', 'final grade determined', 'able understand produce', 'generation registration required', 'number 5364sote6y credits', 'sem 1sem 2see', 'style use tools', 'electronically available fromhttp']","['requirements', 'semester', 'lectures', 'instruction', 'study', 'contextual', 'software', 'informatics', 'scrum', 'modeling', 'catalogue', 'prototyping', 'engineering', 'planner', 'interviewing', 'discussed', 'sem', 'factors', 'customers', 'validation', 'cases', 'nluntil', 'period', 'uml', 'define', 'ordinator', 'weakness', '5364reen6y', 'transfer', 'viahttps']","['requirements engineering', 'methods requirements', 'knowledge requirement', 'course planner', 'contextual design', 'students design', 'informatics lecturer', 'language instruction', 'start semester', 'techniques uml', 'scrum prototyping', 'discussed lectures', 'project based', 'needs experience', 'understanding subject', 'literature study', 'diagrams software', 'software behoviour', 'learn data', 'catalogue number', 'reading tests', 'interviewing use', 'define specify', 'period sem', 'adequately define', 'cases furthermore', 'users problem', 'sis uva', 'nluntil weeks', 'express transfer']","['requirements engineering like', 'requirements best practices', 'course planner sem', 'method contextual design', 'driven methods requirements', 'modeling techniques uml', 'start semester lecture', 'seminar computer lab', 'factors knowledge requirement', 'transfer course understand', 'informatics lecturer success', 'ordinator software engineering', 'language instruction english', 'study literature psychology', 'analysis user needs', 'engineering example books', 'project based method', 'students design experiment', 'prototyping interviewing use', 'practices like scrum', 'needs experience shows', 'software behoviour registration', 'learn data driven', 'extremely difficult adequately', 'catalogue number 5364reen6y', 'law philosophy cognitive', 'customers users problem', 'define specify perception', 'viahttps www sis', 'inaccurate changes time']","['courses', 'semester', 'requirements', 'study', 'lecturer', 'instruction', 'informatics', 'graduation', 'masters', 'planner', 'preparation', 'project', 'language', 'registration', 'catalogue', 'presentation', 'credits', 'pass', 'sem', 'assess', 'nluntil', 'sessions', 'ordinator', 'start', '5364prms6y', 'define', 'viahttps', 'january', 'eijckdr', 'exercising']","['courses semester', 'practical course', 'course planner', 'language instruction', 'study materials', 'informatics lecturer', 'project preparation', 'add course', 'students registration', 'analysis graduation', 'entry requirements', 'presentation skills', 'software engineering', 'tutor deliverables', 'page student', 'text knowledge', 'complete master', 'writing scientific', '5364prms6y credits', 'exercising skills', 'format aimed', 'ordinator software', '1sem sem', 'interactive sessions', 'defined themes', 'sis uva', 'nluntil weeks', 'current challenges', 'number defined', 'viahttps www']","['practical course format', 'january courses semester', 'materials available course', 'course teaching skills', 'course planner sem', 'preparation second semester', 'skills covered study', 'ec language instruction', 'lecturer objective course', 'graduate school informatics', 'engineering add course', 'project tutor help', 'help preparation discuss', 'graduation project summary', 'english entry requirements', 'students registration required', 'pass course getting', 'start semester mixed', 'time year students', 'need theory analysis', 'getting approval lecturer', 'software engineering plan', 'continue master project', 'sessions scientific reading', 'text knowledge current', 'uva nluntil weeks', 'exercising skills needed', 'period sem 1sem', 'number 5364prms6y credits', 'viahttps www sis']","['scrum', 'programming', 'study', 'requirements', 'engineering', 'developing', 'instruction', 'informatics', 'strategies', 'performance', 'seminar', 'planner', 'english', 'crucial', 'levels', 'determine', 'rup', 'motivation', 'come', 'role', 'xp', 'nland', 'kaizen', 'tqm', 'ordinator', 'cmmi', '5364sopr6y', 'uva', 'deliverables', 'viahttps']","['software engineering', 'performance developing', 'projects lecture', 'rup scrum', 'course exam', 'language instruction', 'informatics lecturer', 'learn effective', 'engineer team', 'competences crucial', 'planner sem', 'project failure', 'set requirements', 'come understand', 'systems challenging', 'architecture knowledge', 'assess method', 'quality paradigms', 'doneness intermediate', 'teams coordination', 'understand reasons', 'tqm kaizen', 'large scale', 'graduate graduate', 'ordinator software', 'uva nland', 'role culture', 'programme throughhttp', 'credits ec', 'number 5364sopr6y']","['software engineering projects', 'understand big software', 'informatics lecturer course', 'rup scrum successful', 'big projects lecture', 'project failure study', 'performance developing large', 'scrum xp software', 'knowledge software methods', 'engineering add course', 'ordinator software engineering', 'learn effective best', 'list course exam', 'instruction english time', 'planner sem sem', 'role planning design', 'course come understand', 'team organization learn', 'determine quality doneness', 'requirements ambiguous incomplete', 'concerns able understand', 'test experience working', 'reasons work set', 'graduate graduate school', 'start semester visit', 'intermediate deliverables like', 'nland check list', 'website programme throughhttp', 'change hard determine', 'kaizen examine evidence']","['programming', 'compiler', 'semester', 'lectures', 'syllabus', 'instruction', 'engineering', 'informatics', 'languages', 'dsls', 'frameworks', 'subjects', 'debugging', 'parsing', 'implementation', 'workshops', 'catalogue', 'sem', '5364soco6y', 'grade', 'domain', 'hierarchy', 'aspects', 'nland', 'uva', 'dry', 'tentative', 'provide', 'integration', 'viahttps']","['software engineering', 'code course', 'java lectures', 'programming discussion', 'language instruction', 'informatics lecturer', 'course catalogue', 'theory compiler', 'frameworks students', 'object oriented', 'aspects code', 'inform students', 'dsls model', 'project examples', 'includes basic', 'exam based', 'design patterns', 'debugging detailed', 'dry code', 'integration code', 'implement domain', 'solid principles', '5364soco6y credits', 'sem 1sem', 'uva nland', 'vinju software', 'readability modularity', 'check list', 'programme throughhttp', 'www sis']","['code generation course', 'software language engineering', 'software engineering inform', 'languages java lectures', 'course students implement', 'ec language instruction', 'engineering add course', 'programming styles syllabus', 'course planner sem', 'topics software construction', 'covers programming implementation', 'course exam registration', 'domain specific language', 'engineering aspects parsing', 'informatics lecturer dr', 'object oriented frameworks', 'engineering mde compiler', 'workshops computer lab', 'student uva nland', 'subjects design contract', 'dsls model driven', 'discussion code reviewed', 'debugging detailed design', 'visit website programme', 'solid principles data', 'dr vinju software', 'type checking interpretation', 'catalogue number 5364soco6y', 'time period sem', 'component integration code']","['semester', 'courses', 'requirements', 'tutor', 'prof', 'internship', 'instruction', 'catalogue', 'masterproject', 'assignment', 'registration', 'thesis', 'credits', 'engineering', 'informatics', 'planner', 'preparation', 'entry', '1sem', 'esc', 'blackboard', 'proposed', 'phase', 'consists', 'available', 'presentation', 'ordinator', '18', 'start', 'dekkersprof']","['courses semester', 'course planner', 'requirements time', 'add course', 'phase lecturer', 'assignment internship', 'preparation masterproject', 'informatics lecturer', 'time students', 'tutor available', 'instruction english', 'consists software', 'project plan', 'catalogue number', 'planner sem', 'research institution', 'ec language', 'engineering acquiring', 'credits 18', 'esc completion', 'blackboard scientific', 'work month', 'eijck prof', 'graduate graduate', 'ordinator software', 'reported thesis', 'program passed', 'survey registration', 'literature survey', 'der stormdr']","['course preparation masterproject', 'students courses semester', 'course catalogue number', 'preparation phase lecturer', 'add course planner', 'tutor project plan', 'literature course catalogue', 'engineering add course', 'ec language instruction', 'entry requirements time', 'research assignment internship', 'project consists software', 'program passed course', 'need approval lecturer', 'graduate school informatics', 'discussion time students', 'sem college graduate', 'institution blackboard scientific', 'plan preparation phase', 'credits 18 ec', 'ordinator software engineering', 'period sem 1sem', 'work month time', 'acquiring ability research', 'work reported thesis', 'survey registration required', 'catalogue number 5364mas18y', 'servicedesk esc completion', 'carry research proposed', 'given defense session']","['programming', 'software', 'compiler', 'assignments', 'lectures', 'study', 'tools', 'informatics', 'instruction', 'rascal', 'refactoring', 'ruby', 'architecture', 'parsing', 'repositories', 'visualisations', 'maintenance', 'php', 'nluntil', 'sem', 'catalogue', 'metrics', 'mpl', 'construct', 'english', 'beta', 'understand', 'uva', 'assessed', 'graduate']","['software engineering', 'analyses software', 'programming language', 'construct software', 'software visualisations', 'code analysis', 'insight software', 'refactoring course', 'maintenance software', 'metrics software', 'language instruction', 'tools academic', 'meta programming', 'course catalogue', 'lecturer objectives', 'architecture source', 'use rascal', 'supported introductory', 'assess basic', 'php ruby', 'study number', 'asts basic', 'mpl org', 'understand material', 'generated lab', 'writing sessions', 'sem 1sem', 'sis uva', 'nluntil weeks', 'appreciation challenges']","['software analyses software', 'software quality course', 'software new students', 'programming language workbench', 'lecture theory software', 'meta programming language', 'storm software engineering', 'exercises advanced programming', 'basic knowledge compiler', 'language beginning course', 'refactoring course students', 'architecture source code', 'semester format focused', 'building tools academic', 'consisting material software', 'informatics lecturer objectives', 'ruby use rascal', 'objective acquire understanding', 'time permits software', 'test assess basic', 'planner sem sem', 'maintenance evolution final', 'mpl org reader', 'sis uva nluntil', 'parsing asts basic', 'day lab hours', 'transformations http www', 'write short depth', 'topics clone detection', 'catalogue number 5364soev6y']",[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]
2015-2016,"Course catalogue number 5364SOAR6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of After this course, the student is able to: translate stakeholder's requirements into a software architecture, handle trade-offs between conflicting requirements and motivate choices and assess an (other's) architecture document for completeness and value for development. Keywords: architecture design, architecture trade-off analysis, architectural vies, architectural evolution, desig decisions, architecture decisions, software quality and architecture patterns. This course examines fundamental architecture design decisions that should ensure that a software system is able to achieve as much as possible the quality requirements. This concerns the division of a system into components, the relationships between these components, the quality requirements of the individual components and the system as a whole, and decisions that need to be made to balance between conflicting requirements. General knowledge of (and experience in) software engineering; construction of programs of considerable size. Preferably experience in developing software in a large organization. Registration is required via https://www.sis.uva.nl→ URLuntil four weeks before the start of the semester. Lecture, seminars, workshops and practice in computer lab. L. Bass, P. Clements and R. Kazman. 'Software Architecture in Practice'. Addison-Wesley, 2012. (Third edition.)Various architecture relevant papers which will be provided during the course. Written examination (40% of final grade) and laboratory work (60% of final grade). The grade weights are indicative and will be detailed at the start of the course. Course catalogue number 5364SOAR6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. M. Bruntink (co-ordinator)prof.dr. J.C. van Vliet Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. M. Bruntink (co-ordinator) prof.dr. J.C. van Vliet Master's Software Engineering","Course catalogue number 5364SOTE6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of After the course, the student is able to understand and produce formal specifications of modest-sized samples of software, and is able to use formal specifications to generate relevant tests for the software. Software testing is checking whether a given software system satisfies given requirements or specifications. Without a specification, it is impossible to state what a piece of software should do, and there is no reasonable way to set up the test process. An informal specification is not enough, for if we want to automate the test process we need pre-given information about (i) which tests are relevant, and about (ii) what the outcomes of the relevant tests should be. The information about (i) states the preconditions of the code, and the information about (ii) states the postconditions. Programs written in functional or imperative languages can be tested, given a formal specification, by means of a random test generator. This test method will be illustrated for a number of example programs written in Haskell. The course includes a lightning introduction to this languages, and then focusses on how to test programs written in either functional or imperative style, and how to use tools for automated test generation. Lectures, seminars and computer lab sessions. Course Book: Kees Doets and Jan van Eijck, 'The Haskell Road to Logic, Maths and Programming'. College Publications, London 2012. This book can be ordered (at a discount) with the lecturer. Course reader: Jan van Eijck, 'Purely Functional Algorithm Specification'. Will be made available during the course. Recommended background reading: M. Huth and M. Ryan, 'Logic in Computer Science: Modelling and Reasoning about Systems',Cambridge University Press 2004 (Second Edition). Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,'Logic in Action', electronically available fromhttp://www.logicinaction.org Course examination will consist of assignments during the course plus a final exam consisting of a theory part and a computer lab part. Final grade determined for 40 % by the course assignment results and for 60 % by the result on the final exam. Course catalogue number 5364SOTE6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) prof. dr. D.J.N. van Eijck (co-ordinator) Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   Registration is required viahttps://www.sis.uva.nlbefore the start of the semester. Please visit the website of your programme throughhttp://student.uva.nland check the A-Z list ’Course and Exam Registration’ for more information. prof. dr. D.J.N. van Eijck (co-ordinator) Master's Software Engineering","Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s)  College/graduate Graduate School of Informatics Lecturer(s) Is part of The success of a software system depends on the proper interpretation and analysis of user needs. Experience shows that it is extremely difficult to adequately define and specify a system. The perception of customers and users of the problem is often incomplete, inaccurate and changes over time. Knowledge is hard to express and to transfer. During this course you will understand why user needs are so hard to express, capture and understand. You will also learn the shortcomings of best practices like scrum, prototyping, interviewing and use cases. Furthermore you will learn about data-driven methods for requirements engineering like Contextual Design. Requirements methods and techniques will be discussed during the lectures. If feasible the whole student group will collaborate in one real life requirements project based on the method of contextual design. Next to specific RE literature we will also study literature from psychology, law, philosophy and cognitive science to get a better understanding of the subject. Finally students will design and do an experiment to show the inherent weakness of requirements best practices, like the use of prototyping for requirement validation. This will be done from the perspective of human factors. Knowledge of requirement engineering, for example books of Sommerville, Robertson, van Lamsweerde, Wiegers or Pohl. 'Modeling techniques', e.g. UML diagrams to describe software behoviour. Lecture, seminar and computer lab. 'Thinking, fast and slow', Kahneman Reading tests, paper and lab work. Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2 Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   Registration   is required viahttps://www.sis.uva.nlbefore the start of the semester.   Please visit the website of your programme throughhttp://student.uva.nland   check the A-Z list ’Course and Exam Registration’ for more information. drs. H.L. Dekkers (co-ordinator) Master's Software Engineering","Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For part-time (2 year students): all other courses in the program have been passed. For full-time (1 year students): To continue with the Master’s project preparation in the second semester (January), all courses of the first semester have to be passed. Time period(s)  College/graduate Graduate School of Informatics Lecturer(s) Is part of The objective of the course is teaching the skills needed to successfully complete the Master’s (graduation) project. In summary these skills are: During paper sessions you learn skills to find, read and assess relevant scientific publications. You will also learn to build argumentation structures you need for your theory and analysis. For your graduation you can choose from a number of defined themes. In exceptional cases it is possible to define a project yourself. A tutor will help you during the preparation. You will also discuss your ideas with other students. This is a mixed theoretical and practical course. The format is aimed at exercising skills needed to complete the Master’s project. There are interactive sessions where scientific reading, writing, research design, and presentation skills are covered. Study materials are made available through the course’s BlackBoard page. The student can pass the course by getting approval by a lecturer (tutor) for two deliverables: Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For part-time (2 year students): all other courses in the program have been passed. For full-time (1 year students): To continue with the Master’s project preparation in the second semester (January), all courses of the first semester have to be passed. Time period(s) Sem. 1Sem. 2 Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. M. Bruntinkdrs. H.L. Dekkersprof. dr. D.J.N. van Eijckdr. T. van der Stormdr. S.F.M van Vlijmendr. V.V. Zaytsev (co-ordinator) Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   Registration   is required viahttps://www.sis.uva.nlbefore the start of the semester.   Please visit the website of your programme throughhttp://student.uva.nland   check the A-Z list ’Course and Exam Registration’ for more information. dr. M. Bruntink drs. H.L. Dekkers prof. dr. D.J.N. van Eijck dr. T. van der Storm dr. S.F.M van Vlijmen dr. V.V. Zaytsev (co-ordinator) Master's Software Engineering Problem analysis, Scientific literature survey, Theory building, Hypothesizing, Structuring research and validation, Project planning, Scientific reporting. An interest in reading and writing scientific literature. Affinity with reading and writing English text. Knowledge of current challenges and results in software engineering. Plan for the Masters project, Survey of related literature.","Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s)  College/graduate Graduate School of Informatics Lecturer(s) Is part of During this course you will come to understand why big software engineering projects are prone to failure. You will come to understand how performance is influenced at different levels: that of the individual software engineer, the team and the whole organization. You will learn about motivation, competences, and the crucial role of culture. Also you will learn about organizational paradigms and control mechanisms, quality paradigms, and the role of planning and design in a world that is volatile and of which a lot is unknown. As software engineering is a special kind of organization, you will also learn how effective our best practices are. With this knowledge you will be able to understand why a method like RUP or Scrum is sometimes successful and sometimes not. You will also come to assess such a method and better be able to use it in such a way to improve overall project performance. Developing large scale software systems is challenging for many reasons. We work from a set of requirements that are ambiguous and incomplete, may be invalid and are subject to change. It’s hard to determine the quality and doneness of (intermediate) deliverables like designs, plans and code. We have to coordinate up to 1.000 software engineers with imperfect mechanisms for separation of concerns. To be able to understand reasons for software project failure we study failed projects. We learn about organizational control mechanisms and look at theory from social sciences notably motivation, empowerment, effective teams and coordination strategies. Last but not least we look at what we can learn from the quality community: Lean, CMMi, TQM, Kaizen. We will also examine evidence about the practices we apply in software engineering, like test first, pair programming, software architecture. Knowledge of software methods like Rup, Scrum, Xp and software practices like pair programming, test first. Experience with working in big projects. Lecture, work groups, seminar. Andy Oram, Greg Wilson'Making Software:What Really Works, and Why We Believe It'. Reading tests, essay and lab work. Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2 Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   Registration is   required viahttps://www.sis.uva.nlbefore the start of the semester. Please   visit the website of your programme throughhttp://student.uva.nland check   the A-Z list ’Course and Exam Registration’ for more information. drs. H.L. Dekkers (co-ordinator) Master's Software Engineering","Course catalogue number 5364SOCO6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of The course focuses on methods and techniques of software construction. This primarily covers the programming and implementation activities of a software engineering project. Examples of such activities are coding and debugging, detailed design, unit testing, code reviews, optimization, component integration and code generation. The course has two main objectivea: In the practical course students will implement a Domain-Specific Language (DSL). This involves both language engineering aspects (parsing, type checking, interpretation etc.) as well as a substantial amount of programming and discussion. The code will be reviewed based on aspects of code quality, simplicity, readability, modularity, separation of concerns and consistency of style. Lectures will provide the required background on DSLs, model-driven engineering (MDE), compiler theory, generative programming, code quality, ""Don't-Repeat-Yourself"" (DRY), code smells and design patterns. Additional academic literature covers subjects such as design-by-contract, SOLID principles, data abstraction, modularity, hierarchy, programming style, code smells, and object-oriented frameworks. Students are required to complete an exam based on the academic literature, to show they master concepts and practices relevant for high quality software construction. Technical mastery of one or more programming languages (e.g., Java, C#, etc.). Lectures, workshops and computer lab. Required reading: Crista Lopes', 'Exercises in Programming Styles'. Syllabus of landmark papers on topics in software construction. 60 Assessment is based on the code produced during the lab and a final exam. Both need to be completed successfully. Final grade is the average of both lab and exam grades. This is a Bring-Your-Own-Device (BYOD) course, so a laptop is required. See here more info: http://student.uva.nl/se/az/item/bring-your-own-device.html Course catalogue number 5364SOCO6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. T. van der Storm (co-ordinator)dr. J.J. Vinju Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   Registration is   required viahttps://www.sis.uva.nlbefore the start of the semester. Please   visit the website of your programme throughhttp://student.uva.nland check   the A-Z list ’Course and Exam Registration’ for more information. dr. T. van der Storm (co-ordinator) dr. J.J. Vinju Master's Software Engineering Inform students about the area of software language engineering: how to employ model-driven and language-driven approaches in software construction. This is includes basic theory of compiler construction. Actively engage students to reason about and reflect upon aspect of design, code quality, and software construction methods.","Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s)  College/graduate Graduate School of Informatics Lecturer(s) Is part of Carry out the research as proposed by the plan you made in the preparation phase. A lecturer (tutor) will be available for weekly feedback and discussion. Part time students will need to free time to work at least two month full time on their research. In order to start the Master’s project you need to have approval from a lecturer (tutor) on your project plan and related literature survey. Registration is NOT required but will be done by the Servicedesk of the ESC after the completion of the Master Project. The Master’s project consists of a software engineering-themed research assignment (an internship) at either a company or a research institution. Blackboard Scientific literature Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s) Sem. 1Sem. 2 Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. M. Bruntinkdrs. H.L. Dekkersprof. dr. D.J.N. van Eijckprof.dr. P. Klintdr. T. van der Stormdr. V.V. Zaytsev (co-ordinator) Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. M. Bruntink drs. H.L. Dekkers prof. dr. D.J.N. van Eijck prof.dr. P. Klint dr. T. van der Storm dr. V.V. Zaytsev (co-ordinator) Master's Software Engineering Acquiring the ability to do research by designing, executing and reporting on a project in the area of software engineering research, Adding knowledge or gathering new evidence in the field of software engineering. Quality of the work as reported on in the thesis, Quality of the presentation given during the defense session.","Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of Exit qualification: “The graduate masters the methods and techniques needed to analyze an existing software system and to enable it to evolve given changing requirements.” Our objectives are three-fold: The course ties in closely with paper writing sessions where the objectives are to learn from academic literature, to develop curiosity, and to improve argumentation and writing skills. This course is designed around lab sessions in which we study real and large (open-source) software systems, written in languages like C, Java, PHP or Ruby. We use Rascal -a programming language workbench, or meta programming language- to apply and build software metrics, software analyses, software visualisations and (if time permits) software transformations. See http://www.rascal-mpl.org. The student is supported with introductory courses and interactive lab sessions while learning this new language in the beginning. The course is supported by a series of lectures on the theory of software maintenance and evolution, guest lecturers from field experts, and a guided study of a number of research papers about maintenance, reverse engineering, reengineering and renovation. Example topics are clone detection, mining software repositories and refactoring. The format is focused on practical skills via the lab exercises, such as exploring source code and building tools, and academic skills via the paper sessions. Every week we start with a two hour lecture on the theory of software evolution, which is required to understand the material covered in the lab exercises. The rest of the day and the following day are lab hours. You also need two hours time every other week to prepare for the bi-weekly two-hour paper sessions. In this course we use the experimental programming language Rascal, which is (beta) open-source software and new to most students. On top of that we dive into many new topics for the students. Therefore the lab time is designed to be an integral and interactive part of the teaching, where the lecturer and the students are both present. This course typically uses the following assessments, that will be detailed at the start of the course: The grade weights are indicative and will be detailed at the start of the course. Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. M. Bruntinkdr. V.V. Zaytsev (co-ordinator) Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   Registration is required viahttps://www.sis.uva.nlbefore the start of the semester. Please visit the website of your programme throughhttp://student.uva.nland check the A-Z list ’Course and Exam Registration’ for more information. dr. M. Bruntink dr. V.V. Zaytsev (co-ordinator) Master's Software Engineering The first objective is to acquire an understanding and appreciation of the challenges posed by software maintenance and software evolution. The second objective is to learn about quality of software and source code and how it affects software maintenance and evolution. The final objective is to be able to select and also construct software analysis and software transformation tools to help obtain insight in software quality and to help improve software quality. Advanced programming skills in several programming languages. Knowledge of compiler construction (parsing, ASTs, basic code analysis, etc.). Good (academic) English reading and writing skills. http://www.rascal-mpl.org:http://www.rascal-mpl.org reader consisting of selected papers on software evolution potentially other (academic) sources online test to assess basic skills practical lab assignments, assessed by demonstration and oral exam (2/3 of final grade) writing exercise(s): essay and/or annotated bilbiography (1/3 final grade)",-,-,-,-,-,"['architecture', 'requirements', 'engineering', 'software', 'semester', 'instruction', 'developing', 'informatics', 'workshops', 'edition', 'language', 'components', 'assess', 'document', 'completeness', 'experience', 'uva', 'catalogue', '5364soar6y', 'stakeholder', 'considerable', 'ec', 'provided', '1sem', 'urluntil', 'decisions', 'sis', 'ordinator', 'desig', 'motivate']","['software architecture', 'software engineering', 'architecture document', 'requirements software', 'assess architecture', 'software quality', 'quality requirements', 'instruction english', 'course planner', 'informatics lecturer', 'provided course', 'design decisions', 'vies architectural', 'development keywords', 'engineering construction', 'programs considerable', 'start semester', 'knowledge experience', 'document completeness', 'workshops practice', '2012 edition', 'sis uva', 'components relationships', 'translate stakeholder', 'sem 1sem', 'organization registration', 'number 5364soar6y', 'nl urluntil', 'evolution desig', 'balance conflicting']","['requirements software architecture', 'software architecture practice', 'software quality architecture', 'assess architecture document', 'edition various architecture', 'master software engineering', 'architecture patterns course', 'requirements general knowledge', 'keywords architecture design', 'components quality requirements', 'decisions software quality', 'engineering add course', 'graduate school informatics', 'ec language instruction', 'knowledge experience software', 'provided course written', 'workshops practice computer', 'ensure software able', 'preferably experience developing', 'start semester lecture', 'programs considerable size', '2012 edition various', 'construction programs considerable', 'able translate stakeholder', 'sis uva nl', '5364soar6y credits ec', 'sem 1sem 2see', 'grade weights indicative', 'english time period', 'required https www']","['specification', 'tests', 'requirements', 'instruction', 'programming', 'automate', 'languages', 'haskell', 'semester', 'informatics', 'imperative', 'postconditions', 'modelling', 'final', 'logicinaction', 'sem', 'list', 'registration', 'generate', 'electronically', 'informal', 'pre', 'nland', 'understand', 'seminars', '5364sote6y', 'sis', 'modest', 'viahttps', 'focusses']","['software testing', 'languages tested', 'formal specification', 'information tests', 'language instruction', 'haskell course', 'postconditions programs', 'examination consist', 'programming college', 'code information', 'example programs', 'given requirements', 'set test', 'course assignment', 'want automate', 'modelling reasoning', 'start semester', 'generation lectures', 'lab final', 'informatics lecturer', 'functional imperative', 'check list', 'process informal', 'sem registration', 'throughhttp student', 'understand produce', 'sis uva', 'electronically available', 'impossible state', 'modest sized']","['test programs written', 'imperative languages tested', 'specification available course', 'software testing checking', 'test process informal', 'tested given formal', 'test generation lectures', 'automate test process', 'information tests relevant', 'haskell course includes', 'given formal specification', 'preconditions code information', 'exam consisting theory', 'programs written functional', 'introduction languages focusses', 'master software engineering', 'instruction english time', 'given software satisfies', 'computer science modelling', 'states postconditions programs', 'nland check list', 'reasoning systems cambridge', 'process need pre', 'final grade determined', 'start semester visit', 'sem sem registration', 'generation lectures seminars', 'able understand produce', 'website programme throughhttp', 'number 5364sote6y credits']","['requirements', 'semester', 'lectures', 'instruction', 'study', 'contextual', 'software', 'informatics', 'scrum', 'modeling', 'catalogue', 'prototyping', 'engineering', 'planner', 'interviewing', 'discussed', 'sem', 'factors', 'nland', 'customers', 'validation', 'period', 'cases', 'uml', 'define', 'ordinator', '5364reen6y', 'weakness', 'transfer', 'viahttps']","['requirements engineering', 'methods requirements', 'knowledge requirement', 'course planner', 'contextual design', 'students design', 'informatics lecturer', 'language instruction', 'start semester', 'techniques uml', 'scrum prototyping', 'discussed lectures', 'project based', 'website programme', 'needs experience', 'understanding subject', 'literature study', 'diagrams software', 'exam registration', 'software behoviour', 'analysis user', 'learn data', 'catalogue number', 'course understand', 'interviewing use', 'define specify', 'period sem', 'uva nland', 'adequately define', 'express transfer']","['requirements engineering like', 'requirements best practices', 'lectures feasible student', 'course planner sem', 'software behoviour lecture', 'master software engineering', 'method contextual design', 'course catalogue number', 'modeling techniques uml', 'graduate school informatics', 'factors knowledge requirement', 'transfer course understand', 'ec language instruction', 'analysis user needs', 'engineering example books', 'project based method', 'students design experiment', 'nlbefore start semester', 'prototyping interviewing use', 'practices like scrum', 'diagrams software behoviour', 'literature study literature', 'needs experience shows', 'registration information drs', 'time period sem', 'website programme throughhttp', 'extremely difficult adequately', 'law philosophy cognitive', 'define specify perception', 'users problem incomplete']","['courses', 'semester', 'study', 'requirements', 'lecturer', 'instruction', 'graduation', 'masters', 'informatics', 'preparation', 'planner', 'engineering', 'presentation', 'skills', 'credits', 'english', 'catalogue', 'materials', 'ideas', 'pass', 'build', 'read', 'ec', 'ordinator', '5364prms6y', 'define', 'january', 'exercising', 'stormdr', 'viahttps']","['courses semester', 'study materials', 'practical course', 'course planner', 'language instruction', 'informatics lecturer', 'project tutor', 'graduation project', 'preparation discuss', 'summary skills', 'plan masters', 'lecturer objective', 'pass course', 'presentation skills', 'entry requirements', 'exam registration', 'learn build', 'define project', 'software engineering', 'text knowledge', 'writing scientific', 'sessions learn', 'credits ec', 'problem analysis', 'format aimed', '1sem sem', 'visit website', 'defined themes', 'needed complete', 'number defined']","['practical course format', 'skills covered study', 'course teaching skills', 'materials available course', 'course planner sem', 'preparation second semester', 'student pass course', 'ec language instruction', 'help preparation discuss', 'graduation project summary', 'engineering add course', 'project tutor help', 'graduate school informatics', 'time year students', 'start semester visit', 'english entry requirements', 'continue master project', 'sessions scientific reading', 'design presentation skills', 'programme throughhttp student', 'getting approval lecturer', 'publications learn build', 'software engineering plan', 'exercising skills needed', 'problem analysis scientific', 'text knowledge current', '5364prms6y credits ec', 'structures need theory', 'time period sem', 'choose number defined']","['scrum', 'programming', 'study', 'requirements', 'engineering', 'developing', 'instruction', 'informatics', 'strategies', 'performance', 'seminar', 'planner', 'english', 'crucial', 'levels', 'determine', 'rup', 'motivation', 'come', 'role', 'xp', 'nland', 'kaizen', 'tqm', 'ordinator', 'cmmi', '5364sopr6y', 'uva', 'deliverables', 'viahttps']","['software engineering', 'performance developing', 'projects lecture', 'rup scrum', 'course exam', 'language instruction', 'informatics lecturer', 'learn effective', 'engineer team', 'competences crucial', 'planner sem', 'project failure', 'set requirements', 'come understand', 'systems challenging', 'architecture knowledge', 'assess method', 'quality paradigms', 'doneness intermediate', 'teams coordination', 'understand reasons', 'tqm kaizen', 'large scale', 'graduate graduate', 'uva nland', 'ordinator master', 'role culture', 'programme throughhttp', 'credits ec', 'number 5364sopr6y']","['software engineering projects', 'understand big software', 'informatics lecturer course', 'rup scrum successful', 'big projects lecture', 'performance developing large', 'scrum xp software', 'knowledge software methods', 'engineering add course', 'learn effective best', 'list course exam', 'instruction english time', 'planner sem sem', 'role planning design', 'course come understand', 'team organization learn', 'determine quality doneness', 'requirements ambiguous incomplete', 'concerns able understand', 'test experience working', 'reasons work set', 'graduate graduate school', 'start semester visit', 'intermediate deliverables like', 'nland check list', 'website programme throughhttp', 'change hard determine', 'kaizen examine evidence', 'influenced different levels', 'andy oram greg']","['programming', 'compiler', 'lectures', 'semester', 'syllabus', 'instruction', 'engineering', 'informatics', 'dsls', 'languages', 'frameworks', 'debugging', 'parsing', 'grades', 'workshops', 'catalogue', 'implementation', '5364soco6y', 'sem', 'nland', 'aspects', 'hierarchy', 'domain', 'uva', 'mde', 'byod', 'dry', 'reviews', 'provide', 'integration']","['software engineering', 'java lectures', 'language instruction', 'covers programming', 'course catalogue', 'informatics lecturer', 'mastery programming', 'theory compiler', 'html course', 'discussion code', 'aspects code', 'object oriented', 'frameworks students', 'topics software', 'dsls model', 'subjects design', 'debugging detailed', 'dry code', 'integration code', 'exam grades', '5364soco6y credits', 'solid principles', 'implement domain', 'uva nland', 'sem 1sem', 'byod course', 'readability modularity', 'check list', 'reading crista', 'laptop required']","['code generation course', 'software language engineering', 'software engineering inform', 'languages java lectures', 'programming styles syllabus', 'course students implement', 'ec language instruction', 'engineering add course', 'course catalogue number', 'topics software construction', 'covers programming implementation', 'engineering aspects parsing', 'domain specific language', 'informatics lecturer dr', 'object oriented frameworks', 'engineering mde compiler', 'workshops computer lab', 'student uva nland', 'subjects design contract', 'dsls model driven', 'course laptop required', 'discussion code reviewed', 'debugging detailed design', 'visit website programme', 'solid principles data', '5364soco6y credits ec', 'vinju master software', 'type checking interpretation', 'time period sem', 'average lab exam']","['semester', 'courses', 'requirements', 'tutor', 'prof', 'internship', 'instruction', 'catalogue', 'masterproject', 'assignment', 'registration', 'thesis', 'credits', 'engineering', 'informatics', 'planner', 'preparation', 'entry', '1sem', 'esc', 'blackboard', 'proposed', 'phase', 'consists', 'available', 'presentation', 'ordinator', '18', 'start', 'dekkersprof']","['courses semester', 'course planner', 'requirements time', 'add course', 'phase lecturer', 'assignment internship', 'preparation masterproject', 'informatics lecturer', 'time students', 'tutor available', 'instruction english', 'consists software', 'project plan', 'catalogue number', 'planner sem', 'research institution', 'ec language', 'engineering acquiring', 'credits 18', 'esc completion', 'blackboard scientific', 'work month', 'eijck prof', 'graduate graduate', 'reported thesis', 'program passed', 'survey registration', 'literature survey', 'zaytsev ordinator', 'der stormdr']","['course preparation masterproject', 'students courses semester', 'course catalogue number', 'preparation phase lecturer', 'add course planner', 'tutor project plan', 'literature course catalogue', 'engineering add course', 'ec language instruction', 'entry requirements time', 'research assignment internship', 'project consists software', 'program passed course', 'need approval lecturer', 'graduate school informatics', 'discussion time students', 'sem college graduate', 'institution blackboard scientific', 'plan preparation phase', 'credits 18 ec', 'software engineering research', 'period sem 1sem', 'work month time', 'acquiring ability research', 'work reported thesis', 'survey registration required', 'catalogue number 5364mas18y', 'servicedesk esc completion', 'carry research proposed', 'given defense session']","['programming', 'software', 'informatics', 'assignments', 'lectures', 'tools', 'maintenance', 'introductory', 'ruby', 'rascal', 'workbench', 'visualisations', 'refactoring', 'parsing', 'repositories', 'analyze', 'requirements', 'catalogue', 'lab', 'php', 'metrics', 'sem', 'english', 'annotated', 'mpl', 'papers', 'nland', 'graduate', 'visit', 'period']","['programming language', 'analyses software', 'software engineering', 'software maintenance', 'software visualisations', 'rascal programming', 'theory software', 'informatics lecturer', 'metrics software', 'tools academic', 'website programme', 'course catalogue', 'supported introductory', 'instruction english', 'permits software', 'planner sem', 'assess basic', 'topics students', 'study number', 'php ruby', 'writing sessions', 'refactoring format', 'understand material', 'rascal beta', 'lab hours', 'workbench meta', 'obtain insight', 'parsing asts', 'exit qualification', 'uva nland']","['rascal programming language', 'software new students', 'lecture theory software', 'software systems written', 'metrics software analyses', 'programming skills programming', 'languages knowledge compiler', 'software maintenance evolution', 'obtain insight software', 'software transformation tools', 'master software engineering', 'code analysis good', 'course course catalogue', 'informatics lecturer exit', 'building tools academic', 'ec language instruction', 'language workbench meta', 'visit website programme', 'large open source', 'planner sem sem', 'online test assess', 'java php ruby', 'required understand material', 'repositories refactoring format', 'period college graduate', 'lab time designed', 'writing sessions objectives', 'mpl org reader', 'annotated bilbiography final', 'exercises rest day']",[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]
2016-2017,"Course catalogue number 5364SOAR6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of After this course, the student is able to: translate stakeholder's requirements into a software architecture, handle trade-offs between conflicting requirements and motivate choices and assess an (other's) architecture document for completeness and value for development. Keywords: architecture design, architecture trade-off analysis, architectural vies, architectural evolution, desig decisions, architecture decisions, software quality and architecture patterns. This course examines fundamental architecture design decisions that should ensure that a software system is able to achieve as much as possible the quality requirements. This concerns the division of a system into components, the relationships between these components, the quality requirements of the individual components and the system as a whole, and decisions that need to be made to balance between conflicting requirements. Information about procedures can be found athttp://www.student.uva.nl/se/az/item/course-registration.html. Lecture, seminars, workshops and practice in computer lab. Written examination (40% of final grade) and laboratory work (60% of final grade). The grade weights are indicative and will be detailed at the start of the course. Recommended prior knowledge:General knowledge of (and experience in) software engineering; construction of programs of considerable size. Preferably experience in developing software in a large organization. Course catalogue number 5364SOAR6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering Literature: L. Bass, P. Clements and R. Kazman. 'Software Architecture in Practice'. Addison-Wesley, 2012. (Third edition.) Other: Various architecture relevant papers which will be provided during the course.","Course catalogue number 5364SOTE6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of After the course, the student is able to understand and produce formal specifications of modest-sized samples of software, and is able to use formal specifications to generate relevant tests for the software. Software testing is checking whether a given software system satisfies given requirements or specifications. Without a specification, it is impossible to state what a piece of software should do, and there is no reasonable way to set up the test process. An informal specification is not enough, for if we want to automate the test process we need pre-given information about (i) which tests are relevant, and about (ii) what the outcomes of the relevant tests should be. The information about (i) states the preconditions of the code, and the information about (ii) states the postconditions. Programs written in functional or imperative languages can be tested, given a formal specification, by means of a random test generator. This test method will be illustrated for a number of example programs written in Haskell. The course includes a lightning introduction to this languages, and then focusses on how to test programs written in either functional or imperative style, and how to use tools for automated test generation. Information about procedures can be found athttp://www.student.uva.nl/se/az/item/course-registration.html. Lectures, seminars and computer lab sessions. Course examination will consist of assignments during the course plus a final exam consisting of a theory part and a computer lab part. Final grade determined for 40% by the course assignment results and for 60% by the result on the final exam. Course catalogue number 5364SOTE6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) prof. dr. D.J.N. van Eijck (co-ordinator) Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   prof. dr. D.J.N. van Eijck (co-ordinator) Master's Software Engineering Literature: Kees Doets and Jan van Eijck, 'The Haskell Road to Logic, Maths and Programming'. College Publications, London 2012. This book can be ordered (at a discount) with the lecturer. Literature: Recommended background reading: M. Huth and M. Ryan, 'Logic in Computer Science: Modelling and Reasoning about Systems',Cambridge University Press 2004 (Second Edition). Literature: Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,'Logic in Action', electronically available fromhttp://www.logicinaction.org Syllabus: Reader: Jan van Eijck, 'Purely Functional Algorithm Specification'. Will be made available during the course. Syllabus: Syllabus:","Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of The success of a software system depends on the proper interpretation and analysis of user needs. Experience shows that it is extremely difficult to adequately define and specify a system. The perception of customers and users of the problem is often incomplete, inaccurate and changes over time. Knowledge is hard to express and to transfer. During this course you will understand why user needs are so hard to express, capture and understand. You will also learn the shortcomings of best practices like scrum, prototyping, interviewing and use cases. Furthermore you will learn about data-driven methods for requirements engineering like Contextual Design. Requirements methods and techniques will be discussed during the lectures. If feasible the whole student group will collaborate in one real life requirements project based on the method of contextual design. Next to specific RE literature we will also study literature from psychology, law, philosophy and cognitive science to get a better understanding of the subject. Finally students will design and do an experiment to show the inherent weakness of requirements best practices, like the use of prototyping for requirement validation. This will be done from the perspective of human factors. Information about procedures can be found athttp://www.student.uva.nl/se/az/item/course-registration.html. Lecture, seminar and computer lab. Reading tests, paper and lab work. Recommended prior knowledge: Knowledge of requirement engineering, for example books of Sommerville, Robertson, van Lamsweerde, Wiegers or Pohl. 'Modeling techniques', e.g. UML diagrams to describe software behaviour. Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering Literature:  D. Kahneman 'Thinking, fast and slow'.","Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For part-time (2 year students): all other courses in the program have been passed. For full-time (1 year students): To continue with the Master’s project preparation in the second semester (January), all courses of the first semester have to be passed. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of The objective of the course is teaching the skills needed to successfully complete the Master’s (graduation) project. In summary these skills are: During paper sessions you learn skills to find, read and assess relevant scientific publications. You will also learn to build argumentation structures you need for your theory and analysis. For your graduation you can choose from a number of defined themes. In exceptional cases it is possible to define a project yourself. A tutor will help you during the preparation. You will also discuss your ideas with other students. Information about procedures can be found athttp://www.student.uva.nl/se/az/item/course-registration.html. This is a mixed theoretical and practical course. The format is aimed at exercising skills needed to complete the Master’s project. There are interactive sessions where scientific reading, writing, research design, and presentation skills are covered. The student can pass the course by getting approval by a lecturer (tutor) for two deliverables: Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For part-time (2 year students): all other courses in the program have been passed. For full-time (1 year students): To continue with the Master’s project preparation in the second semester (January), all courses of the first semester have to be passed. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator)prof. dr. D.J.N. van Eijckdr. T. van der Storm Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) prof. dr. D.J.N. van Eijck dr. T. van der Storm Master's Software Engineering Problem analysis, Scientific literature survey, Theory building, Hypothesizing, Structuring research and validation, Project planning, Scientific reporting. Other: Study materials are made available through the course’s BlackBoard page. An interest in reading and writing scientific literature. Affinity with reading and writing English text. Knowledge of current challenges and results in software engineering. Plan for the Masters project, Survey of related literature.","Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of During this course you will come to understand why big software engineering projects are prone to failure. You will come to understand how performance is influenced at different levels: that of the individual software engineer, the team and the whole organization. You will learn about motivation, competences, and the crucial role of culture. Also you will learn about organizational paradigms and control mechanisms, quality paradigms, and the role of planning and design in a world that is volatile and of which a lot is unknown. As software engineering is a special kind of organization, you will also learn how effective our best practices are. With this knowledge you will be able to understand why a method like RUP or Scrum is sometimes successful and sometimes not. You will also come to assess such a method and better be able to use it in such a way to improve overall project performance. Developing large scale software systems is challenging for many reasons. We work from a set of requirements that are ambiguous and incomplete, may be invalid and are subject to change. It’s hard to determine the quality and doneness of (intermediate) deliverables like designs, plans and code. We have to coordinate up to 1.000 software engineers with imperfect mechanisms for separation of concerns. To be able to understand reasons for software project failure we study failed projects. We learn about organizational control mechanisms and look at theory from social sciences notably motivation, empowerment, effective teams and coordination strategies. Last but not least we look at what we can learn from the quality community: Lean, CMMi, TQM, Kaizen. We will also examine evidence about the practices we apply in software engineering, like test first, pair programming, software architecture. Information about procedures can be found athttp://www.student.uva.nl/se/az/item/course-registration.html. Lecture, work groups, seminar. Reading tests, essay and lab work. Recommended prior knowledge:Knowledge of software methods like Rup, Scrum, Xp and software practices like pair programming, test first. Experience with working in big projects. Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering Literature: Andy Oram, Greg Wilson'Making Software: What Really Works, and Why We Believe It'.","Course catalogue number 5364SOCO6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of The course focuses on methods and techniques of software construction. This primarily covers the programming and implementation activities of a software engineering project. Examples of such activities are coding and debugging, detailed design, unit testing, code reviews, optimization, component integration and code generation. The course has two main objectivea: In the practical course students will implement a Domain-Specific Language (DSL). This involves both language engineering aspects (parsing, type checking, interpretation etc.) as well as a substantial amount of programming and discussion. The code will be reviewed based on aspects of code quality, simplicity, readability, modularity, separation of concerns and consistency of style. Lectures will provide the required background on DSLs, model-driven engineering (MDE), compiler theory, generative programming, code quality, ""Don't-Repeat-Yourself"" (DRY), code smells and design patterns. Additional academic literature covers subjects such as design-by-contract, SOLID principles, data abstraction, modularity, hierarchy, programming style, code smells, and object-oriented frameworks. Students are required to complete an exam based on the academic literature, to show they master concepts and practices relevant for high quality software construction. Information about procedures can be found athttp://www.student.uva.nl/se/az/item/course-registration.html. Assessment is based on the code produced during the lab and a final exam. Both need to be completed successfully. Final grade is the average of both lab and exam grades. This is a Bring-Your-Own-Device (BYOD) course, so a laptop is required. See here more info:http://student.uva.nl/se/az/item/bring-your-own-device.html Technical mastery of one or more programming languages (e.g., Java, C#, etc.). Maximum number of students: 60 Course catalogue number 5364SOCO6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. T. van der Storm (co-ordinator)dr. J.J. Vinju Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. T. van der Storm (co-ordinator) dr. J.J. Vinju Master's Software Engineering Inform students about the area of software language engineering: how to employ model-driven and language-driven approaches in software construction. This is includes basic theory of compiler construction. Actively engage students to reason about and reflect upon aspect of design, code quality, and software construction methods. Lecture Seminar Computer lab session/practical training Supervision/feedback meeting Literature: Required reading: Crista Lopes', 'Exercises in Programming Styles'. Syllabus: Syllabus of landmark papers on topics in software construction.","Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of Carry out the research as proposed by the plan you made in the preparation phase. A lecturer (tutor) will be available for weekly feedback and discussion. Part time students will need to free time to work at least two month full time on their research. Information about procedures can be found athttp://www.student.uva.nl/se/az/item/course-registration.html. The Master’s project consists of a software engineering-themed research assignment (an internship) at either a company or a research institution. Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkersprof. dr. D.J.N. van Eijckdr. C.U. Grelck (co-ordinator)dr. T. van der Storm Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers prof. dr. D.J.N. van Eijck dr. C.U. Grelck (co-ordinator) dr. T. van der Storm Master's Software Engineering Acquiring the ability to do research by designing, executing and reporting on a project in the area of software engineering research, Adding knowledge or gathering new evidence in the field of software engineering. Literature: Scientific literature Quality of the work as reported on in the thesis, Quality of the presentation given during the defense session. In order to start the Master’s project you need to have approval from a lecturer (tutor) on your project plan and related literature survey.","Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of Exit qualification: “The graduate masters the methods and techniques needed to analyze an existing software system and to enable it to evolve given changing requirements.” Our objectives are three-fold: The course ties in closely with paper writing sessions where the objectives are to learn from academic literature, to develop curiosity, and to improve argumentation and writing skills. This course is designed around lab sessions in which we study real and large (open-source) software systems, written in languages like C, Java, PHP or Ruby. We use Rascal -a programming language workbench, or meta programming language- to apply and build software metrics, software analyses, software visualisations and (if time permits) software transformations. Seehttp://www.rascal-mpl.org.The student is supported with introductory courses and interactive lab sessions while learning this new language in the beginning. The course is supported by a series of lectures on the theory of software maintenance and evolution, guest lecturers from field experts, and a guided study of a number of research papers about maintenance, reverse engineering, reengineering and renovation. Example topics are clone detection, mining software repositories and refactoring. Information about procedures can be found athttp://www.student.uva.nl/se/az/item/course-registration.html. The format is focused on practical skills via the lab exercises, such as exploring source code and building tools, and academic skills via the paper sessions. Every week we start with a two hour lecture on the theory of software evolution, which is required to understand the material covered in the lab exercises. The rest of the day and the following day are lab hours. You also need two hours time every other week to prepare for the bi-weekly two-hour paper sessions. In this course we use the experimental programming language Rascal, which is (beta) open-source software and new to most students. On top of that we dive into many new topics for the students. Therefore the lab time is designed to be an integral and interactive part of the teaching, where the lecturer and the students are both present. This course typically uses the following assessments, that will be detailed at the start of the course: The grade weights are indicative and will be detailed at the start of the course. Recommended prior knowledge: Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. C.U. Grelck (co-ordinator) Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. C.U. Grelck (co-ordinator) Master's Software Engineering The first objective is to acquire an understanding and appreciation of the challenges posed by software maintenance and software evolution. The second objective is to learn about quality of software and source code and how it affects software maintenance and evolution. The final objective is to be able to select and also construct software analysis and software transformation tools to help obtain insight in software quality and to help improve software quality. Syllabus: Reader consisting of selected papers on software evolution Other: http://www.rascal-mpl.org:<a href=:'>http://www.rascal-mpl.org:http://www.rascal-mpl.org Other: Potentially other (academic) sources online test to assess basic skills practical lab assignments, assessed by demonstration and oral exam (2/3 of final grade) writing exercise(s): essay and/or annotated bilbiography (1/3 final grade) Advanced programming skills in several programming languages. Knowledge of compiler construction (parsing, ASTs, basic code analysis, etc.). Good (academic) English reading and writing skills.",-,-,-,-,-,"['architecture', 'requirements', 'instruction', 'software', 'engineering', 'lecture', 'informatics', 'developing', 'workshops', 'components', 'assess', 'document', 'completeness', 'quality', 'edition', 'grade', 'catalogue', 'sem', 'uva', 'decisions', 'english', 'stakeholder', '5364soar6y', 'laboratory', 'provided', 'considerable', 'ordinator', 'period', 'vies', 'athttp']","['software architecture', 'architecture document', 'requirements software', 'quality requirements', 'software engineering', 'assess architecture', 'course registration', 'language instruction', 'design decisions', 'information procedures', 'informatics lecturer', 'development keywords', 'engineering literature', 'document completeness', 'html lecture', 'computer lab', 'written examination', 'programs considerable', 'components relationships', 'workshops practice', 'student able', 'knowledge experience', '2012 edition', 'translate stakeholder', 'sem 1sem', '60 final', 'credits ec', 'uva nl', 'weights indicative', 'concerns division']","['requirements software architecture', 'architecture decisions software', 'software quality architecture', 'assess architecture document', 'requirements information procedures', 'architecture patterns course', 'components quality requirements', 'master software engineering', 'requirements concerns division', 'keywords architecture design', 'requirements motivate choices', 'engineering add course', 'design decisions ensure', 'translate stakeholder requirements', 'graduate school informatics', 'workshops practice computer', 'item course registration', 'language instruction english', 'course examines fundamental', 'lecturer course student', 'ensure software able', 'offs conflicting requirements', 'examination 40 final', 'document completeness value', '2012 edition various', 'programs considerable size', 'weights indicative detailed', '5364soar6y credits ec', 'procedures athttp www', 'sem 1sem 2see']","['specification', 'tests', 'requirements', 'instruction', 'programming', 'automate', 'procedures', 'languages', 'haskell', 'assignments', 'syllabus', 'informatics', 'imperative', 'postconditions', 'college', 'final', 'logicinaction', 'sem', 'registration', 'electronically', 'credits', 'informal', 'pre', 'understand', 'seminars', '5364sote6y', '2012', 'modest', 'athttp', 'produce']","['software testing', 'languages tested', 'formal specification', 'information tests', 'language instruction', 'haskell course', 'postconditions programs', 'examination consist', 'programming college', 'code information', 'example programs', 'given requirements', 'course registration', 'set test', 'want automate', 'modelling reasoning', 'lab final', 'functional imperative', 'planner sem', 'generator test', 'process informal', 'syllabus reader', 'procedures athttp', 'checking given', 'lectures seminars', 'understand produce', 'time period', 'lightning introduction', 'eijck ordinator', 'modest sized']","['test programs written', 'imperative languages tested', 'specification available course', 'test generation information', 'software testing checking', 'specification want automate', 'languages tested given', 'test process informal', 'tested given formal', 'automate test process', 'information tests relevant', 'haskell course includes', 'given formal specification', 'preconditions code information', 'generation information procedures', 'exam consisting theory', 'programs written functional', 'introduction languages focusses', 'master software engineering', 'instruction english time', 'given software satisfies', 'computer science modelling', 'states postconditions programs', 'reasoning systems cambridge', 'process need pre', 'final grade determined', 'student uva nl', 'procedures athttp www', 'number 5364sote6y credits', 'sem 1sem 2see']","['requirements', 'lectures', 'instruction', 'study', 'procedures', 'scrum', 'students', 'contextual', 'software', 'subject', 'modeling', 'informatics', 'prototyping', 'engineering', 'planner', 'interviewing', 'discussed', 'catalogue', 'sem', 'factors', 'validation', 'period', 'feasible', 'customers', 'uml', 'define', 'ordinator', '5364reen6y', 'weakness', 'transfer']","['requirements engineering', 'software engineering', 'knowledge requirement', 'methods requirements', 'course planner', 'contextual design', 'language instruction', 'students design', 'scrum prototyping', 'information procedures', 'informatics lecturer', 'techniques uml', 'discussed lectures', 'needs experience', 'understanding subject', 'project based', 'literature study', 'diagrams software', 'software behaviour', 'course understand', 'learn data', 'reading tests', 'interviewing use', 'period sem', 'define specify', 'catalogue number', 'adequately define', 'cases furthermore', 'users problem', 'express transfer']","['requirements engineering like', 'requirements best practices', 'software engineering literature', 'software behaviour course', 'lectures feasible student', 'course planner sem', 'knowledge knowledge requirement', 'modeling techniques uml', 'method contextual design', 'engineering add course', 'ec language instruction', 'graduate school informatics', 'practices like scrum', 'course registration html', 'factors information procedures', 'students design experiment', 'course understand user', 'analysis user needs', 'use prototyping requirement', 'literature study literature', 'express transfer course', 'needs experience shows', 'interviewing use cases', 'time period sem', 'procedures athttp www', 'understanding subject finally', 'extremely difficult adequately', 'law philosophy cognitive', 'define specify perception', 'catalogue number 5364reen6y']","['courses', 'semester', 'requirements', 'study', 'instruction', 'lecturer', 'graduation', 'informatics', 'preparation', 'project', 'skills', 'writing', 'plan', 'presentation', 'engineering', 'registration', 'credits', 'materials', 'uva', 'format', 'publications', 'master', 'summary', 'sessions', '1sem', 'practical', 'ordinator', 'exercising', 'define', 'add']","['courses semester', 'practical course', 'course planner', 'study materials', 'language instruction', 'project preparation', 'informatics lecturer', 'project tutor', 'graduation project', 'help preparation', 'planning scientific', 'summary skills', 'entry requirements', 'presentation skills', 'learn build', 'software engineering', 'publications learn', 'information procedures', 'sessions learn', 'continue master', 'theory analysis', 'defined themes', 'uva nl', '5364prms6y credits', 'needed complete', 'number defined', 'affinity reading', 'passed time', 'registration html', 'se az']","['practical course format', 'materials available course', 'year students courses', 'preparation second semester', 'add course planner', 'skills covered student', 'lecturer objective course', 'informatics lecturer objective', 'help preparation discuss', 'language instruction english', 'graduation project summary', 'project tutor help', 'engineering add course', 'semester passed time', 'reporting study materials', 'pass course getting', 'need theory analysis', 'continue master project', 'design presentation skills', 'www student uva', 'entry requirements time', 'software engineering plan', 'getting approval lecturer', 'sessions scientific reading', 'publications learn build', 'exercising skills needed', 'planner sem sem', '5364prms6y credits ec', 'information procedures athttp', 'choose number defined']","['scrum', 'programming', 'study', 'requirements', 'engineering', 'developing', 'procedures', 'informatics', 'competences', 'strategies', 'performance', 'seminar', 'english', 'planner', 'project', 'determine', 'crucial', 'rup', 'come', 'levels', 'failed', 'xp', 'tqm', 'kaizen', 'reasons', 'ordinator', 'deliverables', '5364sopr6y', 'cmmi', 'uva']","['software engineering', 'performance developing', 'projects course', 'rup scrum', 'language instruction', 'informatics lecturer', 'learn effective', 'engineer team', 'competences crucial', 'information procedures', 'planning design', 'study failed', 'test experience', 'determine quality', 'understand method', 'systems challenging', 'set requirements', 'understand reasons', 'course come', 'groups seminar', 'large scale', 'doneness intermediate', 'kaizen examine', 'different levels', 'sem 1sem', 'role culture', 'ordinator master', 'english time', 'catalogue number', 'athttp www']","['software engineering projects', 'understand big software', 'rup scrum successful', 'informatics lecturer course', 'performance developing large', 'scrum xp software', 'knowledge software methods', 'engineering add course', 'ec language instruction', 'learn effective best', 'failed projects learn', 'course come understand', 'successful come assess', 'competences crucial role', 'team organization learn', 'determine quality doneness', 'role planning design', 'concerns able understand', 'architecture information procedures', 'test experience working', 'reasons work set', 'requirements ambiguous incomplete', 'graduate graduate school', 'procedures athttp www', 'subject change hard', 'period sem 1sem', 'intermediate deliverables like', 'kaizen examine evidence', 'literature andy oram', 'number 5364sopr6y credits']","['programming', 'compiler', 'lectures', 'syllabus', 'instruction', 'engineering', 'informatics', 'dsls', 'languages', 'subjects', 'frameworks', 'debugging', 'parsing', 'grades', 'catalogue', 'implementation', '5364soco6y', 'sem', 'project', 'inform', 'aspects', 'hierarchy', 'domain', 'uva', 'mde', 'session', 'solid', 'reviews', 'storm', 'integration']","['software engineering', 'language instruction', 'covers programming', 'course catalogue', 'informatics lecturer', 'mastery programming', 'theory compiler', 'methods lecture', 'discussion code', 'aspects code', 'object oriented', 'frameworks students', 'topics software', 'dsls model', 'subjects design', 'debugging detailed', 'dry code', 'information procedures', 'integration code', 'exam grades', '5364soco6y credits', 'solid principles', 'implement domain', 'lab session', 'sem 1sem', 'byod course', 'uva nl', 'java maximum', 'reading crista', 'laptop required']","['code generation course', 'software language engineering', 'software engineering inform', 'programming styles syllabus', 'course students implement', 'ec language instruction', 'engineering add course', 'course catalogue number', 'topics software construction', 'covers programming implementation', 'methods lecture seminar', 'engineering aspects parsing', 'domain specific language', 'informatics lecturer dr', 'object oriented frameworks', 'engineering mde compiler', 'subjects design contract', 'dsls model driven', 'course laptop required', 'debugging detailed design', 'student uva nl', 'computer lab session', 'solid principles data', '5364soco6y credits ec', 'vinju master software', 'html assessment based', 'type checking interpretation', 'time period sem', 'literature covers subjects', 'java maximum number']","['semester', 'courses', 'requirements', 'tutor', 'instruction', 'internship', 'prof', 'informatics', 'assignment', 'engineering', 'credits', 'masterproject', 'software', 'planner', 'thesis', 'preparation', 'entry', 'catalogue', 'english', '1sem', 'presentation', 'phase', 'session', 'proposed', 'consists', '18', 'ordinator', 'available', 'az', 'athttp']","['courses semester', 'course registration', 'requirements time', 'language instruction', 'course planner', 'phase lecturer', 'assignment internship', 'informatics lecturer', 'tutor available', 'time students', 'preparation masterproject', 'consists software', 'engineering acquiring', 'information procedures', 'research institution', '5364mas18y credits', 'graduate graduate', 'plan related', 'catalogue number', 'sem 1sem', 'work month', 'program passed', 'ability research', 'reported thesis', 'uva nl', 'grelck ordinator', 'literature survey', 'session order', 'project need', 'registration html']","['course preparation masterproject', 'preparation phase lecturer', 'students courses program', 'ec language instruction', 'research institution course', 'item course registration', 'add course planner', 'entry requirements time', 'tutor project plan', 'english entry requirements', 'research assignment internship', 'project consists software', 'second semester passed', 'graduate school informatics', 'discussion time students', 'need approval lecturer', 'software engineering add', 'sem college graduate', 'plan preparation phase', 'credits 18 ec', 'acquiring ability research', 'engineering passed time', 'work month time', 'period sem 1sem', 'work reported thesis', 'uva nl se', 'procedures athttp www', 'catalogue number 5364mas18y', 'eijckdr grelck ordinator', 'session order start']","['programming', 'software', 'informatics', 'maintenance', 'assignments', 'syllabus', 'tools', 'lectures', 'introductory', 'workbench', 'ruby', 'refactoring', 'planner', 'rascal', 'parsing', 'visualisations', 'analyze', 'repositories', 'requirements', 'lab', 'annotated', 'php', 'metrics', 'sem', 'mpl', 'english', 'papers', 'graduate', 'period', 'online']","['programming language', 'software maintenance', 'software engineering', 'software visualisations', 'theory software', 'informatics lecturer', 'metrics software', 'tools academic', 'instruction english', 'supported introductory', 'papers maintenance', 'course registration', 'lab assignments', 'planner sem', 'permits software', 'syllabus reader', 'repositories refactoring', 'php ruby', 'writing sessions', 'requirements objectives', 'www rascal', 'understand material', 'mpl org', 'workbench meta', 'obtain insight', 'parsing asts', 'uses following', 'hours need', 'clone detection', 'following day']","['software maintenance software', 'programming language rascal', 'software new students', 'software systems written', 'skills programming languages', 'metrics software analyses', 'obtain insight software', 'lectures theory software', 'master software engineering', 'software visualisations time', 'papers software evolution', 'workbench meta programming', 'exploring source code', 'informatics lecturer exit', 'building tools academic', 'ec language instruction', 'paper sessions course', 'practical lab assignments', 'planner sem sem', 'php ruby use', 'refactoring information procedures', 'needed analyze existing', 'format focused practical', 'construction parsing asts', 'transformation tools help', 'understand material covered', 'understanding appreciation challenges', 'mpl org potentially', 'hours need hours', 'exercises rest day']",[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]
2017-2018,"Course catalogue number 52848SAR6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of For the most recent contents of this course and other information consulthttp://www.few.vu.nl/nl/studenten/studiegids/. Registration at the VU ; course code at the VU X_400170; enrollment viahttp://vunet.vu.nl Course will be offered at the VU University Amsterdam, see alsohttp://www.vu.nl/nl/studiegids/index.asp Course catalogue number 52848SAR6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) Associate Prof.Dr. P. Lago (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   Associate Prof.Dr. P. Lago (co-ordinator) Master's Software Engineering","Course catalogue number 5364SOTE6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of After the course, the student is able to understand and produce formal specifications of modest-sized samples of software, and is able to use formal specifications to generate relevant tests for the software. Software testing is checking whether a given software system satisfies given requirements or specifications. Without a specification, it is impossible to state what a piece of software should do, and there is no reasonable way to set up the test process. An informal specification is not enough, for if we want to automate the test process we need pre-given information about (i) which tests are relevant, and about (ii) what the outcomes of the relevant tests should be. The information about (i) states the preconditions of the code, and the information about (ii) states the postconditions. Programs written in functional or imperative languages can be tested, given a formal specification, by means of a random test generator. This test method will be illustrated for a number of example programs written in Haskell. The course includes a lightning introduction to this languages, and then focusses on how to test programs written in either functional or imperative style, and how to use tools for automated test generation. Basic familiarity with functional programming in Haskell. Information about procedures can be found athttp://www.student.uva.nl/se/az/item/course-registration.html. The schedule for this course is published onDataNose. Course examination will consist of assignments during the course plus a final exam consisting of a theory part and a computer lab part. Final grade determined for 40% by the course assignment results and for 60% by the result on the final exam. Course catalogue number 5364SOTE6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering Lecture Seminar Laptop seminar Literature: Recommended background reading: Kees Doets and Jan van Eijck, 'The Haskell Road to Logic, Maths and Programming'. College Publications, London 2012. This book can be ordered (at a discount) with the lecturer. Literature: Recommended background reading: M. Huth and M. Ryan, 'Logic in Computer Science: Modelling and Reasoning about Systems',Cambridge University Press 2004 (Second Edition). Literature: Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,'Logic in Action', electronically available fromhttp://www.logicinaction.org Literature: Graham Hutton, 'Programming in Haskell', Cambridge University Press 2016 (Second Edition). Syllabus: Reader: Jan van Eijck, 'Purely Functional Algorithm Specification'. Will be made available during the course. Syllabus Syllabus","Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of The success of a software system depends on the proper interpretation and analysis of stakeholder needs. Experience shows that it is extremely difficult to adequately define and specify a system. The perception of stakeholders and users of the problem is often incomplete, inaccurate and changes over time. Knowledge is hard to express and to transfer. During this course you will understand why stakeholder needs are so hard to express, capture and understand. You will also learn the shortcomings of best practices like scrum, prototyping, interviewing and use cases. Furthermore you will learn about data-driven methods for requirements engineering like Contextual Design. Requirements methods and techniques will be discussed during the lectures. If possible, you will do a real life requirements project. Next to specific RE literature we will also study literature from law, philosophy and cognitive science to get a better understanding of the subject. Finally students will design and do an experiment to show the inherent weakness of requirements best practices, like the use of prototyping for requirement validation. Information about procedures can be found athttp://www.student.uva.nl/se/az/item/course-registration.html. The schedule for this course is published onDataNose. Reading tests, paper and lab work. Recommended prior knowledge: Knowledge of requirement engineering, for example books of Sommerville, Robertson, van Lamsweerde, Wiegers or Pohl. 'Modeling techniques', e.g. UML diagrams to describe software behaviour. Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering Lecture Seminar Literature:  D. Kahneman 'Thinking, fast and slow'. Syllabus","Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For both part-time and full-time students. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of The objective of the course is teaching the skills needed to successfully complete the Master’s (graduation) project. In summary these skills are: During paper sessions you learn skills to find, read and assess relevant scientific publications. You will also learn to build argumentation structures you need for your theory and analysis. For your graduation you can choose from a number of defined themes. In exceptional cases it is possible to define a project yourself. A tutor will help you during the preparation. You will also discuss your ideas with other students. Information about procedures can be found athttp://www.student.uva.nl/se/az/item/course-registration.html. The schedule for this course is published onDataNose. The student can pass the course by getting approval by a lecturer (tutor) for two deliverables: Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For both part-time and full-time students. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering Problem analysis, Scientific literature survey, Theory building, Hypothesizing, Structuring research and validation, Project planning, Scientific reporting. Self-study Presentation/symposium Working independently on e.g. a project or thesis Supervision/feedback meeting Seminar Other:Study materials are made available through the course’s BlackBoard page. Study materials are made available through the course’s BlackBoard page. Study materials are made available through the course’s BlackBoard page. An interest in reading and writing scientific literature. Affinity with reading and writing English text. Knowledge of current challenges and results in software engineering. Plan for the Masters project, Survey of related literature.","Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of During this course you will come to understand why big software engineering projects are prone to failure. You will come to understand how performance is influenced at different levels: that of the individual software engineer, the team and the whole organization. You will learn about motivation, competences, and the crucial role of culture. Also you will learn about organizational paradigms and control mechanisms, quality paradigms, and the role of planning and design in a world that is volatile and of which a lot is unknown. As software engineering is a special kind of organization, you will also learn how effective our best practices are. With this knowledge you will be able to understand why a method like RUP or Scrum is sometimes successful and sometimes not. You will also come to assess such a method and better be able to use it in a situational fit way to improve overall project performance. Developing large scale software systems is challenging for many reasons. We work from a set of requirements that are ambiguous and incomplete, may be invalid and are subject to change. It’s hard to determine the quality and doneness of (intermediate) deliverables like designs, plans and code. We have to coordinate up to 1.000 software engineers with imperfect mechanisms for separation of concerns. To be able to understand reasons for software project failure we study failed projects. We learn about organizational control mechanisms and look at theory from social sciences notably motivation, empowerment, effective teams and coordination strategies. Last but not least we look at what we can learn from the quality community: Lean, CMMi, TQM, Kaizen. We will also examine evidence about the practices we apply in software engineering, like test first, pair programming, software architecture. Knowledge of software methods like Rup, Scrum, Xp and software practices like pair programming, test first. Experience with working in big projects. Information about procedures can be found athttp://www.student.uva.nl/se/az/item/course-registration.html. The schedule for this course is published onDataNose. Reading tests, essay and lab work. Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering Lecture Seminar Literature: Andy Oram, Greg Wilson'Making Software: What Really Works, and Why We Believe It'.","Course catalogue number 5364SOCO6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of The course focuses on methods and techniques of software construction. This primarily covers the programming and implementation activities of a software engineering project. Examples of such activities are coding and debugging, detailed design, unit testing, code reviews, optimization, component integration and code generation. The course has two main objectives: In the practical part of the course students will implement a Domain-Specific Language (DSL). This involves both language engineering aspects (parsing, type checking, interpretation etc.) as well as a substantial amount of programming and discussion. The code will be reviewed based on aspects of code quality, simplicity, readability, modularity, separation of concerns and consistency of style. Lectures will provide the required background on DSLs, model-driven engineering (MDE), compiler theory, generative programming, code quality, ""Don't-Repeat-Yourself"" (DRY), code smells and design patterns. Additional academic literature covers subjects such as design-by-contract, SOLID principles, data abstraction, modularity, hierarchy, programming style, code smells, and object-oriented frameworks. Students are required to complete an exam based on the academic literature, to show they master concepts and practices relevant for high quality software construction. Information about procedures can be found athttp://www.student.uva.nl/se/az/item/course-registration.html. The schedule for this course is published onDataNose. The assessment is based on the code produced during the labs and on a final written exam. Both must be passed individually; the final grade is the average of both the lab and the exam grade. This is a Bring-Your-Own-Device (BYOD) course, so a laptop is required. See here more info:http://student.uva.nl/se/az/item/bring-your-own-device.html Technical mastery of one or more programming languages (e.g., Java, C#, etc.).  Course catalogue number 5364SOCO6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. C.U. Grelck (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. C.U. Grelck (co-ordinator) Master's Software Engineering to inform students about the area of software language engineering: how to employ model-driven and language-driven approaches in software construction, including basic theory of compiler construction, and to actively engage students to reason about and to reflect upon aspects of code design, code quality and software construction methods. Lecture Seminar Computer lab session/practical training Supervision/feedback meeting Literature: Required reading: Crista Lopes', 'Exercises in Programming Styles'. Syllabus: Syllabus of landmark papers on topics in software construction.","Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Carry out the research as proposed by the plan you made in the preparation phase. A lecturer (tutor) will be available for weekly feedback and discussion. Part time students will need to free time to work at least two month full time on their research. Preparation Master Project Information about procedures can be found athttp://www.student.uva.nl/se/az/item/course-registration.html. The schedule for this course is published onDataNose. Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering Acquiring the ability to do research by designing, executing and reporting on a project in the area of software engineering research, Adding knowledge or gathering new evidence in the field of software engineering. Self-study Presentation/symposium Working independently on e.g. a project or thesis Supervision/feedback meeting Literature: Scientific literature Quality of the work as reported on in the thesis, Quality of the presentation given during the defense session. In order to start the Master’s project you need to have approval from a lecturer (tutor) on your project plan and related literature survey.","Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Exit qualification: “The graduate masters the methods and techniques needed to analyze an existing software system and to enable it to evolve given changing requirements.” Our objectives are three-fold: The course ties in closely with paper writing sessions where the objectives are to learn from academic literature, to develop curiosity, and to improve argumentation and writing skills. This course is designed around lab sessions in which we study real and large (open-source) software systems, written in languages like C, Java, PHP or Ruby. We use Rascal -a programming language workbench, or meta programming language- to apply and build software metrics, software analyses, software visualisations and (if time permits) software transformations. Seehttp://www.rascal-mpl.org.The student is supported with introductory courses and interactive lab sessions while learning this new language in the beginning. The course is supported by a series of lectures on the theory of software maintenance and evolution, guest lecturers from field experts, and a guided study of a number of research papers about maintenance, reverse engineering, reengineering and renovation. Example topics are clone detection, mining software repositories and refactoring. Information about procedures can be found athttp://www.student.uva.nl/se/az/item/course-registration.html. The format is focused on practical skills via the lab exercises, such as exploring source code and building tools, and academic skills via the paper sessions. Every week we start with a two hour lecture on the theory of software evolution, which is required to understand the material covered in the lab exercises. The rest of the day and the following day are lab hours. You also need two hours time every other week to prepare for the bi-weekly two-hour paper sessions. In this course we use the experimental programming language Rascal, which is (beta) open-source software and new to most students. On top of that we dive into many new topics for the students. Therefore the lab time is designed to be an integral and interactive part of the teaching, where the lecturer and the students are both present. The schedule for this course is published onDataNose. This course typically uses the following assessments, that will be detailed at the start of the course: The grade weights are indicative and will be detailed at the start of the course. Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) R.A. van Rozen (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   R.A. van Rozen (co-ordinator) Master's Software Engineering The first objective is to acquire an understanding and appreciation of the challenges posed by software maintenance and software evolution. The second objective is to learn about quality of software and source code and how it affects software maintenance and evolution. The final objective is to be able to select and also construct software analysis and software transformation tools to help obtain insight in software quality and to help improve software quality. Advanced programming skills in several programming languages. Knowledge of compiler construction (parsing, ASTs, basic code analysis, etc.). Good (academic) English reading and writing skills. Syllabus: Reader consisting of selected papers on software evolution Other:http://www.rascal-mpl.org:'>http://www.rascal-mpl.org:http://www.rascal-mpl.org Other: Potentially other (academic) sources online test to assess basic skills practical lab assignments, assessed by demonstration and oral exam (2/3 of final grade) writing exercise(s): essay and/or annotated bilbiography (1/3 final grade)","Course catalogue number 52848SAR6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of For the most recent contents of this course and other information consulthttp://www.few.vu.nl/nl/studenten/studiegids/. Registration at the VU ; course code at the VU X_400170; enrollment viahttp://vunet.vu.nl Course will be offered at the VU University Amsterdam, see alsohttp://www.vu.nl/nl/studiegids/index.asp Course catalogue number 52848SAR6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) Associate Prof.Dr. P. Lago (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   Associate Prof.Dr. P. Lago (co-ordinator) Master's Software Engineering",-,-,-,-,"['vunet', 'lecturer', 'catalogue', 'enrollment', 'instruction', 'studenten', 'sem', 'informatics', 'contact', 'ordinator', 'credits', 'language', 'ec', 'consulthttp', 'contents', 'nl', 'uva', 'amsterdam', 'fnwiscience', 'associate', '52848sar6y', 'planner', 'www', 'desk', 'lago', 'course', 'index', 'studiegids', '2see', 'recent']","['vu university', 'course catalogue', 'course information', 'course code', 'language instruction', 'university amsterdam', 'sem college', 'ec language', 'add course', 'asp course', 'education desk', 'contact education', 'informatics lecturer', 'catalogue number', 'credits ec', 'studenten studiegids', 'lago ordinator', 'esc science', 'x_400170 enrollment', 'sem 1sem', 'uva nl', 'viahttp vunet', 'consulthttp www', 'period college', 'associate prof', '5257100servicedesk esc', 'nl recent', 'english time', 'software engineering', 'fnwiscience park']","['vu course code', 'vu university amsterdam', 'vu nl course', 'course catalogue number', 'offered vu university', 'course information consulthttp', 'contact education desk', 'course planner sem', 'university amsterdam alsohttp', 'nl course offered', 'vu x_400170 enrollment', 'www vu nl', 'language instruction english', 'recent contents course', 'enrollment viahttp vunet', 'informatics lecturer associate', 'sem associate prof', 'index asp course', 'nl nl studenten', '52848sar6y credits ec', 'studenten studiegids registration', 'lago ordinator contact', 'esc science uva', 'nl studiegids index', 'nl master software', 'time period sem', '904b1020 5257100servicedesk esc', 'fnwiscience park 904b1020', 'software engineering add', 'college graduate graduate']","['specification', 'tests', 'languages', 'programming', 'requirements', 'instruction', 'procedures', 'syllabus', 'formal', 'assignments', 'automate', 'informatics', 'imperative', 'postconditions', 'college', 'haskell', 'seminar', 'final', 'logicinaction', 'electronically', 'registration', 'esc', 'credits', 'course', 'pre', '5257100servicedesk', 'reasonable', '2012', 'produce', 'athttp']","['languages tested', 'software testing', 'instruction english', 'information tests', 'requirements specifications', 'course examination', 'automate test', 'software engineering', 'algorithm specification', 'code information', 'postconditions programs', 'programs written', 'produce formal', 'hutton programming', 'process need', 'modelling reasoning', 'functional imperative', 'lab final', 'checking given', 'school informatics', 'haskell information', 'planner sem', 'generation basic', 'procedures athttp', 'desk fnwiscience', '5364sote6y credits', 'nl se', 'electronically available', 'time period', 'modest sized']","['imperative languages tested', 'test programs written', 'languages tested given', 'specification available course', 'software testing checking', 'tested given formal', 'tests information states', 'test process informal', 'requirements specifications specification', 'specification want automate', 'languages focusses test', 'ec language instruction', 'software engineering lecture', 'postconditions programs written', 'programs written functional', 'software satisfies given', 'exam consisting theory', 'understand produce formal', 'haskell information procedures', 'computer lab final', 'contact education desk', 'lightning introduction languages', 'number example programs', 'modelling reasoning systems', 'process need pre', 'uva nl se', 'english time period', 'action electronically available', 'number 5364sote6y credits', 'registration html schedule']","['requirements', 'stakeholder', 'syllabus', 'scrum', 'lectures', 'instruction', 'study', 'software', 'informatics', 'engineering', 'contact', 'practices', 'prototyping', 'project', 'planner', 'contextual', 'modeling', 'interviewing', 'esc', 'experience', 'law', '5257100servicedesk', 'uml', 'credits', 'nl', '1sem', 'define', 'ondatanose', 'shortcomings', 'dekkers']","['requirements engineering', 'software engineering', 'course planner', 'knowledge requirement', 'understand stakeholder', 'engineering lecture', 'language instruction', 'scrum prototyping', 'lecturer contact', 'needs experience', 'contextual design', 'information procedures', 'project specific', 'study literature', 'techniques uml', 'understanding subject', 'master software', 'course understand', 'esc science', 'learn data', 'use cases', 'slow syllabus', 'sem sem', '5257100servicedesk esc', 'catalogue number', 'uva nl', 'law philosophy', 'fnwiscience park', 'adequately define', 'users problem']","['software engineering lecture', 'understand stakeholder needs', 'course planner sem', 'requirements methods techniques', 'scrum prototyping interviewing', 'transfer course understand', 'informatics lecturer contact', 'engineering like contextual', 'knowledge knowledge requirement', 'ec language instruction', 'course registration html', 'study literature law', 'life requirements project', 'better understanding subject', 'ordinator contact education', 'uml diagrams software', 'needs experience shows', 'nl success software', 'learn data driven', 'students design experiment', 'esc science uva', '904b1020 5257100servicedesk esc', 'fast slow syllabus', 'use cases furthermore', 'proper interpretation analysis', 'procedures athttp www', 'philosophy cognitive science', 'desk fnwiscience park', 'english time period', 'users problem incomplete']","['study', 'requirements', 'instruction', 'lecturer', 'tutor', 'informatics', 'seminar', 'thesis', 'graduation', 'preparation', 'planner', 'skills', 'language', 'engineering', 'ideas', 'registration', 'fnwiscience', 'publications', 'uva', 'catalogue', 'materials', 'contact', 'credits', 'sem', 'schedule', 'pass', 'sessions', 'ordinator', 'add', 'athttp']","['language instruction', 'course registration', 'study materials', 'informatics lecturer', 'schedule course', 'self study', 'planning scientific', 'project tutor', 'seminar study', 'students information', 'learn skills', 'graduation project', 'contact education', 'preparation discuss', 'esc science', 'publications learn', 'thesis supervision', 'text knowledge', 'entry requirements', 'software engineering', 'need theory', 'uva nl', 'procedures athttp', '5364prms6y credits', 'getting approval', 'defined themes', '5257100servicedesk esc', 'se az', 'blackboard page', 'oprescu ordinator']","['materials available course', 'add course planner', 'ec language instruction', 'teaching skills needed', 'seminar study materials', 'student pass course', 'preparation discuss ideas', 'students information procedures', 'informatics lecturer dr', 'course published ondatanose', 'education desk fnwiscience', 'objective course teaching', 'self study presentation', 'getting approval lecturer', 'english entry requirements', 'project planning scientific', 'need theory analysis', 'analysis graduation choose', 'publications learn build', 'summary skills paper', 'sem sem college', 'reading writing scientific', 'define project tutor', 'sessions learn skills', 'text knowledge current', 'uva nl master', 'blackboard page study', '5257100servicedesk esc science', 'requirements time time', 'number defined themes']","['scrum', 'study', 'lecture', 'programming', 'engineering', 'developing', 'requirements', 'instruction', 'informatics', 'competences', 'improve', 'methods', 'language', 'assess', 'motivation', 'organization', 'plans', 'failed', 'tqm', 'come', 'crucial', 'rup', 'paradigms', 'kaizen', 'esc', 'cmmi', '904b1020', 'ordinator', 'deliverables', 'ondatanose']","['software engineering', 'engineering lecture', 'performance developing', 'failure study', 'language instruction', 'learn effective', 'projects learn', 'learn organizational', 'rup scrum', 'lecturer contact', 'item course', 'information procedures', 'school informatics', 'seminar literature', 'motivation competences', 'planner sem', 'understand method', 'reading tests', 'nl master', 'student uva', 'tqm kaizen', 'come assess', 'desk fnwiscience', 'practices apply', 'set requirements', 'understand reasons', 'role culture', 'mechanisms quality', '5257100servicedesk esc', 'use situational']","['software engineering lecture', 'project failure study', 'course planner sem', 'language instruction english', 'rup scrum successful', 'understand big software', '000 software engineers', 'engineer team organization', 'informatics lecturer contact', 'knowledge software methods', 'organization learn effective', 'scrum xp software', 'learn motivation competences', 'performance developing large', 'tqm kaizen examine', 'come assess method', 'student uva nl', 'look learn quality', 'test experience working', 'nl course come', 'paradigms role planning', 'work set requirements', 'able understand reasons', 'procedures athttp www', '5257100servicedesk esc science', 'coordinate 000 software', 'use situational fit', 'social sciences notably', 'literature andy oram', 'different levels individual']","['programming', 'compiler', 'lectures', 'syllabus', 'instruction', 'dsls', 'engineering', 'parsing', 'frameworks', 'assessment', 'sem', 'debugging', 'implementation', 'catalogue', 'english', '5364soco6y', 'uva', 'contact', 'domain', 'nl', 'hierarchy', 'aspects', 'course', 'credits', 'mde', 'graduate', 'session', 'crista', 'bring', 'integration']","['software language', 'java course', 'code generation', 'instruction english', 'course catalogue', 'mastery programming', 'theory compiler', 'methods lecture', 'discussion code', 'seminar computer', 'lecturer contact', 'dsls model', 'engineering mde', 'planner sem', 'student uva', 'engineering project', 'dry code', 'design contract', 'nl se', 'integration code', 'implement domain', 'debugging detailed', 'aspects parsing', 'unit testing', '5257100servicedesk esc', 'readability modularity', 'credits ec', 'feedback meeting', 'solid principles', 'procedures athttp']","['software language engineering', 'code generation course', 'languages java course', 'ec language instruction', 'engineering add course', 'lecture seminar computer', 'specific language dsl', 'programming styles syllabus', 'course catalogue number', 'nl course focuses', 'construction methods lecture', 'students implement domain', 'objectives practical course', 'engineering mde compiler', 'covers programming implementation', 'graduate school informatics', 'dsls model driven', 'discussion code reviewed', 'uva nl master', 'subjects design contract', 'reflect aspects code', 'design unit testing', '5257100servicedesk esc science', 'complete exam based', 'device byod course', 'training supervision feedback', 'abstraction modularity hierarchy', 'sem sem dr', 'solid principles data', 'information procedures athttp']","['courses', 'semester', 'requirements', 'study', 'instruction', 'lecturer', 'procedures', 'schedule', 'program', 'masterproject', 'planner', 'engineering', 'registration', 'supervision', 'thesis', 'informatics', 'credits', 'esc', 'catalogue', 'english', 'symposium', '1sem', 'proposed', 'session', 'phase', 'fnwiscience', 'available', '18', '5257100servicedesk', 'athttp']","['course preparation', 'requirements time', 'instruction english', 'phase lecturer', 'semester block', 'study presentation', 'informatics lecturer', 'time students', 'tutor available', 'planner sem', 'masterproject software', 'contact education', 'preparation phase', 'project plan', 'ec language', 'esc science', 'engineering acquiring', 'graduate school', 'credits 18', 'desk fnwiscience', 'program passed', 'procedures athttp', 'available weekly', 'reported thesis', 'catalogue number', 'uva nl', 'literature survey', '1sem 2see', 'session order', 'working independently']","['course preparation masterproject', 'preparation phase lecturer', 'students courses semester', 'schedule course published', 'ec language instruction', 'item course registration', 'tutor project plan', 'engineering add course', 'time research preparation', 'program passed course', 'entry requirements time', 'plan preparation phase', 'informatics lecturer contact', 'education desk fnwiscience', 'discussion time students', 'sem college graduate', 'nl master software', 'ordinator contact education', 'software engineering research', 'self study presentation', 'work month time', 'period sem 1sem', '5257100servicedesk esc science', 'registration html schedule', 'supervision feedback meeting', 'work reported thesis', 'uva nl servicedesk', 'information procedures athttp', 'given defense session', 'number 5364mas18y credits']","['programming', 'courses', 'syllabus', 'assignments', 'student', 'tools', 'informatics', 'instruction', 'rascal', 'workbench', 'ruby', 'assessments', 'parsing', 'visualisations', 'lab', 'english', 'refactoring', 'repositories', 'mpl', 'annotated', 'php', 'oral', 'uva', 'esc', 'insight', 'online', '1sem', 'exit', 'integral', '5257100servicedesk']","['programming language', 'construct software', 'tools academic', 'insight software', 'sessions course', 'mining software', 'instruction english', 'software metrics', 'informatics lecturer', 'supported introductory', 'education desk', 'use rascal', 'syllabus reader', 'assignments assessed', 'permits software', 'planner sem', 'php ruby', 'qualification graduate', 'objective learn', 'mpl org', 'repositories refactoring', 'workbench meta', 'parsing asts', 'day lab', 'students dive', 'changing requirements', 'visualisations time', 'understanding appreciation', 'nl exit', '5257100servicedesk esc']","['rascal programming language', 'software new students', 'software analyses software', 'skills programming languages', 'courses interactive lab', 'lectures theory software', 'obtain insight software', 'workbench meta programming', 'building tools academic', 'paper sessions course', 'ec language instruction', 'software maintenance software', 'nl master software', 'beginning course supported', 'code analysis good', 'skills syllabus reader', 'software visualisations time', 'informatics lecturer van', 'papers software evolution', 'mpl org student', 'online test assess', 'large open source', 'planner sem sem', 'java php ruby', 'format focused practical', 'exit qualification graduate', 'construction parsing asts', 'acquire understanding appreciation', 'changing requirements objectives', 'bi weekly hour']","['vunet', 'lecturer', 'catalogue', 'enrollment', 'instruction', 'studenten', 'sem', 'informatics', 'contact', 'ordinator', 'credits', 'language', 'ec', 'consulthttp', 'contents', 'nl', 'uva', 'amsterdam', 'fnwiscience', 'associate', '52848sar6y', 'planner', 'www', 'desk', 'lago', 'course', 'index', 'studiegids', '2see', 'recent']","['vu university', 'course catalogue', 'course information', 'course code', 'language instruction', 'university amsterdam', 'sem college', 'ec language', 'add course', 'asp course', 'education desk', 'contact education', 'informatics lecturer', 'catalogue number', 'credits ec', 'studenten studiegids', 'lago ordinator', 'esc science', 'x_400170 enrollment', 'sem 1sem', 'uva nl', 'viahttp vunet', 'consulthttp www', 'period college', 'associate prof', '5257100servicedesk esc', 'nl recent', 'english time', 'software engineering', 'fnwiscience park']","['vu course code', 'vu university amsterdam', 'vu nl course', 'course catalogue number', 'offered vu university', 'course information consulthttp', 'contact education desk', 'course planner sem', 'university amsterdam alsohttp', 'nl course offered', 'vu x_400170 enrollment', 'www vu nl', 'language instruction english', 'recent contents course', 'enrollment viahttp vunet', 'informatics lecturer associate', 'sem associate prof', 'index asp course', 'nl nl studenten', '52848sar6y credits ec', 'studenten studiegids registration', 'lago ordinator contact', 'esc science uva', 'nl studiegids index', 'nl master software', 'time period sem', '904b1020 5257100servicedesk esc', 'fnwiscience park 904b1020', 'software engineering add', 'college graduate graduate']",[],[],[],[],[],[],[],[],[],[],[],[]
2018-2019,-,-,"Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of The success of a software system depends on the proper interpretation and analysis of stakeholder needs. Experience shows that it is extremely difficult to adequately define and specify a system. The perception of stakeholders and users of the problem is often incomplete, inaccurate and changes over time. Knowledge is hard to express and to transfer. During this course you will understand why stakeholder needs are so hard to express, capture and understand. You will also learn the shortcomings of best practices like scrum, prototyping, interviewing and use cases. Furthermore you will learn about data-driven methods for requirements engineering like Contextual Design. Requirements methods and techniques will be discussed during the lectures. If possible, you will do a real life requirements project. Next to specific RE literature we will also study literature from law, philosophy and cognitive science to get a better understanding of the subject. Finally students will design and do an experiment to show the inherent weakness of requirements best practices, like the use of prototyping for requirement validation. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. Reading tests, paper and lab work. Recommended prior knowledge: Knowledge of requirement engineering, for example books of Sommerville, Robertson, van Lamsweerde, Wiegers or Pohl. 'Modeling techniques', e.g. UML diagrams to describe software behaviour. Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering Lecture Seminar Literature:D. Kahneman 'Thinking, fast and slow'. D. Kahneman 'Thinking, fast and slow'. Syllabus:  D. Kahneman 'Thinking, fast and slow'. ","Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For both part-time and full-time students. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of The objective of the course is teaching the skills needed to successfully complete the Master’s (graduation) project. In summary these skills are: During paper sessions you learn skills to find, read and assess relevant scientific publications. You will also learn to build argumentation structures you need for your theory and analysis. For your graduation you can choose from a number of defined themes. In exceptional cases it is possible to define a project yourself. A tutor will help you during the preparation. You will also discuss your ideas with other students. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. The student can pass the course by getting approval by a lecturer (tutor) for two deliverables: Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For both part-time and full-time students. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering Problem analysis, Scientific literature survey, Theory building, Hypothesizing, Structuring research and validation, Project planning, Scientific reporting. Self-study Presentation/symposium Working independently on e.g. a project or thesis Supervision/feedback meeting Seminar Other:Study materials are made available through the course’s Canvas page. Study materials are made available through the course’s Canvas page. Study materials are made available through the course’s Canvas page. An interest in reading and writing scientific literature. Affinity with reading and writing English text. Knowledge of current challenges and results in software engineering. Plan for the Masters project, Survey of related literature.","Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of During this course you will come to understand why big software engineering projects are prone to failure. You will come to understand how performance is influenced at different levels: that of the individual software engineer, the team and the whole organization. You will learn about motivation, competences, and the crucial role of culture. Also you will learn about organizational paradigms and control mechanisms, quality paradigms, and the role of planning and design in a world that is volatile and of which a lot is unknown. As software engineering is a special kind of organization, you will also learn how effective our best practices are. With this knowledge you will be able to understand why a method like RUP or Scrum is sometimes successful and sometimes not. You will also come to assess such a method and better be able to use it in a situational fit way to improve overall project performance. Developing large scale software systems is challenging for many reasons. We work from a set of requirements that are ambiguous and incomplete, may be invalid and are subject to change. It’s hard to determine the quality and doneness of (intermediate) deliverables like designs, plans and code. We have to coordinate up to 1.000 software engineers with imperfect mechanisms for separation of concerns. To be able to understand reasons for software project failure we study failed projects. We learn about organizational control mechanisms and look at theory from social sciences notably motivation, empowerment, effective teams and coordination strategies. Last but not least we look at what we can learn from the quality community: Lean, CMMi, TQM, Kaizen. We will also examine evidence about the practices we apply in software engineering, like test first, pair programming, software architecture. Knowledge of software methods like Rup, Scrum, Xp and software practices like pair programming, test first. Experience with working in big projects. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. Reading tests, essay and lab work. Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering Lecture Seminar Literature:Andy Oram, Greg Wilson'Making Software: What Really Works, and Why We Believe It'. Andy Oram, Greg Wilson'Making Software: What Really Works, and Why We Believe It'. Andy Oram, Greg Wilson'Making Software: What Really Works, and Why We Believe It'.",-,"Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Carry out the research as proposed by the plan you made in the preparation phase. A lecturer (tutor) will be available for weekly feedback and discussion. Part time students will need to free time to work at least two month full time on their research. Preparation Master Project The schedule for this course is published onDataNose. Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering Acquiring the ability to do research by designing, executing and reporting on a project in the area of software engineering research, Adding knowledge or gathering new evidence in the field of software engineering. Self-study Presentation/symposium Working independently on e.g. a project or thesis Supervision/feedback meeting Literature:Scientific literature Scientific literature Scientific literature Quality of the work as reported on in the thesis, Quality of the presentation given during the defense session. In order to start the Master’s project you need to have approval from a lecturer (tutor) on your project plan and related literature survey.","Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Exit qualification: “The graduate masters the methods and techniques needed to analyze an existing software system and to enable it to evolve given changing requirements.” Our objectives are three-fold: The course ties in closely with paper writing sessions where the objectives are to learn from academic literature, to develop curiosity, and to improve argumentation and writing skills. This course is designed around lab sessions in which we study real and large (open-source) software systems, written in languages like C, Java, PHP or Ruby. We use Rascal -a programming language workbench, or meta programming language- to apply and build software metrics, software analyses, software visualisations and (if time permits) software transformations. Seehttp://www.rascal-mpl.org.The student is supported with introductory courses and interactive lab sessions while learning this new language in the beginning. The course is supported by a series of lectures on the theory of software maintenance and evolution, guest lecturers from field experts, and a guided study of a number of research papers about maintenance, reverse engineering, reengineering and renovation. Example topics are clone detection, mining software repositories and refactoring. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. This course typically uses the following assessments, that will be detailed at the start of the course: The grade weights are indicative and will be detailed at the start of the course. Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) R.A. van Rozen (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   R.A. van Rozen (co-ordinator) Master's Software Engineering The first objective is to acquire an understanding and appreciation of the challenges posed by software maintenance and software evolution. The second objective is to learn about quality of software and source code and how it affects software maintenance and evolution. The final objective is to be able to select and also construct software analysis and software transformation tools to help obtain insight in software quality and to help improve software quality. Advanced programming skills in several programming languages. Knowledge of compiler construction (parsing, ASTs, basic code analysis, etc.). Good (academic) English reading and writing skills. Lecture Laptop seminar Computer lab session/practical training Self-study Syllabus:Reader consisting of selected papers on software evolution Reader consisting of selected papers on software evolution Other:http://www.rascal-mpl.orgPotentially other (academic) sources http://www.rascal-mpl.org Potentially other (academic) sources Reader consisting of selected papers on software evolution http://www.rascal-mpl.org Potentially other (academic) sources online test to assess basic skills practical lab assignments, assessed by demonstration and oral exam (2/3 of final grade) writing exercise(s): essay and/or annotated bilbiography (1/3 final grade)",-,"Course catalogue number 5364SSVT6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of At the end of the course, the student is Software specification, verification, and testing entail checking whether a given software system satisfies given requirements and/or specifications. Without a specification, it is impossible to state what a piece of software should do, and there is no reasonable way to set up the test process. An informal specification is not enough. If we aim to automate the test process we need pre-given information about: Programs written in functional or imperative languages can be tested, given a formal specification, by means of a random test generator. This test method will be illustrated for a number of example programs that are written in Haskell. The course assumes basic familiarity with this language and focusses on how to test programs written in either functional or imperative style, and how to use tools for automated test generation. Basic familiarity with functional programming in Haskell. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. Course examination consists of weekly assignments plus a final exam both the theory and practical parts. Final grade determined for 40% by the weekly assignment results and for 60% by the result on the final exam. Course catalogue number 5364SSVT6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering able to understand and produce formal specifications of modest-sized samples of software, able to use formal specifications to generate relevant tests for the software Lecture Seminar Laptop seminar Self-study Literature:Graham Hutton, 'Programming in Haskell', Cambridge University Press 2016 (Second Edition).Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,'Logic in Action', electronically available fromhttp://www.logicinaction.orgRecommended background reading: Kees Doets and Jan van Eijck, 'The Haskell Road to Logic, Maths and Programming'. College Publications, London 2012. This book can be ordered (at a discount) with the lecturer. Graham Hutton, 'Programming in Haskell', Cambridge University Press 2016 (Second Edition). Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,'Logic in Action', electronically available fromhttp://www.logicinaction.org Recommended background reading: Kees Doets and Jan van Eijck, 'The Haskell Road to Logic, Maths and Programming'. College Publications, London 2012. This book can be ordered (at a discount) with the lecturer. Graham Hutton, 'Programming in Haskell', Cambridge University Press 2016 (Second Edition). Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,'Logic in Action', electronically available fromhttp://www.logicinaction.org Recommended background reading: Kees Doets and Jan van Eijck, 'The Haskell Road to Logic, Maths and Programming'. College Publications, London 2012. This book can be ordered (at a discount) with the lecturer. which tests are relevant --> this information states the preconditions of the code what the outcomes of the relevant tests should be --> this information states the postconditions of the code.","Course catalogue number 5364EMSS6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of The overall course objective is the design, development and verification of embedded software and systems: This course targets the software design and programming of embedded systems, i.e., computing systems which are not immediately recognized as such. Examples include mobile phones, TV sets, consumer electronics, Internet-of-Things, but also airplanes, cars, and satellites. Designing such embedded systems differs fundamentally from traditional design methods for general-purpose computer software: Embedded systems are subject to specific requirements, especially in terms of efficiency (size, weight and power) and costs. At the same time, embedded systems are subject to increased reliability constraints. The go-to solution to resolve system errors for general-purpose computing, i.e., a complete system restart, is typically precluded in an embedded system. The system must always be available and must always reliably produce correct results. To further complicate matters, the correctness of most embedded systems is not just defined by the correct result of a computation, but by the correct result and the correct timing. Imagine an air-bag controller, which must inflate the air-bag in time before the driver’s head hits the steering wheel, or a flight control system, which must correct turbulences, before the airplane becomes instable. Concerning less critical cases, we have for instance media players where the playback is delayed or the quality is degraded. In this course, we will provide an introduction to the domain of embedded computer systems, and teach common design and development methods of embedded software and systems. The course covers the following topics: More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. Course catalogue number 5364EMSS6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. ing. S.J. Altmeyer (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. ing. S.J. Altmeyer (co-ordinator) Master's Software Engineering The students know the characteristics of embedded software and systems and how to accommodate these characteristics during the design-phase. The students are able to specify and develop embedded software and systems for a given embedded architecture. Characteristics and constraints of embedded systems Embedded system design flow Specification of the functional and non-functional behavior of an embedded system Selection and configuration of suitable embedded architectures Analysis of non-functional behavior of embedded systems Correctness verification of (non-)functional properties of embedded systems C-Knowledge (preferred, not mandatory) Computer Organization (preferred, not mandatory) Lecture Self-study Working independently on e.g. a project or thesis Laptop seminar Practical Project Assignments Examination","Course catalogue number 5364DCBS6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of DevOps is a modern software and applications development model that realises the continuous integration (CI), continuous deployment (CD) and continuous improvement of the services and applications that is deeply based on the cloud virtualisation, on demand services deployment and precision services monitoring currently available on the major cloud platforms. The course discusses the basic concepts of DevOps, including its philosophy, workflow, monitoring methods, and tools. Students will apply these concepts to understand how they can be best implemented to automate development, test, and release practices. Students will work in teams to apply DevOps model and tools to develop working applications and will use one of cloud and DevOps platforms. The following topics will be covered in the course: The course will also feature guest lectures from local cloud providers or DevOps companies. Knowledge of one of programming languages Java, C or Python and one of IDE platforms More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. The course assessment includes two parts: individual assignment (30%) and final project (70%, of which final report and code 40% and project development process 30%) Course catalogue number 5364DCBS6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dhr. Y. Demchenko (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dhr. Y. Demchenko (co-ordinator) Master's Software Engineering Graduates are familiar with the concept of DevOps and related technologies, their benefits for organisational IT infrastructure and services management; understand organisational aspects of DevOps, describe relation of DevOps to other technologies Graduates will understand how to build cloud based applications and use cloud automation tools in the DevOps process applied to a range of applications and software development scenarios/processes Graduates will understand functionalities offered by the popular DevOps and cloud automations tools such as Chef, Puppet, Ansible, SlipStream and have practical hands on experience with one of such tools Introduction DevOps, core concepts and models, Continuous Delivery (CD), Continuous Integration (CI), Continuous Deployment. Agile development, relation to Agile, Scrum, Lean, ITSM Cloud Computing architecture, service models, virtualisation, resources management and monitoring DevOps and software engineering on major cloud platforms: AWS, Microsoft Azure. Cloud powered applications deployment, accounts management Cloud automation tools and platforms: Chef, Puppet, Ansible, SlipStream Software delivery lifecycle in an agile DevOps organisation, QA in cloud based software development systems, software security and Security Development Lifecycle management (SDLM) DevOps applications architecture, configuration management, environment setups in AWS cloud using SlipStream platform Lecture Self-study Working independently on e.g. a project or thesis Laptop seminar Presentation/symposium",-,[],[],[],[],[],[],"['requirements', 'stakeholder', 'syllabus', 'scrum', 'lectures', 'instruction', 'study', 'software', 'informatics', 'engineering', 'contact', 'practices', 'prototyping', 'project', 'planner', 'contextual', 'modeling', 'interviewing', 'esc', 'experience', 'law', '5257100servicedesk', 'credits', 'nl', '1sem', 'define', 'ondatanose', 'shortcomings', 'periods', 'dekkers']","['requirements engineering', 'software engineering', 'course planner', 'knowledge requirement', 'understand stakeholder', 'engineering lecture', 'language instruction', 'scrum prototyping', 'lecturer contact', 'needs experience', 'contextual design', 'information procedures', 'project specific', 'study literature', 'techniques uml', 'understanding subject', 'master software', 'course understand', 'esc science', 'learn data', 'use cases', 'slow syllabus', 'sem sem', '5257100servicedesk esc', 'uva nl', 'law philosophy', 'registration periods', 'fnwiscience park', 'adequately define', 'users problem']","['software engineering lecture', 'understand stakeholder needs', 'course planner sem', 'requirements methods techniques', 'scrum prototyping interviewing', 'transfer course understand', 'informatics lecturer contact', 'engineering like contextual', 'knowledge knowledge requirement', 'ec language instruction', 'course registration html', 'study literature law', 'life requirements project', 'better understanding subject', 'ordinator contact education', 'uml diagrams software', 'needs experience shows', 'nl success software', 'learn data driven', 'students design experiment', 'esc science uva', 'syllabus kahneman thinking', 'procedures registration periods', '904b1020 5257100servicedesk esc', 'fast slow syllabus', 'use cases furthermore', 'proper interpretation analysis', 'desk fnwiscience park', 'extremely difficult adequately', 'users problem incomplete']","['requirements', 'study', 'instruction', 'informatics', 'lecturer', 'graduation', 'thesis', 'preparation', 'planner', 'registration', 'skills', 'language', 'catalogue', 'fnwiscience', 'engineering', 'publications', 'symposium', 'ideas', 'presentation', 'uva', 'contact', 'schedule', 'materials', 'esc', 'credits', 'pass', '1sem', 'ordinator', '5257100servicedesk', 'athttp']","['course registration', 'language instruction', 'informatics lecturer', 'schedule course', 'study materials', 'course teaching', 'planning scientific', 'project tutor', 'students information', 'help preparation', 'contact education', 'skills needed', 'graduation project', 'esc science', 'publications learn', 'thesis supervision', 'requirements time', 'text knowledge', 'athttp student', 'meeting seminar', 'software engineering', 'sessions learn', 'need theory', 'uva nl', '5364prms6y credits', 'defined themes', 'period sem', 'number defined', '904b1020 5257100servicedesk', 'oprescu ordinator']","['materials available course', 'course teaching skills', 'add course planner', 'ec language instruction', 'seminar study materials', 'student pass course', 'informatics lecturer dr', 'item course registration', 'students information procedures', 'education desk fnwiscience', 'course published ondatanose', 'preparation discuss ideas', 'project tutor help', 'learn skills read', 'self study presentation', 'html schedule course', 'theory analysis graduation', 'esc science uva', 'english entry requirements', 'getting approval lecturer', 'nl objective course', 'sem sem college', 'publications learn build', 'ordinator contact education', 'planning scientific reporting', 'software engineering plan', 'requirements time time', 'periods athttp student', 'needed successfully complete', 'number 5364prms6y credits']","['scrum', 'study', 'lecture', 'programming', 'engineering', 'developing', 'requirements', 'instruction', 'informatics', 'competences', 'improve', 'methods', 'language', 'assess', 'motivation', 'organization', 'plans', 'failed', 'tqm', 'come', 'rup', 'paradigms', 'kaizen', 'esc', 'cmmi', '904b1020', 'ordinator', 'deliverables', 'ondatanose', 'periods']","['software engineering', 'engineering lecture', 'performance developing', 'failure study', 'language instruction', 'learn effective', 'projects learn', 'learn organizational', 'rup scrum', 'lecturer contact', 'item course', 'information procedures', 'school informatics', 'seminar literature', 'motivation competences', 'planner sem', 'understand method', 'reading tests', 'nl master', 'student uva', 'tqm kaizen', 'come assess', 'desk fnwiscience', 'set requirements', 'understand reasons', 'role culture', 'mechanisms quality', '5257100servicedesk esc', 'use situational', 'periods athttp']","['software engineering lecture', 'project failure study', 'course planner sem', 'language instruction english', 'rup scrum successful', 'understand big software', 'engineer team organization', 'informatics lecturer contact', 'knowledge software methods', 'organization learn effective', 'scrum xp software', 'learn motivation competences', 'performance developing large', 'tqm kaizen examine', 'come assess method', 'student uva nl', 'look learn quality', 'test experience working', 'nl course come', 'paradigms role planning', 'work set requirements', 'information procedures registration', 'able understand reasons', '5257100servicedesk esc science', 'coordinate 000 software', 'use situational fit', 'social sciences notably', 'periods athttp student', 'literature andy oram', 'different levels individual']",[],[],[],"['courses', 'semester', 'requirements', 'instruction', 'study', 'lecturer', 'credits', 'masterproject', 'graduate', 'schedule', 'program', 'engineering', 'preparation', 'planner', 'informatics', 'entry', 'supervision', 'english', 'esc', 'thesis', 'catalogue', '1sem', 'available', 'session', 'proposed', '18', 'phase', 'fnwiscience', 'ordinator', '5257100servicedesk']","['courses semester', 'schedule course', 'requirements time', 'instruction english', 'add course', 'preparation masterproject', 'project schedule', 'ec language', 'phase lecturer', 'tutor available', 'study presentation', 'informatics lecturer', 'planner sem', 'time students', 'contact education', 'esc science', 'engineering add', '5364mas18y credits', 'thesis supervision', 'catalogue number', 'desk fnwiscience', 'program passed', 'graduate graduate', 'available weekly', 'reporting project', 'ordinator contact', '1sem 2see', 'field software', 'uva nl', 'session order']","['course preparation masterproject', 'courses semester block', 'instruction english entry', 'passed course preparation', 'course catalogue number', 'schedule course published', 'master project schedule', 'add course planner', 'contact education desk', 'entry requirements time', 'second semester passed', '18 ec language', 'phase lecturer tutor', 'graduate school informatics', 'sem college graduate', 'software engineering add', 'students need free', 'project plan related', 'need approval lecturer', 'discussion time students', 'engineering self study', 'esc science uva', 'period sem 1sem', 'work month time', 'number 5364mas18y credits', 'nl carry research', 'fnwiscience park 904b1020', 'session order start', 'dr oprescu ordinator', 'designing executing reporting']","['programming', 'courses', 'syllabus', 'assignments', 'student', 'tools', 'informatics', 'seminar', 'instruction', 'rascal', 'workbench', 'ruby', 'assessments', 'parsing', 'visualisations', 'lab', 'english', 'refactoring', 'repositories', 'mpl', 'annotated', 'php', 'oral', 'uva', 'esc', 'insight', 'online', '1sem', 'exit', '5257100servicedesk']","['programming language', 'software analyses', 'rascal programming', 'construct software', 'seminar computer', 'insight software', 'study syllabus', 'skills lecture', 'metrics software', 'supported introductory', 'papers software', 'course catalogue', 'interactive lab', 'academic english', 'assess basic', 'student uva', 'engineering reengineering', 'writing sessions', 'www rascal', 'php ruby', 'esc science', 'mpl org', 'workbench meta', 'parsing asts', 'changing requirements', 'period sem', 'annotated bilbiography', 'html schedule', 'nl exit', '5364soev6y credits']","['rascal programming language', 'software systems written', 'lectures theory software', 'advanced programming skills', 'metrics software analyses', 'obtain insight software', 'supported introductory courses', 'master software engineering', 'challenges posed software', 'ec language instruction', 'study syllabus reader', 'languages like java', 'graduate school informatics', 'computer lab session', 'basic code analysis', 'language workbench meta', 'mpl org student', 'objectives fold course', 'knowledge compiler construction', 'online test assess', 'time permits software', 'large open source', 'final grade writing', 'java php ruby', 'servicedesk esc science', 'research papers maintenance', 'transformation tools help', 'nl exit qualification', 'understanding appreciation challenges', 'sem van rozen']",[],[],[],"['testing', 'programming', 'haskell', 'specification', 'instruction', 'languages', 'study', 'automated', 'imperative', 'functional', 'generate', 'seminar', 'sem', 'grade', 'logicinaction', 'schedule', 'ordinator', 'registration', 'uva', 'fnwiscience', 'orgrecommended', 'postconditions', 'entail', 'cambridge', 'pre', '5257100servicedesk', '2012', 'periods', 'athttp', 'plus']","['test programs', 'languages tested', 'automate test', 'specification verification', 'language instruction', 'verification testing', 'programming college', 'software lecture', 'requirements specifications', 'haskell information', 'course registration', 'produce formal', 'functional imperative', 'examination consists', 'entail checking', 'software satisfies', 'code outcomes', 'tools automated', 'generation basic', 'hutton programming', 'planner sem', 'process need', 'postconditions code', 'weekly assignments', 'www logicinaction', 'desk fnwiscience', 'uva nl', 'number 5364ssvt6y', 'oprescu ordinator', 'periods athttp']","['specification verification testing', 'test programs written', 'tests software lecture', 'imperative languages tested', 'student software specification', 'test generation basic', 'written haskell course', 'automate test process', 'test process informal', 'tests information states', 'programs written functional', 'checking given software', 'ec language instruction', 'course assumes basic', 'language focusses test', 'given information programs', 'satisfies given requirements', 'sem sem college', 'education desk fnwiscience', 'final exam theory', 'understand produce formal', 'code outcomes relevant', 'nl master software', 'www logicinaction orgrecommended', 'process need pre', 'uva nl end', 'catalogue number 5364ssvt6y', 'registration periods athttp', 'english time period', 'generation basic familiarity']","['embedded', 'specification', 'systems', 'programming', 'electronics', 'reliability', 'errors', 'satellites', 'instruction', 'laptop', 'defined', 'restart', 'instance', 'esc', 'servicedesk', 'resolve', 'terms', 'thesis', 'purpose', 'playback', 'seminar', 'fnwiscience', 'delayed', 'controller', '5364emss6y', 'reliably', 'athttp', 'ordinator', 'covers', 'produce']","['systems embedded', 'systems course', 'methods embedded', 'resolve errors', 'reliability constraints', 'software engineering', 'requirements especially', 'mandatory computer', 'ec language', 'internet things', 'specification functional', 'verification embedded', 'laptop seminar', 'architecture characteristics', 'servicedesk esc', 'general purpose', 'restart typically', 'consumer electronics', 'instance media', 'computing complete', 'flight control', 'desk fnwiscience', 'cars satellites', 'course catalogue', 'able specify', 'time driver', 'include mobile', 'number 5364emss6y', 'playback delayed', 'html schedule']","['embedded systems subject', 'correctness embedded systems', 'methods embedded software', 'software systems accommodate', 'general purpose computing', 'resolve errors general', 'course targets software', 'development verification embedded', 'systems immediately recognized', 'increased reliability constraints', 'computing complete restart', 'requirements especially terms', 'precluded embedded available', 'costs time embedded', 'project thesis laptop', '5257100servicedesk esc science', 'examples include mobile', 'language instruction english', 'consumer electronics internet', 'characteristics design phase', 'airplanes cars satellites', 'specification functional non', 'desk fnwiscience park', 'critical cases instance', 'time period sem', 'altmeyer ordinator master', 'players playback delayed', 'size weight power', 'driver head hits', 'bag controller inflate']","['devops', 'deployment', 'informatics', 'cloud', 'virtualisation', 'ansible', 'sdlm', 'automate', 'monitoring', 'esc', 'lectures', 'infrastructure', 'graduates', 'processes', 'delivery', 'assessment', 'setups', 'scrum', 'ci', 'languages', 'concept', 'related', 'desk', 'cd', 'integration', 'aspects', 'lifecycle', '5257100servicedesk', 'slipstream', 'periods']","['devops software', 'course registration', 'informatics lecturer', 'platform lecture', 'virtualisation resources', 'cloud using', 'processes graduates', 'development test', 'tools students', 'management sdlm', 'workflow monitoring', 'infrastructure services', 'environment setups', 'engineering add', 'deployment precision', 'servicedesk esc', 'planner sem', 'ec language', 'integration ci', 'implemented automate', 'desk fnwiscience', 'delivery cd', 'lifecycle agile', 'core concepts', 'number 5364dcbs6y', 'java python', 'slipstream platform', 'uva nl', 'feature guest', '30 final']","['devops technologies graduates', 'basic concepts devops', 'use cloud devops', 'management monitoring devops', 'lectures local cloud', 'servicedesk esc science', 'development process 30', 'course feature guest', 'engineering add course', 'based software development', 'platforms course discusses', 'informatics lecturer dhr', 'models virtualisation resources', 'course catalogue number', 'lifecycle management sdlm', 'automation tools platforms', 'aws cloud using', 'precision services monitoring', 'ansible slipstream software', 'planner sem sem', 'delivery cd continuous', 'test release practices', 'powered applications deployment', 'students work teams', 'instruction english time', 'programming languages java', 'project thesis laptop', 'uva nl se', 'desk fnwiscience park', 'realises continuous integration']",[],[],[]
2019-2020,-,-,"Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of This highly interactive course explores requirement engineering (RE) approaches and pitfalls by discussing real life cases. Supplementary lectures will go into truth finding, sense making, best practices, methods and will provide an abstract model for RE. Next to specific RE literature you will study literature from philosophy and psychology to get a better understanding of the domain. In the first weeks you will gather knowledge to construct requirements for a small project. You will get intensive feedback about your knowledge acquisition skills. This first hand experience will enable you to better appreciate the complexity and theory. Finally you will design and run an experiment to show the inherent sensitivity of requirements best practices to bias. By default we focus on the use of prototyping/sprint demos for validation. Knowledge of requirement engineering, for example books of Sommerville, Robertson, van Lamsweerde, Wiegers or Pohl. 'Modeling techniques', e.g. UML diagrams to describe software behaviour. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. Reading tests, paper and lab work. Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering You will understand why stakeholder needs are so hard to express, capture and understand. You will learn the shortcomings in the (agile) methods and best practices that are widely used. Furthermore you will learn about data-driven methods and the benefits of working with scenarios. Lecture Seminar Literature:D. Kahneman 'Thinking, fast and slow'. D. Kahneman 'Thinking, fast and slow'. Syllabus:  D. Kahneman 'Thinking, fast and slow'. ","Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For both part-time and full-time students. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of During paper sessions you learn skills to find, read and assess relevant scientific publications. You will also learn to build argumentation structures you need for your theory and analysis. For your graduation you can choose from a number of defined themes. In exceptional cases it is possible to define a project yourself. A tutor will help you during the preparation. You will also discuss your ideas with other students. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. The student can pass the course by getting approval by a lecturer (tutor) for two deliverables: Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For both part-time and full-time students. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering Problem analysis, Scientific literature survey, Theory building, Hypothesizing, Structuring research and validation, Project planning, Scientific reporting. Self-study Presentation/symposium Working independently on e.g. a project or thesis Supervision/feedback meeting Seminar Other:Study materials are made available through the course’s Canvas page. Study materials are made available through the course’s Canvas page. Study materials are made available through the course’s Canvas page. An interest in reading and writing scientific literature. Affinity with reading and writing English text. Knowledge of current challenges and results in software engineering. Plan for the Masters project, Survey of related literature.","Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Developing large scale software systems is challenging for many reasons. Our understanding of what needs to be done is at best incomplete, at points invalid, and subject to change. It’s hard to determine the adequacy of requirements, plans, designs and increments. The biggest projects require collaboration of thousands of people, with imperfect mechanisms for division of work, coordination, assessment of quality and assessment of progress. The code that is produced restricts the solution space for what still needs to be developed, and at worst becomes too complex to add the features that we need. The course setup is as follows: Knowledge of software methods like Rup, Scrum, Xp and software practices like pair programming, test first. Experience with working in big projects. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. Reading tests, essays, exams. Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering Insight in methods and best practices in the field of Software Engineering. Understand what problems these try to solve. Understand that methods and best practices are merely a means to an end. Insight into complexity of developing large software systems. Understanding what agility is, and how this is related to process and other factors. Understanding what planning entails, and how it contributes to a successful outcome. Insight in individual, team and organizational performance. Insight in organizational patterns to decompose and distribute tasks and empower engineers while ensuring their combined work leads to a successful outcome. First you will learn about software development methods. This is put in a historical overview spanning organizational science in general. Second you will focus on the different aspects of planning: organizing, sizing, architecture. Different views on planning explain to some extent differences between methods. Third you will focus on individual, group and organizational performance. What is a good software engineer? What is at the heart of good performing groups and organizations? You will get insight in theory of empowerment: what is the relationship between empowerment and behaviour? You will come to understand how situational this relationship is. Throughout the course you will examine an infamous failed case. This will give you insight in complexity, but also helps you to test the fitness of the methods and best practices you studied. Throughout the course guest lecturers from big software companies will tell you how these are organized. You will extract organizational patterns and see how  companies / programs compare. Companies that presented in the past years include Spotify, Netflix, MicroSoft, Amazon, Booking.com, Adyen, Bol.com, Philips, ASML and Dutch Government about programs like DSO, BRP and SZW-MR. Throughout the course you will read and study scientific literature about methods and best practices, in part categorized in sources like Making Software, and Leprechauns. Lecture Seminar Literature:Andy Oram, Greg Wilson 'Making Software: What Really Works, and Why We Believe It'. Andy Oram, Greg Wilson 'Making Software: What Really Works, and Why We Believe It'. Andy Oram, Greg Wilson 'Making Software: What Really Works, and Why We Believe It'.",-,"Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Carry out the research as proposed by the plan you made in the preparation phase. A lecturer (tutor) will be available for weekly feedback and discussion. Part time students will need to free time to work at least two months full time on their research. Preparation Master Project The schedule for this course is published onDataNose. The Master Project Software Engineering is assessed along three dimensions: Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering Acquiring the ability to do research by designing, executing and reporting on a project in the area of software engineering research, Adding knowledge or gathering new evidence in the field of software engineering. Self-study Presentation/symposium Working independently on e.g. a project or thesis Supervision/feedback meeting Literature:Scientific literature Scientific literature Scientific literature research carried out, written thesis, presentation and discussion during the defense session. In order to start the Master’s project you need to have approval from a lecturer (tutor) on your project plan and related literature survey.","Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of This course is designed around lab sessions in which we study real and large (open-source) software systems, written in languages like C, Java, PHP or Ruby. We use Rascal -a programming language workbench, or meta programming language- to apply and build software metrics, software analyses, software visualisations and (if time permits) software transformations. Seehttp://www.rascal-mpl.org.The student is supported with introductory courses and interactive lab sessions while learning this new language in the beginning. The course is supported by a series of lectures on the theory of software maintenance and evolution, guest lecturers from field experts, and a guided study of a number of research papers about maintenance, reverse engineering, reengineering and renovation. Example topics are clone detection, mining software repositories and refactoring. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. This course typically uses the following assessments, that will be detailed at the start of the course: The grade weights are indicative and will be detailed at the start of the course. The course reader and assignments will be made available on Canvas. Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) R.A. van Rozen (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   R.A. van Rozen (co-ordinator) Master's Software Engineering The first objective is to acquire an understanding and appreciation of the challenges posed by software maintenance and software evolution. The second objective is to learn about quality of software and source code and how it affects software maintenance and evolution. The final objective is to be able to select and also construct software analysis and software transformation tools to help obtain insight in software quality and to help improve software quality. Advanced programming skills in several programming languages. Knowledge of compiler construction (parsing, ASTs, basic code analysis, etc.). Good (academic) English reading and writing skills. Lecture Laptop seminar Computer lab session/practical training Self-study Syllabus:Reader consisting of selected papers on software evolution Reader consisting of selected papers on software evolution Other:http://www.rascal-mpl.orgPotentially other (academic) sources http://www.rascal-mpl.org Potentially other (academic) sources Reader consisting of selected papers on software evolution http://www.rascal-mpl.org Potentially other (academic) sources practical lab assignments, assessed by demonstration and oral exam (2/3 of final grade) writing exercise(s): essay and/or annotated bilbiography (1/3 final grade)",-,"Course catalogue number 5364SSVT6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Software specification, verification, and testing entail checking whether a given software system satisfies given requirements and/or specifications. Without a specification, it is impossible to state what a piece of software should do, and there is no reasonable way to set up the test process. An informal specification is not enough. If we aim to automate the test process we need pre-given information about: Programs written in functional or imperative languages can be tested, given a formal specification, by means of a random test generator. This test method will be illustrated for a number of example programs that are written in Haskell. The course assumes basic familiarity with this language and focusses on how to test programs written in either functional or imperative style, and how to use tools for automated test generation. Basic familiarity with functional programming in Haskell. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. Course examination consists of weekly assignments plus a final exam both the theory and practical parts. Final grade determined for 40% by the weekly assignment results and for 60% by the result on the final exam. Course catalogue number 5364SSVT6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering able to understand and produce formal specifications of modest-sized samples of software, able to use formal specifications to generate relevant tests for the software Lecture Seminar Laptop seminar Self-study Literature:Graham Hutton, 'Programming in Haskell', Cambridge University Press 2016 (Second Edition).Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,'Logic in Action', electronically available fromhttp://www.logicinaction.orgKees Doets and Jan van Eijck, 'The Haskell Road to Logic, Maths and Programming'. College Publications, London 2012. Graham Hutton, 'Programming in Haskell', Cambridge University Press 2016 (Second Edition). Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,'Logic in Action', electronically available fromhttp://www.logicinaction.org Kees Doets and Jan van Eijck, 'The Haskell Road to Logic, Maths and Programming'. College Publications, London 2012. Graham Hutton, 'Programming in Haskell', Cambridge University Press 2016 (Second Edition). Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,'Logic in Action', electronically available fromhttp://www.logicinaction.org Kees Doets and Jan van Eijck, 'The Haskell Road to Logic, Maths and Programming'. College Publications, London 2012. which tests are relevant --> this information states the preconditions of the code what the outcomes of the relevant tests should be --> this information states the postconditions of the code.","Course catalogue number 5364EMSS6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of This course targets the software design and programming of embedded systems, i.e., computing systems which are not immediately recognized as such. Examples include mobile phones, TV sets, consumer electronics, Internet-of-Things, but also airplanes, cars, and satellites. Designing such embedded systems differs fundamentally from traditional design methods for general-purpose computer software: Embedded systems are subject to specific requirements, especially in terms of efficiency (size, weight and power) and costs. At the same time, embedded systems are subject to increased reliability constraints. The go-to solution to resolve system errors for general-purpose computing, i.e., a complete system restart, is typically precluded in an embedded system. The system must always be available and must always reliably produce correct results. To further complicate matters, the correctness of most embedded systems is not just defined by the correct result of a computation, but by the correct result and the correct timing. Imagine an air-bag controller, which must inflate the air-bag in time before the driver’s head hits the steering wheel, or a flight control system, which must correct turbulences, before the airplane becomes instable. Concerning less critical cases, we have for instance media players where the playback is delayed or the quality is degraded. In this course, we will provide an introduction to the domain of embedded computer systems, and teach common design and development methods of embedded software and systems. The course covers the following topics: More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. Course catalogue number 5364EMSS6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.D. Pimentel (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. A.D. Pimentel (co-ordinator) Master's Software Engineering The students know the characteristics of embedded software and systems and how to accommodate these characteristics during the design-phase. The students are able to specify and develop embedded software and systems for a given embedded architecture. Characteristics and constraints of embedded systems Embedded system design flow Specification of the functional and non-functional behavior of an embedded system Selection and configuration of suitable embedded architectures Analysis of non-functional behavior of embedded systems Correctness verification of (non-)functional properties of embedded systems C-Knowledge (preferred, not mandatory) Computer Organization (preferred, not mandatory) Lecture Self-study Working independently on e.g. a project or thesis Laptop seminar Practical Project (group) Assignments (individual)","Course catalogue number 5364DCBS6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of DevOps is a modern software and applications development model that realises the continuous integration (CI), continuous deployment (CD) and continuous improvement of the services and applications that is deeply based on the cloud virtualisation, on demand services deployment and precision services monitoring currently available on the major cloud platforms. The course discusses the basic concepts of DevOps, including its philosophy, workflow, monitoring methods, and tools. Students will apply these concepts to understand how they can be best implemented to automate development, test, and release practices. Students will work in teams to apply DevOps model and tools to develop working applications and will use one of cloud and DevOps platforms. The following topics will be covered in the course: The course will also feature guest lectures from local cloud providers or DevOps companies. Familiarity with one of the programming languages Java, C or Python and with one IDE platform More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. The course assessment includes the following components: individual practical assignments (20%); literature study 20%; group project report  and code 50%; project development process 10%. Course catalogue number 5364DCBS6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dhr. Y. Demchenko (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dhr. Y. Demchenko (co-ordinator) Master's Software Engineering Graduates are familiar with the concept of DevOps and related technologies, their benefits for organisational IT infrastructure and services management; understand organisational aspects of DevOps, describe relation of DevOps to other technologies Graduates will understand how to build cloud-based applications and use cloud automation tools in the DevOps process applied to a range of applications and software development scenarios/processes Graduates will understand functionalities offered by the popular DevOps and cloud automations tools such as Chef, Puppet, Ansible, SlipStream and have practical hands on experience with one of such tools Introduction DevOps, core concepts and models, Continuous Delivery (CD), Continuous Integration (CI), Continuous Deployment. Agile development, relation to Agile, Scrum, Lean, ITSM Cloud Computing architecture, service models, virtualisation, resources management and monitoring DevOps and software engineering on major cloud platforms: AWS, Microsoft Azure. Cloud powered applications deployment, accounts management Cloud automation tools and platforms: Chef, Puppet, Ansible, SlipStream Software delivery life cycle in an agile DevOps organisation, QA in cloud based software development systems, software security and Security Development Life cycle management (SDLM) DevOps applications architecture, configuration management, monitoring, environment setup on the selected cloud platform AWS or Microsoft Azure. Lecture Self-study Working independently on e.g. a project or thesis Laptop seminar Presentation/symposium",-,[],[],[],[],[],[],"['requirements', 'instruction', 'lectures', 'syllabus', 'prototyping', 'informatics', 'engineering', 'skills', 'agile', 'modeling', 'planner', 'contact', 'tests', 'approaches', 'scenarios', 'project', 'demos', 'literature', 'fnwiscience', 'validation', 'esc', 'schedule', 'construct', 'acquisition', 'stakeholder', '1sem', 'shortcomings', 'van', 'appreciate', 'ondatanose']","['requirement engineering', 'explores requirement', 'course planner', 'scenarios lecture', 'language instruction', 'contact education', 'acquisition skills', 'techniques uml', 'informatics lecturer', 'supplementary lectures', 'esc science', 'prototyping sprint', 'reading tests', 'literature study', 'project intensive', 'demos validation', 'stakeholder needs', 'experiment inherent', 'diagrams software', 'slow syllabus', 'data driven', 'pitfalls discussing', 'appreciate complexity', 'experience enable', 'uva nl', 'understanding domain', 'registration periods', '2see sem', '904b1020 5257100servicedesk', 'van lamsweerde']","['course explores requirement', 'explores requirement engineering', 'knowledge requirement engineering', 'engineering add course', 'lecture seminar literature', 'ec language instruction', 'engineering example books', 'html schedule course', 'graduate school informatics', 'feedback knowledge acquisition', 'contact education desk', 'modeling techniques uml', 'servicedesk esc science', 'study literature philosophy', 'planner sem sem', 'use prototyping sprint', 'engineering understand stakeholder', 'making best practices', 'small project intensive', 'syllabus kahneman thinking', 'learn shortcomings agile', 'sensitivity requirements best', 'ondatanose reading tests', 'procedures registration periods', 'run experiment inherent', 'benefits working scenarios', 'appreciate complexity theory', 'uva nl highly', 'better understanding domain', 'hand experience enable']","['requirements', 'lecturer', 'instruction', 'study', 'seminar', 'informatics', 'thesis', 'graduation', 'catalogue', 'planner', 'registration', 'symposium', 'presentation', 'engineering', 'uva', 'language', 'fnwiscience', 'schedule', 'credits', 'ideas', 'pass', 'contact', 'sem', 'sessions', '5364prms6y', 'structures', 'ordinator', 'athttp', 'oprescu', 'independently']","['course registration', 'schedule course', 'language instruction', 'informatics lecturer', 'study presentation', 'study materials', 'planning scientific', 'ondatanose student', 'requirements time', 'project thesis', 'education desk', 'contact education', 'tutor deliverables', 'planner sem', 'esc science', 'help preparation', 'graduation choose', 'meeting seminar', 'information procedures', 'catalogue number', 'learn build', 'publications learn', 'engineering add', '5364prms6y credits', 'sessions learn', 'uva nl', 'getting approval', 'defined themes', 'number defined', 'html schedule']","['course catalogue number', 'course planner sem', 'language instruction english', 'study materials available', 'course published ondatanose', 'tutor deliverables course', 'engineering add course', 'education desk fnwiscience', 'informatics lecturer dr', 'available course canvas', 'plan masters project', 'lecturer contact education', 'help preparation discuss', 'html schedule course', 'ondatanose student pass', 'esc science uva', 'need theory analysis', 'analysis graduation choose', 'requirements time time', 'students time period', 'information procedures registration', 'discuss ideas students', 'course getting approval', 'planning scientific reporting', 'publications learn build', 'sessions learn skills', 'working independently project', 'nl master software', '5364prms6y credits ec', 'defined themes exceptional']","['programming', 'requirements', 'informatics', 'projects', 'scrum', 'exams', 'lecturers', 'planner', 'seminar', 'procedures', 'complexity', 'organizing', 'developed', 'esc', 'uva', 'english', 'graduate', 'xp', 'categorized', 'related', 'asml', 'fnwiscience', 'aspects', 'thousands', '5257100servicedesk', 'dso', 'increments', 'come', 'oram', 'spanning']","['software development', 'course setup', 'language instruction', 'informatics lecturer', 'requirements plans', 'large software', 'nl developing', 'projects information', 'programming test', 'planner sem', 'contact education', 'engineers ensuring', 'progress code', 'procedures registration', 'desk fnwiscience', 'pair programming', 'complexity helps', 'distribute tasks', 'developing large', 'collaboration thousands', 'rup scrum', '5257100servicedesk esc', 'uva nl', 'come understand', 'assessment quality', 'read study', 'credits ec', 'categorized sources', 'leprechauns lecture', 'periods athttp']","['learn software development', 'need course setup', 'features need course', 'graduate school informatics', 'ec language instruction', 'requirements plans designs', 'education desk fnwiscience', 'large scale software', 'software leprechauns lecture', 'follows knowledge software', 'planner sem sem', 'progress code produced', 'lecturer contact education', 'insight complexity developing', 'solution space needs', 'nl developing large', 'projects require collaboration', '5257100servicedesk esc science', 'work coordination assessment', 'practices field software', 'rup scrum xp', 'athttp student uva', 'development methods historical', 'procedures registration periods', 'test experience working', 'period college graduate', 'dutch government programs', 'com adyen bol', 'good performing groups', 'incomplete points invalid']",[],[],[],"['courses', 'semester', 'requirements', 'study', 'lecturer', 'instruction', 'masterproject', 'engineering', 'program', 'graduate', 'credits', 'preparation', 'planner', 'supervision', 'thesis', 'schedule', 'english', 'informatics', '1sem', 'catalogue', 'months', 'esc', 'proposed', 'available', 'session', 'phase', 'assessed', 'ordinator', 'fnwiscience', '5257100servicedesk']","['courses semester', 'course preparation', 'requirements time', 'instruction english', 'preparation masterproject', 'add course', 'phase lecturer', 'study presentation', 'project software', 'ec language', 'tutor available', 'informatics lecturer', 'planner sem', 'contact education', 'time students', 'engineering assessed', 'thesis supervision', '5364mas18y credits', 'esc science', 'catalogue number', 'program passed', 'graduate graduate', 'desk fnwiscience', 'available weekly', 'ordinator contact', '1sem 2see', 'carry research', 'literature survey', 'uva nl', 'session order']","['course preparation masterproject', 'master project schedule', 'course planner sem', 'ec language instruction', 'students courses program', 'course catalogue number', 'master software engineering', 'schedule course published', 'entry requirements time', 'contact education desk', 'english entry requirements', 'software engineering add', 'project plan related', 'second semester passed', 'phase lecturer tutor', 'graduate school informatics', 'nl master software', 'need approval lecturer', 'engineering self study', 'discussion time students', 'period college graduate', 'assessed dimensions course', '5364mas18y credits 18', 'servicedesk esc science', 'period sem 1sem', 'months time research', 'written thesis presentation', 'fnwiscience park 904b1020', 'designing executing reporting', 'session order start']","['programming', 'maintenance', 'assignments', 'refactoring', 'tools', 'rascal', 'syllabus', 'informatics', 'repositories', 'ruby', 'seminar', 'introductory', 'mining', 'visualisations', 'lab', 'parsing', 'clone', 'mpl', 'php', 'annotated', 'english', 'sem', 'metrics', 'transformations', 'course', 'uva', 'graduate', 'insight', 'fnwiscience', '904b1020']","['software maintenance', 'software engineering', 'rascal programming', 'construct software', 'analysis software', 'software visualisations', 'code analysis', 'software metrics', 'programming skills', 'language workbench', 'meta programming', 'knowledge compiler', 'seminar computer', 'engineering reengineering', 'repositories refactoring', 'lab assignments', 'instruction english', 'ruby use', 'transformation tools', 'course catalogue', 'topics clone', 'asts basic', 'objective learn', 'mpl org', 'study real', 'detection mining', 'sem 1sem', 'uva nl', 'understanding appreciation', 'html schedule']","['rascal programming language', 'software maintenance evolution', 'software source code', 'software engineering add', 'seminar computer lab', 'software metrics software', 'analysis software transformation', 'languages knowledge compiler', 'quality advanced programming', 'software repositories refactoring', 'challenges posed software', 'nl master software', 'obtain insight software', 'reverse engineering reengineering', 'software visualisations time', 'research papers maintenance', 'course course reader', 'language workbench meta', 'ec language instruction', 'topics clone detection', 'detection mining software', 'renovation example topics', 'php ruby use', 'planner sem sem', 'transformation tools help', 'assignments available canvas', 'mpl org potentially', 'evolution http www', 'appreciation challenges posed', 'park 904b1020 5257100servicedesk']",[],[],[],"['testing', 'haskell', 'programming', 'specification', 'requirements', 'instruction', 'automate', 'study', 'languages', 'imperative', 'functional', 'generate', 'sem', 'seminar', 'registration', 'logicinaction', 'fnwiscience', 'ordinator', 'final', 'electronically', 'preconditions', 'uva', 'entail', 'cambridge', 'credits', '5257100servicedesk', 'modest', 'periods', 'athttp', 'oprescu']","['test programs', 'automate test', 'languages tested', 'specification verification', 'verification testing', 'haskell information', 'language instruction', 'programming college', 'requirements specifications', 'software engineering', 'course registration', 'produce formal', 'functional imperative', 'examination consists', 'entail checking', 'nl software', 'process need', 'generation basic', 'code outcomes', 'hutton programming', 'planner sem', 'preconditions code', 'aim automate', 'www logicinaction', 'desk fnwiscience', 'theory practical', 'number 5364ssvt6y', 'oprescu ordinator', 'periods athttp', 'jan jaspars']","['specification verification testing', 'tests software lecture', 'imperative languages tested', 'test generation basic', 'automate test process', 'written haskell course', 'test process informal', 'tests information states', 'programs written functional', 'specification aim automate', 'nl software specification', 'checking given software', 'course assumes basic', 'ec language instruction', 'master software engineering', 'given information programs', 'satisfies given requirements', 'education desk fnwiscience', 'understand produce formal', 'html schedule course', 'code outcomes relevant', 'process need pre', 'ordinator contact education', 'examination consists weekly', 'engineering able understand', 'self study literature', 'jaspars logic action', 'final grade determined', '5257100servicedesk esc science', 'time period sem']","['embedded', 'systems', 'specification', 'architectures', 'programming', 'reliability', 'electronics', 'errors', 'instruction', 'satellites', 'defined', 'laptop', 'instance', 'restart', 'playback', 'esc', 'servicedesk', 'purpose', 'terms', 'controller', 'resolve', 'seminar', '5364emss6y', 'fnwiscience', 'delayed', 'ordinator', 'athttp', 'covers', 'produce', 'especially']","['embedded systems', 'computing systems', 'systems course', 'computer software', 'methods embedded', 'systems correctness', 'reliability constraints', 'resolve errors', 'requirements especially', 'design programming', 'architecture characteristics', 'mandatory computer', 'specification functional', 'information procedures', 'ec language', 'restart typically', 'computing complete', 'engineering add', 'consumer electronics', 'instance media', 'general purpose', 'desk fnwiscience', 'flight control', 'servicedesk esc', 'able specify', 'cars satellites', 'course catalogue', 'reliably produce', 'playback delayed', 'number 5364emss6y']","['embedded computer systems', 'embedded systems correctness', 'software systems accommodate', 'systems course covers', 'purpose computing complete', 'systems immediately recognized', 'resolve errors general', 'development methods embedded', 'increased reliability constraints', 'precluded embedded available', 'matters correctness embedded', 'computing complete restart', 'design flow specification', 'characteristics constraints embedded', 'costs time embedded', 'requirements especially terms', 'ec language instruction', 'preferred mandatory computer', 'nl master software', '5257100servicedesk esc science', 'methods general purpose', 'engineering students know', 'sets consumer electronics', 'cars satellites designing', 'item course registration', 'wheel flight control', 'critical cases instance', 'size weight power', 'mobile phones tv', 'functional non functional']","['devops', 'deployment', 'informatics', 'cloud', 'ansible', 'programming', 'virtualisation', 'sdlm', 'automate', 'esc', 'lectures', 'monitoring', 'instruction', 'graduates', 'delivery', 'processes', 'assessment', 'scrum', 'ci', 'related', 'configuration', 'concept', 'desk', 'cd', 'integration', 'aspects', 'english', 'slipstream', '5257100servicedesk', 'periods']","['devops software', 'cloud automations', 'course registration', 'informatics lecturer', 'azure lecture', 'processes graduates', 'tools students', 'development test', 'monitoring environment', 'management sdlm', 'infrastructure services', 'deployment precision', 'engineering add', 'servicedesk esc', 'planner sem', 'configuration management', 'laptop seminar', 'ec language', 'virtualisation demand', 'integration ci', 'ansible slipstream', 'selected cloud', 'delivery cd', 'desk fnwiscience', 'platform information', 'core concepts', 'number 5364dcbs6y', 'java python', 'agile scrum', 'feature guest']","['devops technologies graduates', 'basic concepts devops', 'use cloud devops', 'cloud platforms course', 'management monitoring devops', 'uva nl devops', 'sdlm devops applications', 'use cloud automation', 'servicedesk esc science', 'course feature guest', 'development process 10', 'engineering add course', 'informatics lecturer dhr', 'virtualisation resources management', 'azure lecture self', 'continuous deployment cd', 'software delivery life', 'contact education desk', 'ec language instruction', '10 course catalogue', 'precision services monitoring', 'ansible slipstream software', 'methods tools students', 'project thesis laptop', 'programming languages java', 'python ide platform', '5364dcbs6y credits ec', 'desk fnwiscience park', 'time period sem', 'realises continuous integration']",[],[],[]
2020-2021,-,-,"Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of This highly interactive course explores requirement engineering (RE) approaches and pitfalls by discussing real life cases. Supplementary lectures will go into truth finding, sense making, best practices, methods and will provide an abstract model for RE. Next to specific RE literature you will study literature from philosophy and psychology to get a better understanding of the domain. In the first weeks you will gather knowledge to construct requirements for a small project. You will get intensive feedback about your knowledge acquisition skills. This first hand experience will enable you to better appreciate the intricacies in applying theory even in a simple domain. Finally you will design and run an experiment to show the inherent sensitivity of requirements best practices to bias. By default we focus on the use of prototyping/sprint demos for validation. Knowledge of requirement engineering, for example books of Sommerville, Robertson, van Lamsweerde, Wiegers or Pohl. 'Modeling techniques', e.g. UML diagrams to describe software behaviour. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. Reading tests, paper, exam and lab work. Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering You will understand why stakeholder needs are so hard to express, capture and understand. You will learn the shortcomings in the (agile) methods and best practices that are widely used. Furthermore you will learn about data-driven methods and the benefits of working with scenarios. Lecture Seminar Literature:D. Kahneman 'Thinking, fast and slow'. D. Kahneman 'Thinking, fast and slow'. Syllabus:  D. Kahneman 'Thinking, fast and slow'. ","Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For both part-time and full-time students. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of During paper sessions you learn skills to find, read and assess relevant scientific publications. You will also learn to build argumentation structures you need for your theory and analysis. For your graduation project, you can choose from a number of defined themes. It is also possible to define a project yourself, once you have thoroughly examined the foundation and feasibility of your idea. The lecturer will help you during the preparation. You will also discuss your ideas with other students. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. The student can pass the course by getting approval from the course coordinator and the academic supervisor for two deliverables: Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For both part-time and full-time students. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering Problem analysis, Scientific literature survey, Theory building, Hypothesizing, Structuring research and validation, Project planning, Scientific reporting. Self-study Presentation/symposium Working independently on e.g. a project or thesis Supervision/feedback meeting Seminar Other:Study materials are made available through the course’s Canvas page. Study materials are made available through the course’s Canvas page. Study materials are made available through the course’s Canvas page. An interest in reading and writing scientific literature. Affinity with reading and writing English text. Knowledge of current challenges and results in software engineering. Graduation project proposal, Survey of related literature.","Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Developing large scale software systems is challenging for many reasons. Our understanding of what needs to be done is at best incomplete, at points invalid, and subject to change. It’s hard to determine the adequacy of requirements, plans, designs and increments. The biggest projects require collaboration of thousands of people, with imperfect mechanisms for division of work, coordination, assessment of quality and assessment of progress. The code that is produced restricts the solution space for what still needs to be developed, and at worst becomes too complex to add the features that we need. The course setup is as follows: Knowledge of software methods like Rup, Scrum, Xp and software practices like pair programming, test first. Experience with working in big projects. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. Reading tests, essays, exams. Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering Insight in methods and best practices in the field of Software Engineering. Understand what problems these try to solve. Understand that methods and best practices are merely a means to an end. Insight into complexity of developing large software systems. Understanding what agility is, and how this is related to process and other factors. Understanding what planning entails, and how it contributes to a successful outcome. Insight in individual, team and organizational performance. Insight in organizational patterns to decompose and distribute tasks and empower engineers while ensuring their combined work leads to a successful outcome. First you will learn about software development methods. This is put in a historical overview spanning organizational science in general. Second you will focus on the different aspects of planning: organizing, sizing, architecture. Different views on planning explain to some extent differences between methods. Third you will focus on individual, group and organizational performance. What is a good software engineer? What is at the heart of good performing groups and organizations? You will get insight in theory of empowerment: what is the relationship between empowerment and behaviour? You will come to understand how situational this relationship is. Throughout the course you will examine an infamous failed case. This will give you insight in complexity, but also helps you to test the fitness of the methods and best practices you studied. Throughout the course guest lecturers from big software companies will tell you how these are organized. You will extract organizational patterns and see how  companies / programs compare. Companies that presented in the past years include Spotify, Netflix, MicroSoft, Amazon, Booking.com, Adyen, Bol.com, Philips, ASML and Dutch Government about programs like DSO, BRP and SZW-MR. Throughout the course you will read and study scientific literature about methods and best practices, in part categorized in sources like Making Software, and Leprechauns. Lecture Seminar Literature:Andy Oram, Greg Wilson 'Making Software: What Really Works, and Why We Believe It'. Andy Oram, Greg Wilson 'Making Software: What Really Works, and Why We Believe It'. Andy Oram, Greg Wilson 'Making Software: What Really Works, and Why We Believe It'.",-,"Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Carry out the research as proposed by the plan you made in the preparation phase. An academic supervisor will be available for (weekly) feedback and discussion. Part-time students will need to discuss their planning with the coordinator and the academic supervisor, as there are various possibilities to distribute the necessary work across the study time. Preparation Master Project The schedule for this course is published onDataNose. The Master Project Software Engineering is assessed along three dimensions: Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering Acquiring the ability to do research by designing, executing and reporting on a project in the area of software engineering research, Adding knowledge or gathering new evidence in the field of software engineering. Self-study Presentation/symposium Working independently on e.g. a project or thesis Supervision/feedback meeting Literature:Scientific literature Scientific literature Scientific literature research carried out, written thesis, presentation and discussion during the defense session. In order to start the Master’s project you need to have approval from the Preparation Master Project course coordinator and your academic supervisor on your project plan and related literature survey.","Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of This course is designed around lab sessions in which we study real and large (open-source) software systems, written in languages like C, Java, PHP or Ruby. We use Rascal -a programming language workbench, or meta programming language- to apply and build software metrics, software analyses, software visualisations and (if time permits) software transformations. Seehttp://www.rascal-mpl.org.The student is supported with introductory courses and interactive lab sessions while learning this new language in the beginning. The course is supported by a series of lectures on the theory of software maintenance and evolution, guest lecturers from field experts, and a guided study of a number of research papers about maintenance, reverse engineering, reengineering and renovation. Example topics are clone detection, mining software repositories and refactoring. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. This course typically uses the following assessments, that will be detailed at the start of the course: The course reader and assignments will be made available on Canvas. Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) R.A. van Rozen (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   R.A. van Rozen (co-ordinator) Master's Software Engineering The first objective is to acquire an understanding and appreciation of the challenges posed by software maintenance and software evolution. The second objective is to learn about quality of software and source code and how it affects software maintenance and evolution. The final objective is to be able to select and also construct software analysis and software transformation tools to help obtain insight in software quality and to help improve software quality. Advanced programming skills in several programming languages. Knowledge of compiler construction (parsing, ASTs, basic code analysis, etc.). Good (academic) English reading and writing skills. Lecture Laptop seminar Computer lab session/practical training Self-study Syllabus:Reader consisting of selected papers on software evolution Reader consisting of selected papers on software evolution Other:http://www.rascal-mpl.orgPotentially other (academic) sources http://www.rascal-mpl.org Potentially other (academic) sources Reader consisting of selected papers on software evolution http://www.rascal-mpl.org Potentially other (academic) sources practical lab assignments, assessed by demonstration and oral exam writing exercise(s): essay and/or annotated bilbiography",-,"Course catalogue number 5364SSVT6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Software specification, verification, and testing entail checking whether a given software system satisfies given requirements and/or specifications. Without a specification, it is impossible to state what a piece of software should do, and there is no reasonable way to set up the test process. An informal specification is not enough. If we aim to automate the test process we need pre-given information about: Programs written in functional or imperative languages can be tested, given a formal specification, by means of a random test generator. This test method will be illustrated for a number of example programs that are written in Haskell. The course assumes basic familiarity with this language and focusses on how to test programs written in either functional or imperative style, and how to use tools for automated test generation. Basic familiarity with logic and functional programming in Haskell. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. Course examination consists of weekly assignments plus a final exam both the theory and practical parts. Course catalogue number 5364SSVT6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering understand and write specifications in the language of predicate logic. use type-specification and abstraction to make programs more easily testable. write formal specifications for testing Haskell code. use random test generation for automating the test process. Lecture Seminar Laptop seminar Self-study Literature:Graham Hutton, 'Programming in Haskell', Cambridge University Press 2016 (Second Edition).Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,'Logic in Action', electronically available fromhttp://www.logicinaction.orgKees Doets and Jan van Eijck, 'The Haskell Road to Logic, Maths and Programming'. College Publications, London 2012. Graham Hutton, 'Programming in Haskell', Cambridge University Press 2016 (Second Edition). Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,'Logic in Action', electronically available fromhttp://www.logicinaction.org Kees Doets and Jan van Eijck, 'The Haskell Road to Logic, Maths and Programming'. College Publications, London 2012. Graham Hutton, 'Programming in Haskell', Cambridge University Press 2016 (Second Edition). Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,'Logic in Action', electronically available fromhttp://www.logicinaction.org Kees Doets and Jan van Eijck, 'The Haskell Road to Logic, Maths and Programming'. College Publications, London 2012. which tests are relevant --> this information states the preconditions of the code what the outcomes of the relevant tests should be --> this information states the postconditions of the code.","Course catalogue number 5364EMSS6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of This course targets the software design and programming of embedded systems, i.e., computing systems which are not immediately recognized as such. Examples include mobile phones, TV sets, consumer electronics, Internet-of-Things, but also airplanes, cars, and satellites. Designing such embedded systems differs fundamentally from traditional design methods for general-purpose computer software: Embedded systems are subject to specific requirements, especially in terms of efficiency (size, weight and power) and costs. At the same time, embedded systems are subject to increased reliability constraints. The go-to solution to resolve system errors for general-purpose computing, i.e., a complete system restart, is typically precluded in an embedded system. The system must always be available and must always reliably produce correct results. To further complicate matters, the correctness of most embedded systems is not just defined by the correct result of a computation, but also by the correct timing. Imagine an air-bag controller, which must inflate the air-bag in time before the driver’s head hits the steering wheel, or a flight control system, which must correct turbulence, before the airplane becomes unstable. Concerning less critical cases, we have for instance media players where the playback is delayed or the quality is degraded. In this course, we will provide an introduction to the broad domain of embedded computer systems, and teach common design and development methods of embedded software and systems. The course covers the following topics: More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. A Canvas site for the course is available Course catalogue number 5364EMSS6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) prof. dr. K.B. Akesson MSc (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   prof. dr. K.B. Akesson MSc (co-ordinator) Master's Software Engineering The student is able to explain the key characteristics of embedded software and systems The student is able to specify embedded systems using aspect models at different levels of abstraction The student is able to functionally verify weak termination of systems using methods based on Petri Net models The student is able to verify schedulability of periodic tasks and perform cache analysis on a single-core system, and explain the added challenges in a multi-core system The student is able to explain how design-space exploration identifies hardware and software configurations that satisfy multi-dimensional constraints on e.g. cost, performance and energy consumption The student is able to work together in a team to develop software that satisfies its requirements on a given embedded platform Characteristics and constraints of embedded systems Embedded system design flow Specification of the functional and non-functional behavior of an embedded system Selection and configuration of suitable embedded architectures Analysis of non-functional behavior of embedded systems Correctness verification of (non-)functional properties of embedded systems Programming (Java, Python, C++, or similar language) Computer Organization (preferred, not mandatory) Lecture Self-study Working independently on e.g. a project or thesis Laptop seminar Practical Project (group) Assignments (individual)","Course catalogue number 5364DCBS6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of DevOps is a modern software and applications development model that realises the continuous integration (CI), continuous deployment (CD) and continuous improvement of the services and applications that is deeply based on the cloud virtualisation, on demand services deployment and precision services monitoring currently available on the major cloud platforms. The course discusses the basic concepts of DevOps, including its philosophy, workflow, monitoring methods, and tools. Students will apply these concepts to understand how they can be best implemented to automate development, test, and release practices. Students will work in teams to apply DevOps model and tools to develop working applications and will use one of cloud and DevOps platforms. The following topics will be covered in the course: The course will also feature guest lectures from local cloud providers and DevOps companies. Familiarity with one of the programming languages: Java, C or Python, and with any IDE platform More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. The course assessment includes the following components: individual practical assignments; literature study; group project report  and code; project development process. Course catalogue number 5364DCBS6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dhr. Y. Demchenko (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dhr. Y. Demchenko (co-ordinator) Master's Software Engineering Graduates are familiar with the concept of DevOps and related technologies, their benefits for organisational IT infrastructure and services management; understand organisational aspects of DevOps, describe relation of DevOps to other technologies Graduates will understand how to build cloud-based applications and use cloud automation tools in the DevOps process applied to a range of applications and software development scenarios/processes Graduates will understand functionalities offered by the popular DevOps and cloud automations tools such as Chef, Puppet, Ansible,  and have practical hands on experience with one of such tools Introduction DevOps, core concepts and models, Continuous Delivery (CD), Continuous Integration (CI), Continuous Deployment. Agile development, relation to Agile, Scrum, Lean, ITSM Cloud Computing architecture, service models, virtualisation, resources management and monitoring DevOps and software engineering on major cloud platforms: AWS, Microsoft Azure. Cloud powered applications deployment, accounts management Cloud automation tools and platforms: Chef, Puppet, Ansible, and DevOps tools available from the major cloud providers AWS and Azure Software delivery life cycle in an agile DevOps organisation, QA in cloud based software development systems, software security and Security Development Life cycle management (SDLM) DevOps applications architecture, configuration management, monitoring, environment setup on the selected cloud platform AWS or Microsoft Azure. Lecture Self-study Working independently on e.g. a project or thesis Laptop seminar Presentation/symposium",-,[],[],[],[],[],[],"['requirements', 'instruction', 'lectures', 'syllabus', 'prototyping', 'modeling', 'skills', 'engineering', 'informatics', 'agile', 'applying', 'contact', 'approaches', 'planner', 'tests', 'literature', 'demos', 'fnwiscience', 'acquisition', 'validation', 'construct', 'esc', 'schedule', 'stakeholder', '1sem', 'shortcomings', '5364reen6y', 'appreciate', 'ondatanose', 'periods']","['requirement engineering', 'knowledge requirement', 'explores requirement', 'scenarios lecture', 'language instruction', 'course planner', 'contact education', 'acquisition skills', 'study literature', 'techniques uml', 'informatics lecturer', 'supplementary lectures', 'esc science', 'prototyping sprint', 'paper exam', 'demos validation', 'experiment inherent', 'applying theory', 'slow syllabus', 'diagrams software', 'nl master', 'data driven', 'understand stakeholder', 'experience enable', 'finally design', 'registration periods', '904b1020 5257100servicedesk', 'simple domain', '2see sem', 'van lamsweerde']","['course explores requirement', 'knowledge requirement engineering', 'language instruction english', 'engineering add course', 'lecture seminar literature', 'requirements small project', 'education desk fnwiscience', 'engineering example books', 'html schedule course', 'ordinator contact education', 'feedback knowledge acquisition', 'study literature philosophy', 'modeling techniques uml', 'informatics lecturer contact', 'planner sem sem', 'engineering understand stakeholder', 'making best practices', 'nl master software', 'use prototyping sprint', 'appreciate intricacies applying', 'reading tests paper', 'syllabus kahneman thinking', 'learn shortcomings agile', 'sensitivity requirements best', 'procedures registration periods', 'run experiment inherent', 'better understanding domain', '904b1020 5257100servicedesk esc', 'life cases supplementary', 'robertson van lamsweerde']","['requirements', 'study', 'seminar', 'thesis', 'instruction', 'lecturer', 'informatics', 'graduation', 'planner', 'presentation', 'catalogue', 'symposium', 'preparation', 'ideas', 'registration', 'engineering', 'language', 'uva', 'fnwiscience', 'schedule', 'esc', 'credits', 'build', 'foundation', '904b1020', 'defined', '1sem', 'course', 'ordinator', 'athttp']","['course registration', 'schedule course', 'language instruction', 'study materials', 'project thesis', 'idea lecturer', 'informatics lecturer', 'self study', 'seminar study', 'planning scientific', 'requirements time', 'ondatanose student', 'engineering graduation', 'preparation discuss', 'planner sem', 'esc science', 'information procedures', 'coordinator academic', 'learn build', 'text knowledge', 'catalogue number', 'proposal survey', 'defined themes', 'uva nl', 'foundation feasibility', 'getting approval', '5364prms6y credits', 'number defined', 'html schedule', 'possible define']","['course planner sem', 'lecturer help preparation', 'graduation project proposal', 'study materials available', 'course published ondatanose', 'graduate school informatics', 'self study presentation', 'ec language instruction', 'getting approval course', 'engineering add course', 'need theory analysis', 'deliverables course catalogue', 'course registration html', 'contact education desk', 'independently project thesis', 'discuss ideas students', 'english entry requirements', 'requirements time time', 'publications learn build', 'ondatanose student pass', 'information procedures registration', 'planning scientific reporting', 'az item course', 'science uva nl', 'text knowledge current', 'servicedesk esc science', 'sessions learn skills', 'time period college', 'number defined themes', 'catalogue number 5364prms6y']","['programming', 'requirements', 'informatics', 'projects', 'scrum', 'exams', 'lecturers', 'planner', 'seminar', 'procedures', 'complexity', 'organizing', 'developed', 'esc', 'uva', 'english', 'graduate', 'xp', 'categorized', 'related', 'asml', 'fnwiscience', 'aspects', 'thousands', '5257100servicedesk', 'dso', 'increments', 'come', 'oram', 'spanning']","['software development', 'course setup', 'language instruction', 'informatics lecturer', 'requirements plans', 'large software', 'nl developing', 'projects information', 'programming test', 'planner sem', 'contact education', 'engineers ensuring', 'progress code', 'procedures registration', 'desk fnwiscience', 'pair programming', 'complexity helps', 'distribute tasks', 'developing large', 'collaboration thousands', 'rup scrum', '5257100servicedesk esc', 'uva nl', 'come understand', 'assessment quality', 'read study', 'credits ec', 'categorized sources', 'leprechauns lecture', 'periods athttp']","['learn software development', 'need course setup', 'features need course', 'graduate school informatics', 'ec language instruction', 'requirements plans designs', 'education desk fnwiscience', 'large scale software', 'software leprechauns lecture', 'follows knowledge software', 'planner sem sem', 'progress code produced', 'lecturer contact education', 'insight complexity developing', 'solution space needs', 'nl developing large', 'projects require collaboration', '5257100servicedesk esc science', 'work coordination assessment', 'practices field software', 'rup scrum xp', 'athttp student uva', 'development methods historical', 'procedures registration periods', 'test experience working', 'period college graduate', 'dutch government programs', 'com adyen bol', 'good performing groups', 'incomplete points invalid']",[],[],[],"['semester', 'courses', 'requirements', 'study', 'masterproject', 'instruction', 'lecturer', 'engineering', 'program', 'preparation', 'planner', 'credits', 'schedule', 'catalogue', 'supervision', 'thesis', 'informatics', 'esc', 'proposed', 'contact', 'presentation', '1sem', '904b1020', 'course', 'assessed', 'session', '18', 'phase', 'fnwiscience', 'ordinator']","['courses semester', 'course preparation', 'project course', 'requirements time', 'preparation masterproject', 'study time', 'add course', 'instruction english', 'project software', 'planner sem', 'phase academic', 'education desk', 'informatics lecturer', 'contact education', 'ec language', 'thesis supervision', 'engineering assessed', 'esc science', '5364mas18y credits', 'catalogue number', 'program passed', 'graduate graduate', 'research carried', 'ordinator contact', 'available weekly', 'feedback meeting', 'uva nl', '1sem 2see', 'distribute necessary', 'session order']","['course preparation masterproject', 'master project schedule', 'course catalogue number', 'students courses semester', 'study time preparation', 'master software engineering', 'project course coordinator', 'schedule course published', 'program passed course', 'contact education desk', 'instruction english entry', 'semester block second', 'project plan related', 'entry requirements time', 'graduate school informatics', 'software engineering add', 'planner sem sem', 'nl master software', 'engineering self study', 'phase academic supervisor', 'assessed dimensions course', '18 ec language', 'need approval preparation', '5364mas18y credits 18', 'servicedesk esc science', 'presentation symposium working', 'fnwiscience park 904b1020', 'literature research carried', 'dr oprescu ordinator', 'session order start']","['programming', 'maintenance', 'assignments', 'refactoring', 'tools', 'rascal', 'syllabus', 'informatics', 'repositories', 'ruby', 'seminar', 'introductory', 'mining', 'visualisations', 'lab', 'parsing', 'clone', 'mpl', 'php', 'annotated', 'english', 'sem', 'metrics', 'transformations', 'course', 'uva', 'graduate', 'insight', 'fnwiscience', '904b1020']","['software maintenance', 'software engineering', 'rascal programming', 'construct software', 'analysis software', 'software visualisations', 'code analysis', 'software metrics', 'programming skills', 'language workbench', 'meta programming', 'knowledge compiler', 'seminar computer', 'engineering reengineering', 'repositories refactoring', 'lab assignments', 'instruction english', 'ruby use', 'transformation tools', 'course catalogue', 'topics clone', 'asts basic', 'objective learn', 'mpl org', 'study real', 'detection mining', 'sem 1sem', 'uva nl', 'understanding appreciation', 'html schedule']","['rascal programming language', 'software maintenance evolution', 'software source code', 'software engineering add', 'seminar computer lab', 'software metrics software', 'analysis software transformation', 'languages knowledge compiler', 'quality advanced programming', 'software repositories refactoring', 'challenges posed software', 'nl master software', 'obtain insight software', 'reverse engineering reengineering', 'software visualisations time', 'research papers maintenance', 'course course reader', 'language workbench meta', 'ec language instruction', 'topics clone detection', 'detection mining software', 'renovation example topics', 'php ruby use', 'planner sem sem', 'transformation tools help', 'assignments available canvas', 'mpl org potentially', 'evolution http www', 'appreciation challenges posed', 'park 904b1020 5257100servicedesk']",[],[],[],"['testing', 'haskell', 'programming', 'specification', 'automating', 'requirements', 'instruction', 'study', 'languages', 'formal', 'imperative', 'logicinaction', 'seminar', 'sem', 'schedule', 'ordinator', 'fnwiscience', 'electronically', 'graduate', 'uva', 'postconditions', 'outcomes', 'credits', 'pre', 'consists', 'generator', '5257100servicedesk', 'periods', 'athttp', 'graham']","['testing haskell', 'test programs', 'specifications testing', 'automating test', 'software specification', 'languages tested', 'verification testing', 'language instruction', 'programming college', 'testable write', 'generation automating', 'given requirements', 'course registration', 'examination consists', 'information procedures', 'entail checking', 'functional imperative', 'write formal', 'nl software', 'code outcomes', 'process need', 'preconditions code', 'www logicinaction', 'desk fnwiscience', 'theory practical', 'sem 1sem', 'oprescu ordinator', 'number 5364ssvt6y', 'plus final', 'periods athttp']","['specifications testing haskell', 'formal specifications testing', 'generation automating test', 'programs easily testable', 'test process need', 'written haskell course', 'testable write formal', 'languages tested given', 'tests information states', 'verification testing entail', 'specification aim automate', 'nl software specification', 'functional imperative languages', 'course examination consists', 'ec language instruction', 'master software engineering', 'london 2012 tests', 'abstraction make programs', 'programming college publications', 'use tools automated', 'process lecture seminar', 'satisfies given requirements', 'logic maths programming', 'information procedures registration', 'preconditions code outcomes', 'planner sem sem', 'self study literature', 'athttp student uva', 'servicedesk esc science', 'number 5364ssvt6y credits']","['hardware', 'embedded', 'systems', 'computing', 'architectures', 'requirements', 'reliability', 'java', 'schedulability', 'errors', 'abstraction', 'core', 'satellites', 'defined', 'msc', 'cache', 'reliably', 'playback', 'lecture', 'esc', 'termination', 'servicedesk', 'controller', '5364emss6y', 'fnwiscience', 'delayed', 'ordinator', 'athttp', 'covers', 'produce']","['embedded systems', 'computing systems', 'specify embedded', 'software satisfies', 'identifies hardware', 'methods embedded', 'reliability constraints', 'correctness embedded', 'termination systems', 'systems student', 'resolve errors', 'platform characteristics', 'requirements especially', 'design programming', 'information procedures', 'ec language', 'flow specification', 'verify schedulability', 'restart typically', 'core explain', 'cache analysis', 'net models', 'general purpose', 'desk fnwiscience', 'flight control', 'servicedesk esc', 'cars satellites', 'course catalogue', 'playback delayed', 'park 904b1020']","['embedded computer systems', 'embedded systems correctness', 'software satisfies requirements', 'able specify embedded', 'systems programming java', 'systems course covers', 'purpose computing complete', 'systems immediately recognized', 'resolve errors general', 'development methods embedded', 'termination systems using', 'increased reliability constraints', 'matters correctness embedded', 'computing complete restart', 'exploration identifies hardware', 'design flow specification', 'characteristics constraints embedded', 'able verify schedulability', 'ec language instruction', '5257100servicedesk esc science', 'based petri net', 'single core explain', 'methods general purpose', 'engineering student able', 'cars satellites designing', 'tasks perform cache', 'item course registration', 'cost performance energy', 'wheel flight control', 'mobile phones tv']","['devops', 'deployment', 'informatics', 'programming', 'cloud', 'ansible', 'virtualisation', 'development', 'automate', 'sdlm', 'monitoring', 'esc', 'lectures', 'graduates', 'infrastructure', 'delivery', 'processes', 'scrum', 'assessment', 'ci', 'uva', 'related', 'concept', 'cd', 'integration', 'aspects', '5257100servicedesk', 'dhr', '2see', 'periods']","['devops software', 'cloud automations', 'course registration', 'informatics lecturer', 'azure lecture', 'processes graduates', 'tools students', 'development test', 'monitoring environment', 'management sdlm', 'ansible practical', 'engineering add', 'servicedesk esc', 'planner sem', 'configuration management', 'ec language', 'precision services', 'integration ci', 'deployment accounts', 'virtualisation demand', 'selected cloud', 'delivery cd', 'platform information', 'desk fnwiscience', 'java python', 'core concepts', 'cycle agile', 'number 5364dcbs6y', 'feature guest', 'dhr demchenko']","['devops technologies graduates', 'basic concepts devops', 'cloud devops platforms', 'management monitoring devops', 'uva nl devops', 'sdlm devops applications', 'understand build cloud', 'cloud automations tools', 'lectures local cloud', 'process course catalogue', 'course feature guest', 'based software development', 'engineering add course', 'platforms course discusses', 'continuous deployment cd', 'informatics lecturer contact', 'development test release', 'virtualisation resources management', 'education desk fnwiscience', 'ec language instruction', '5257100servicedesk esc science', 'monitoring currently available', 'html schedule course', 'continuous improvement services', 'students work teams', 'familiarity programming languages', 'ansible practical hands', 'python ide platform', 'sem sem dhr', 'delivery life cycle']",[],[],[]
2021-2022,-,-,"Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of This highly interactive course explores requirement engineering (RE) approaches and pitfalls by discussing real life cases. Supplementary lectures will go into truth finding, sense making, best practices, methods and will provide an abstract model for RE. At the heart RE is about knowledge elicitation, creation and validation to make decisions about what system to construct. We humans are by no means truth telling and finding machines. You will explore  psychological and philosophical sources to get a better understanding of how that works. Lab work in the first weeks of the course is about engineering requirements for a small real life project. You will get feedback about your knowledge acquisition skills. This first hand experience will enable you to better appreciate the intricacies in applying theory even in a simple domain. Finally you will design and run an experiment to show the inherent sensitivity of requirements best practices to bias. Knowledge of requirement engineering, for example books of Sommerville, Robertson, van Lamsweerde, Wiegers or Pohl. 'Modeling techniques', e.g. UML diagrams to describe software behaviour. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. Reading tests, paper, exam and lab work. Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering You will understand why stakeholder needs are so hard to express, capture and understand You will learn the shortcomings in the (agile) methods and best practices that are widely used Furthermore you will learn how to get more reliable data and to use that for decision making Lecture Seminar Literature:D. KahnemanThinking, fast and slow D. KahnemanThinking, fast and slow Syllabus:  D. KahnemanThinking, fast and slow ","Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For both part-time and full-time students. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of During paper sessions you learn skills to find, read and assess relevant scientific publications. You will also learn to build argumentation structures you need for your theory and analysis. For your graduation project, you can choose from a number of defined themes. It is also possible to define a project yourself, once you have thoroughly examined the foundation and feasibility of your idea. The lecturer will help you during the preparation. You will also discuss your ideas with other students. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. The student can pass the course by getting approval from the course coordinator and the academic supervisor for two deliverables: Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For both part-time and full-time students. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering Problem analysis Scientific literature survey Theory building Hypothesizing Structuring research and validation Project planning Scientific reporting Self-study Presentation/symposium Working independently on e.g. a project or thesis Supervision/feedback meeting Seminar Other:Study materials are made available through the course’s Canvas page. Study materials are made available through the course’s Canvas page. Study materials are made available through the course’s Canvas page. An interest in reading and writing scientific literature Affinity with reading and writing English text Knowledge of current challenges and results in software engineering Graduation project proposal Survey of related literature","Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Developing large scale software systems is challenging for many reasons. Our understanding of what needs to be done is at best incomplete, at points invalid, and subject to change. It’s hard to determine the adequacy of requirements, plans, designs and increments. The biggest projects require collaboration of thousands of people, with imperfect mechanisms for division of work, coordination, assessment of quality and assessment of progress. The code that is produced restricts the solution space for what still needs to be developed, and at worst becomes too complex to add the features that we need. The course setup is as follows: Knowledge of software methods like Rup, Scrum, Xp and software practices like pair programming, test first. Experience with working in big projects. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. Reading tests, essays, exams. Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering Insight in methods and best practices in the field of Software Engineering. Understand what problems these try to solve. Understand that methods and best practices are merely a means to an end Insight into complexity of developing large software systems Understanding what agility is, and how this is related to process and other factors Understanding what planning entails, and how planning contributes to a successful outcome Insight in individual, team and organizational performance Insight in organizational patterns to decompose and distribute tasks and empower engineers while ensuring their combined work leads to a successful outcome First you will learn about software development methods. This is put in a historical overview spanning organizational science in general. Second you will focus on the different aspects of planning: organizing, sizing, architecture. Different views on planning explain to some extent differences between methods. Third you will focus on individual, group and organizational performance. What is a good software engineer? What is at the heart of good performing groups and organizations? You will get insight in theory of empowerment: what is the relationship between empowerment and behaviour? You will come to understand how situational this relationship is. Throughout the course you will examine an infamous failed case. This will give you insight in complexity, but also helps you to test the fitness of the methods and best practices you studied. Throughout the course guest lecturers from big software companies will tell you how these are organized. You will extract organizational patterns and see how  companies / programs compare. Companies that presented in the past years include Spotify, Netflix, MicroSoft, Amazon, Booking.com, Adyen, Bol.com, Philips, ASML and Dutch Government about programs like DSO, BRP and SZW-MR. Throughout the course you will read and study scientific literature about methods and best practices, in part organized in sources like Making Software, and Leprechauns. Lecture Seminar Literature:Andy Oram, Greg WilsonMaking Software: What Really Works, and Why We Believe It. Andy Oram, Greg WilsonMaking Software: What Really Works, and Why We Believe It. Andy Oram, Greg WilsonMaking Software: What Really Works, and Why We Believe It.",-,"Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Carry out the research as proposed by the plan you made in the preparation phase. An academic supervisor will be available for (weekly) feedback and discussion. Part-time students will need to discuss their planning with the coordinator and the academic supervisor, as there are various possibilities to distribute the necessary work across the study time. Preparation Master Project The schedule for this course is published onDataNose. The Master Project Software Engineering is assessed along three dimensions: Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering Acquiring the ability to do research by designing, executing and reporting on a project in the area of software engineering research Adding knowledge or gathering new evidence in the field of software engineering Self-study Presentation/symposium Working independently on e.g. a project or thesis Supervision/feedback meeting Literature:Scientific literature Scientific literature Scientific literature research carried out written thesis presentation and discussion during the defense session In order to start the Master’s project you need to have approval from the Preparation Master Project course coordinator and your academic supervisor on your project plan and related literature survey.","Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of This course is designed around lab sessions in which we study real and large (open-source) software systems, written in languages like C, Java, PHP or Ruby. We use Rascal -a programming language workbench, or meta programming language- to apply and build software metrics, software analyses, software visualisations and (if time permits) software transformations. Seehttp://www.rascal-mpl.org.The student is supported with introductory courses and interactive lab sessions while learning this new language in the beginning. The course is supported by a series of lectures on the theory of software maintenance and evolution, guest lecturers from field experts, and a guided study of a number of research papers about maintenance, reverse engineering, reengineering and renovation. Example topics are clone detection, mining software repositories and refactoring. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. This course typically uses the following assessments, that will be detailed at the start of the course: The course reader and assignments will be made available on Canvas. Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. L.T. van Binsbergen (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. L.T. van Binsbergen (co-ordinator) Master's Software Engineering The first objective is to acquire an understanding and appreciation of the challenges posed by software maintenance and software evolution The second objective is to learn about quality of software and source code and how it affects software maintenance and evolution The final objective is to be able to select and also construct software analysis and software transformation tools to help obtain insight in software quality and to help improve software quality Advanced programming skills in several programming languages Knowledge of compiler construction (parsing, ASTs, basic code analysis, etc.) Good (academic) English reading and writing skills Lecture Laptop seminar Computer lab session/practical training Self-study Syllabus:Reader consisting of selected papers on software evolution Reader consisting of selected papers on software evolution Other:http://www.rascal-mpl.orgPotentially other (academic) sources http://www.rascal-mpl.org Potentially other (academic) sources Reader consisting of selected papers on software evolution http://www.rascal-mpl.org Potentially other (academic) sources practical lab assignments, assessed by demonstration and oral exam writing exercise(s): essay and/or annotated bilbiography",-,"Course catalogue number 5364SSVT6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Software specification, verification, and testing entail checking whether a given software system satisfies given requirements and/or specifications. Without a specification, it is impossible to state what a piece of software should do, and there is no reasonable way to set up the test process. An informal specification is not enough. If we aim to automate the test process we need pre-given information about: Programs written in functional or imperative languages can be tested, given a formal specification, by means of a random test generator. This test method will be illustrated for a number of example programs that are written in Haskell. The course assumes basic familiarity with this language and focusses on how to test programs written in either functional or imperative style, and how to use tools for automated test generation. Basic familiarity with logic and functional programming in Haskell. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. Course examination consists of weekly assignments plus a final exam both the theory and practical parts. Course catalogue number 5364SSVT6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering understand and write specifications in the language of predicate logic use type-specification and abstraction to make programs more easily testable write formal specifications for testing Haskell code use random test generation for automating the test process Lecture Seminar Laptop seminar Self-study Literature:Graham Hutton,Programming in Haskell, Cambridge University Press 2016 (Second Edition).Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,Logic in Action, electronically available fromhttp://www.logicinaction.orgKees Doets and Jan van Eijck,The Haskell Road to Logic, Maths and Programming. College Publications, London 2012. Graham Hutton,Programming in Haskell, Cambridge University Press 2016 (Second Edition). Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,Logic in Action, electronically available fromhttp://www.logicinaction.org Kees Doets and Jan van Eijck,The Haskell Road to Logic, Maths and Programming. College Publications, London 2012. Graham Hutton,Programming in Haskell, Cambridge University Press 2016 (Second Edition). Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,Logic in Action, electronically available fromhttp://www.logicinaction.org Kees Doets and Jan van Eijck,The Haskell Road to Logic, Maths and Programming. College Publications, London 2012. which tests are relevant --> this information states the preconditions of the code what the outcomes of the relevant tests should be --> this information states the postconditions of the code","Course catalogue number 5364EMSS6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of This course is an introduction to the domain of embedded systems, i.e., computing systems which are not immediately recognized as such. Examples include smart phones, televisions, and Internet-of-Things (IoT) devices, but also complex cyber-physical systems like airplanes, cars, and satellites. Designing such embedded systems fundamentally differs from traditional design methods for general-purpose computer software. Embedded systems are subject to specific requirements, especially in terms of efficiency (size, weight and power) and costs. At the same time, embedded systems are subject to increased reliability constraints. The go-to solution to resolve system errors for general-purpose computing, i.e., a complete system restart, is typically precluded in an embedded system. The system must always be available and must always reliably produce correct results. To further complicate matters, the correctness of most embedded systems is not just defined by the correct result of a computation, but by the correct result and the correct timing. Imagine an air-bag controller, which must inflate the air-bag in time before the driver’s head hits the steering wheel, or a flight control system, which must correct turbulences, before the airplane becomes unstable. Concerning less critical cases, we have for instance media players where the playback is delayed or the quality is degraded. The course covers the following topics: More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. A Canvas site for the course is available Course catalogue number 5364EMSS6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) prof. dr. K.B. Akesson MSc (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   prof. dr. K.B. Akesson MSc (co-ordinator) Master's Software Engineering The student is able to explain the key characteristics of embedded software and systems The student is able to specify embedded systems using aspect models at different levels of abstraction The student is able to functionally verify weak termination of systems using methods based on Petri Net models The student is able to verify schedulability of periodic tasks and perform cache analysis on a single-core system, and explain the added challenges in a multi-core system The student is able to explain how design-space exploration identifies hardware and software configurations that satisfy multi-dimensional constraints on e.g. cost, performance and energy consumption The student is able to work together in a team to develop software that satisfies its requirements on a given embedded platform Characteristics and constraints of embedded systems Model-based specification of the functional and non-functional behavior of an embedded system Analysis and verification of functional and non-functional behavior in embedded systems Selection and configuration of suitable embedded hardware architectures Programming (Java, Python, C++, or similar language) Computer Organization (preferred, not mandatory) Lecture Self-study Working independently on e.g. a project or thesis Laptop seminar Practical Project (group) Assignments (individual)","Course catalogue number 5364DCBS6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of DevOps is a modern software and applications development model that realises the continuous integration (CI), continuous deployment (CD) and continuous improvement of the services and applications that is deeply based on the cloud virtualisation, on demand services deployment and precision services monitoring currently available on the major cloud platforms. The course discusses the basic concepts of DevOps, including its philosophy, workflow, monitoring methods, and tools. Students will apply these concepts to understand how they can be best implemented to automate development, test, and release practices. Students will work in teams to apply DevOps model and tools to develop working applications and will use one of cloud and DevOps platforms. The following topics will be covered in the course: The course will also feature guest lectures from local cloud providers and DevOps companies. Familiarity with one of the programming languages: Java, C or Python, and with any IDE platform More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. The course assessment includes the following components: individual practical assignments; literature study; group project report  and code; project development process. Course catalogue number 5364DCBS6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. Z. Zhao (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. Z. Zhao (co-ordinator) Master's Software Engineering Graduates are familiar with the concept of DevOps and related technologies, their benefits for organisational IT infrastructure and services management; understand organisational aspects of DevOps, describe relation of DevOps to other technologies Graduates will understand how to build cloud-based applications and use cloud automation tools in the DevOps process applied to a range of applications and software development scenarios/processes Graduates will understand functionalities offered by the popular DevOps and cloud automations tools such as Chef, Terraform, Ansible,  and have practical hands on experience with one of such tools Introduction DevOps, core concepts and models, Continuous Delivery (CD), Continuous Integration (CI), Continuous Deployment. Agile development, relation to Agile, Scrum, Kanban, Lean Cloud Computing architecture, service models, virtualisation, resources management and monitoring DevOps and software engineering on major cloud platforms: AWS, Microsoft Azure. Cloud powered applications deployment, accounts management Cloud automation tools and platforms: Chef, Terraform, Ansible, and DevOps tools available from the major cloud providers AWS and Azure Software delivery life cycle in an agile DevOps organisation, QA in cloud based software development systems, secure applications development with DevSecOps DevOps applications architecture, configuration management, monitoring, environment setup on the selected cloud platform AWS or Microsoft Azure. Lecture Self-study Working independently on e.g. a project or thesis Laptop seminar Presentation/symposium Availability of Canvas site",-,[],[],[],[],[],[],"['requirements', 'engineering', 'instruction', 'lectures', 'syllabus', 'informatics', 'exam', 'modeling', 'knowledge', 'agile', 'applying', 'construct', 'approaches', 'elicitation', 'project', 'contact', 'planner', 'fnwiscience', 'discussing', 'esc', 'explores', 'stakeholder', '1sem', 'inherent', 'schedule', 'validation', '5364reen6y', 'appreciate', 'ondatanose', 'periods']","['requirement engineering', 'course engineering', 'knowledge requirement', 'interactive course', 'instruction english', 'contact education', 'engineering approaches', 'making lecture', 'add course', 'acquisition skills', 'school informatics', 'esc science', 'knowledge elicitation', 'uml diagrams', 'information procedures', 'syllabus kahnemanthinking', 'explore psychological', 'reading tests', 'applying theory', 'experiment inherent', 'project feedback', 'agile methods', 'construct humans', 'nl master', 'experience enable', 'model heart', 'simple domain', '1sem 2see', 'registration periods', 'express capture']","['explores requirement engineering', 'course explores requirement', 'course engineering requirements', 'engineering add course', 'software engineering understand', 'interactive course explores', 'knowledge acquisition skills', 'lab work course', 'decision making lecture', 'engineering example books', 'language instruction english', 'informatics lecturer contact', 'education desk fnwiscience', 'item course registration', 'modeling techniques uml', 'ordinator contact education', 'intricacies applying theory', 'servicedesk esc science', 'life project feedback', 'planner sem sem', 'nl master software', 'making best practices', 'model heart knowledge', 'construct humans means', 'run experiment inherent', 'domain finally design', 'reading tests paper', 'periods athttp student', 'express capture understand', '5364reen6y credits ec']","['requirements', 'study', 'seminar', 'thesis', 'instruction', 'lecturer', 'informatics', 'graduation', 'planner', 'presentation', 'catalogue', 'symposium', 'preparation', 'ideas', 'registration', 'engineering', 'language', 'uva', 'fnwiscience', 'schedule', 'esc', 'credits', 'build', 'foundation', '904b1020', 'defined', '1sem', 'course', 'ordinator', 'athttp']","['course registration', 'schedule course', 'language instruction', 'study materials', 'project thesis', 'idea lecturer', 'informatics lecturer', 'self study', 'seminar study', 'planning scientific', 'requirements time', 'ondatanose student', 'engineering graduation', 'preparation discuss', 'planner sem', 'esc science', 'information procedures', 'coordinator academic', 'learn build', 'text knowledge', 'catalogue number', 'proposal survey', 'defined themes', 'uva nl', 'foundation feasibility', 'getting approval', '5364prms6y credits', 'number defined', 'html schedule', 'possible define']","['course planner sem', 'lecturer help preparation', 'graduation project proposal', 'study materials available', 'course published ondatanose', 'graduate school informatics', 'self study presentation', 'ec language instruction', 'getting approval course', 'engineering add course', 'need theory analysis', 'deliverables course catalogue', 'course registration html', 'contact education desk', 'independently project thesis', 'discuss ideas students', 'english entry requirements', 'requirements time time', 'publications learn build', 'ondatanose student pass', 'information procedures registration', 'planning scientific reporting', 'az item course', 'science uva nl', 'text knowledge current', 'servicedesk esc science', 'sessions learn skills', 'time period college', 'number defined themes', 'catalogue number 5364prms6y']","['programming', 'requirements', 'informatics', 'projects', 'scrum', 'exams', 'lecturers', 'planner', 'seminar', 'procedures', 'complexity', 'organizing', 'developed', 'esc', 'uva', 'english', 'graduate', 'xp', 'desk', 'related', 'asml', 'fnwiscience', 'aspects', 'thousands', '5257100servicedesk', 'dso', 'increments', 'come', 'oram', 'spanning']","['software development', 'course setup', 'language instruction', 'informatics lecturer', 'requirements plans', 'large software', 'nl developing', 'projects information', 'programming test', 'planner sem', 'contact education', 'engineers ensuring', 'progress code', 'procedures registration', 'desk fnwiscience', 'pair programming', 'complexity helps', 'distribute tasks', 'developing large', 'collaboration thousands', 'rup scrum', '5257100servicedesk esc', 'uva nl', 'come understand', 'assessment quality', 'wilsonmaking software', 'credits ec', 'leprechauns lecture', 'overview spanning', 'periods athttp']","['learn software development', 'need course setup', 'features need course', 'graduate school informatics', 'ec language instruction', 'requirements plans designs', 'education desk fnwiscience', 'large scale software', 'software leprechauns lecture', 'follows knowledge software', 'planner sem sem', 'progress code produced', 'lecturer contact education', 'insight complexity developing', 'solution space needs', 'nl developing large', 'projects require collaboration', '5257100servicedesk esc science', 'work coordination assessment', 'practices field software', 'rup scrum xp', 'athttp student uva', 'development methods historical', 'procedures registration periods', 'test experience working', 'period college graduate', 'dutch government programs', 'com adyen bol', 'good performing groups', 'incomplete points invalid']",[],[],[],"['semester', 'courses', 'requirements', 'study', 'masterproject', 'instruction', 'lecturer', 'engineering', 'program', 'preparation', 'planner', 'credits', 'schedule', 'catalogue', 'supervision', 'thesis', 'informatics', 'esc', 'proposed', 'contact', 'presentation', '1sem', '904b1020', 'course', 'assessed', 'session', '18', 'phase', 'fnwiscience', 'ordinator']","['courses semester', 'course preparation', 'project course', 'requirements time', 'preparation masterproject', 'study time', 'add course', 'instruction english', 'project software', 'planner sem', 'phase academic', 'education desk', 'informatics lecturer', 'contact education', 'ec language', 'thesis supervision', 'engineering assessed', 'esc science', '5364mas18y credits', 'catalogue number', 'program passed', 'graduate graduate', 'research carried', 'ordinator contact', 'available weekly', 'feedback meeting', 'uva nl', '1sem 2see', 'distribute necessary', 'session order']","['course preparation masterproject', 'master project schedule', 'course catalogue number', 'students courses semester', 'study time preparation', 'master software engineering', 'project course coordinator', 'schedule course published', 'program passed course', 'contact education desk', 'instruction english entry', 'semester block second', 'project plan related', 'entry requirements time', 'graduate school informatics', 'software engineering add', 'planner sem sem', 'nl master software', 'engineering self study', 'phase academic supervisor', 'assessed dimensions course', '18 ec language', 'need approval preparation', '5364mas18y credits 18', 'servicedesk esc science', 'presentation symposium working', 'fnwiscience park 904b1020', 'literature research carried', 'dr oprescu ordinator', 'session order start']","['programming', 'maintenance', 'assignments', 'refactoring', 'tools', 'rascal', 'syllabus', 'informatics', 'repositories', 'ruby', 'seminar', 'introductory', 'mining', 'visualisations', 'lab', 'parsing', 'clone', 'mpl', 'php', 'annotated', 'english', 'sem', 'metrics', 'transformations', 'course', 'uva', 'graduate', 'insight', 'fnwiscience', '904b1020']","['software maintenance', 'software engineering', 'rascal programming', 'construct software', 'analysis software', 'software visualisations', 'code analysis', 'software metrics', 'programming skills', 'language workbench', 'meta programming', 'knowledge compiler', 'seminar computer', 'engineering reengineering', 'repositories refactoring', 'lab assignments', 'instruction english', 'ruby use', 'transformation tools', 'course catalogue', 'topics clone', 'asts basic', 'objective learn', 'mpl org', 'study real', 'detection mining', 'sem 1sem', 'uva nl', 'understanding appreciation', 'html schedule']","['rascal programming language', 'software maintenance evolution', 'software source code', 'software engineering add', 'seminar computer lab', 'software metrics software', 'analysis software transformation', 'languages knowledge compiler', 'quality advanced programming', 'software repositories refactoring', 'challenges posed software', 'nl master software', 'obtain insight software', 'reverse engineering reengineering', 'software visualisations time', 'research papers maintenance', 'course course reader', 'language workbench meta', 'ec language instruction', 'topics clone detection', 'detection mining software', 'renovation example topics', 'php ruby use', 'planner sem sem', 'transformation tools help', 'assignments available canvas', 'mpl org potentially', 'evolution http www', 'appreciation challenges posed', 'park 904b1020 5257100servicedesk']",[],[],[],"['testing', 'haskell', 'programming', 'specification', 'automating', 'requirements', 'instruction', 'study', 'languages', 'formal', 'imperative', 'logicinaction', 'seminar', 'sem', 'schedule', 'ordinator', 'fnwiscience', 'electronically', 'graduate', 'uva', 'postconditions', 'outcomes', 'credits', 'pre', 'consists', 'generator', '5257100servicedesk', 'periods', 'athttp', 'graham']","['testing haskell', 'test programs', 'specifications testing', 'automating test', 'software specification', 'languages tested', 'verification testing', 'language instruction', 'programming college', 'testable write', 'generation automating', 'given requirements', 'course registration', 'examination consists', 'information procedures', 'entail checking', 'functional imperative', 'write formal', 'nl software', 'code outcomes', 'process need', 'preconditions code', 'www logicinaction', 'desk fnwiscience', 'theory practical', 'sem 1sem', 'oprescu ordinator', 'number 5364ssvt6y', 'plus final', 'periods athttp']","['specifications testing haskell', 'formal specifications testing', 'generation automating test', 'programs easily testable', 'test process need', 'written haskell course', 'testable write formal', 'languages tested given', 'tests information states', 'verification testing entail', 'specification aim automate', 'nl software specification', 'functional imperative languages', 'course examination consists', 'ec language instruction', 'master software engineering', 'london 2012 tests', 'abstraction make programs', 'programming college publications', 'use tools automated', 'process lecture seminar', 'satisfies given requirements', 'logic maths programming', 'information procedures registration', 'preconditions code outcomes', 'planner sem sem', 'self study literature', 'athttp student uva', 'servicedesk esc science', 'number 5364ssvt6y credits']","['hardware', 'embedded', 'systems', 'computing', 'iot', 'java', 'schedulability', 'requirements', 'reliability', 'errors', 'core', 'satellites', 'restart', 'defined', 'complete', 'cache', 'msc', 'playback', 'controller', 'termination', 'lecture', 'aspect', 'esc', 'purpose', 'energy', '5257100servicedesk', 'ordinator', 'fnwiscience', 'covers', 'produce']","['embedded systems', 'systems subject', 'purpose computing', 'software satisfies', 'termination systems', 'resolve errors', 'identifies hardware', 'reliability constraints', 'things iot', 'restart typically', 'cyber physical', 'correctness embedded', 'programming java', 'laptop seminar', 'specification functional', 'ec language', 'core explain', 'flight control', 'servicedesk esc', 'site course', 'include smart', 'msc ordinator', 'time driver', 'schedulability periodic', 'cars satellites', 'perform cache', 'methods general', 'playback delayed', 'number 5364emss6y', 'power costs']","['embedded systems subject', 'correctness embedded systems', 'systems computing systems', 'general purpose computing', 'embedded available reliably', 'software satisfies requirements', 'computing complete restart', 'systems immediately recognized', 'resolve errors general', 'termination systems using', 'devices complex cyber', 'increased reliability constraints', 'able verify schedulability', 'exploration identifies hardware', 'challenges multi core', '5257100servicedesk esc science', 'laptop seminar practical', 'examples include smart', 'tasks perform cache', 'planner sem sem', 'language instruction english', 'core explain added', 'specification functional non', 'cases instance media', 'akesson msc ordinator', 'cost performance energy', 'wheel flight control', 'phones televisions internet', 'degraded course covers', 'players playback delayed']","['devops', 'deployment', 'informatics', 'programming', 'ansible', 'virtualisation', 'terraform', 'development', 'automate', 'monitoring', 'azure', 'esc', 'lectures', 'graduates', 'services', 'delivery', 'scrum', 'assessment', 'ci', 'core', 'configuration', 'related', 'concept', 'desk', 'cd', 'integration', 'aspects', '5257100servicedesk', '2see', 'periods']","['devops software', 'cloud automations', 'course registration', 'informatics lecturer', 'azure lecture', 'processes graduates', 'tools students', 'development test', 'monitoring environment', 'terraform ansible', 'engineering add', 'servicedesk esc', 'planner sem', 'configuration management', 'ec language', 'precision services', 'integration ci', 'deployment accounts', 'virtualisation demand', 'selected cloud', 'delivery cd', 'management understand', 'platform information', 'desk fnwiscience', 'symposium availability', 'java python', 'core concepts', 'number 5364dcbs6y', 'scrum kanban', 'feature guest']","['devops technologies graduates', 'basic concepts devops', 'cloud devops platforms', 'management monitoring devops', 'uva nl devops', 'understand build cloud', 'cloud automations tools', 'lectures local cloud', 'process course catalogue', 'terraform ansible devops', 'course feature guest', 'based software development', 'engineering add course', 'platforms course discusses', 'continuous deployment cd', 'development test release', 'virtualisation resources management', 'informatics lecturer dr', 'azure software delivery', 'ec language instruction', 'computing architecture service', 'sem sem college', '5257100servicedesk esc science', 'monitoring currently available', 'secure applications development', 'continuous improvement services', 'students work teams', 'familiarity programming languages', 'project thesis laptop', 'scrum kanban lean']",[],[],[]
2022-2023,-,-,"Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of This highly interactive course explores requirement engineering (RE) approaches and pitfalls by discussing real life cases. Supplementary lectures will go into truth finding, sense making, best practices, methods and will provide an abstract model for RE. At the heart, RE is about knowledge elicitation, creation and validation. Making decisions about what system to construct. We humans are by no means truth telling and finding machines. You will explore psychological and philosophical sources to get a better understanding of how that works. To do proper requirements engineering requires a number of skills, during this course we will work to develop your skills in a small real life project. This first hand experience will enable you to better appreciate the intricacies in applying theory even in a simple domain. Knowledge of requirement engineering, for example books of Sommerville, Robertson, van Lamsweerde, Wiegers or Pohl. 'Modeling techniques', e.g. UML diagrams to describe software behaviour. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration-the-right-system-for-the-right-course The schedule for this course is published onDataNose. Reading tests, paper and lab work. Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering You will understand why organizational and stakeholder needs are hard to express, capture and understand You will learn the shortcomings in the (agile) methods and best practices that are widely used Furthermore you will learn how to use scenarios and hard data to improve the likelihood of creating the right system Lecture Seminar Working independently on e.g. a project or thesis Supervision/feedback meeting Self-study Presentation/symposium Literature:Steven Pinker, Rationality. What it is, why it seems scarce, why it matters Steven Pinker, Rationality. What it is, why it seems scarce, why it matters Syllabus:  Steven Pinker, Rationality. What it is, why it seems scarce, why it matters ","Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For both part-time and full-time students. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of During paper sessions you learn skills to find, read and assess relevant scientific publications. You will also learn to build argumentation structures you need for your theory and analysis. For your graduation project, you can choose from a number of defined themes. It is also possible to define a project yourself, once you have thoroughly examined the foundation and feasibility of your idea. The lecturer will help you during the preparation. You will also discuss your ideas with other students. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration-the-right-system-for-the-right-course The schedule for this course is published onDataNose. The student can pass the course by getting approval from the course coordinator and the academic supervisor for two deliverables: Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For both part-time and full-time students. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. ir. M.C. Bor (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. ir. M.C. Bor (co-ordinator) Master's Software Engineering Problem analysis Scientific literature survey Theory building Hypothesizing Structuring research and validation Project planning Scientific reporting Self-study Presentation/symposium Working independently on e.g. a project or thesis Supervision/feedback meeting Seminar Other:Study materials are made available through the course’s Canvas page. Study materials are made available through the course’s Canvas page. Study materials are made available through the course’s Canvas page. An interest in reading and writing scientific literature Affinity with reading and writing English text Knowledge of current challenges and results in software engineering Graduation project proposal Survey of related literature","Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Developing large scale software systems is challenging for many reasons. Our understanding of what needs to be done is at best incomplete, at points invalid, and subject to change. It’s hard to determine the adequacy of requirements, plans, designs and increments. The biggest projects require collaboration of thousands of people, with imperfect mechanisms for division of work, coordination, assessment of quality and assessment of progress. It proofs hard to be a truely learning organization and to adapt in the right way. The code that is produced restricts the solution space for what still needs to be developed, and at worst proofs an obstacle to add the features that are needed. The course setup is as follows: Knowledge of software methods like Rup, Scrum, Xp and software practices like pair programming, test first. Experience with working in big projects. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration-the-right-system-for-the-right-course The schedule for this course is published onDataNose. Reading tests, essays. Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering Insight in methods and best practices in the field of Software Engineering. Understand what problems these try to solve. Being able to make a contextual analysis and propose a fitting organization. Insight into complexity of developing large software systems Understanding what agility is, and how this is related to process, ability and architecture Understanding what planning entails, and how planning can contribute to a successful outcome Insight in individual, team and organizational performance Insight in organizational patterns to decompose and distribute tasks and empower engineers while ensuring their combined work leads to a successful outcome Every week you will read research papers about a different topic and supplement this with information from professional and expert blogs Engineers, consultants and technical managers from a variety of companies will share their experiences and give insight in how they create and deliver software. In the past we had presentations from companies like Netflix, Spotify, Microsoft Azure, ICTU, BitVavo,  Adyen, Booking.com, Bol.com, ING. You will apply your knowledge on a small case for which you will design an adequate  software engineering organization and think about how this would work out for a number of situations. You will learn from well documented failed cases. The lectures and tutorials are designed as dialogue to help you think about the subject matter Lecture Seminar Presentation/symposium Supervision/feedback meeting",-,"Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Carry out the research as proposed by the plan you made in the preparation phase. An academic supervisor will be available for (weekly) feedback and discussion. Part-time students will need to discuss their planning with the coordinator and the academic supervisor, as there are various possibilities to distribute the necessary work across the study time. Preparation Master Project The schedule for this course is published onDataNose. The Master Project Software Engineering is assessed along three dimensions: Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. ir. M.C. Bor (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. ir. M.C. Bor (co-ordinator) Master's Software Engineering Acquiring the ability to do research by designing, executing and reporting on a project in the area of software engineering research Adding knowledge or gathering new evidence in the field of software engineering Self-study Presentation/symposium Working independently on e.g. a project or thesis Supervision/feedback meeting Literature:Scientific literature Scientific literature Scientific literature research carried out written thesis presentation and discussion during the defense session In order to start the Master’s project you need to have approval from the Preparation Master Project course coordinator and your academic supervisor on your project plan and related literature survey.","Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of This course is designed around lab sessions in which we study real and large (open-source) software systems. We use Rascal -a programming language workbench, or meta programming language- to apply and build software metrics, software analyses, software visualisations and software transformations. Seehttp://www.rascal-mpl.org.The student is supported with introductory material and interactive lab sessions (including a guest lecture) to learn Rascal. The course consists of a series of lectures on the theory of software maintenance and evolution, guest lecturers from field experts, working in pairs on practical assignments and a guided study of research papers on maintenance, maintainability, empirical software engineering and language engineering. Example topics are clone detection, maintainability metrics, and (automated) refactoring. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration-the-right-system-for-the-right-course The schedule for this course is published onDataNose. This course uses the following form of assessments, that will be detailed at the start of the course: The course reader and assignments will be made available on Canvas. Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. L.T. van Binsbergen (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. L.T. van Binsbergen (co-ordinator) Master's Software Engineering Understand a wide range of challenges stemming from the fact that software is developed in large, dynamic teams, is subjected to changing requirements and needs to be adapted to new contexts Apply language engineering and empirical software engineering techniques to large code-bases in order to analyze them using various software quality metrics (e.g. to measure maintainability) Analyze scientific contributions from selected papers addressing the challenges in software evolution discussed in lectures and covered in practicals Evaluate one's own implementation of a software analysis tool by experimenting with the implementation (e.g. tweaking parameters or implementation choices), drawing comparisons with alternative approaches in literature, and/or against a set of clearly specified requirements Advanced programming skills in several programming languages Experience with sizeable programming projects (e.g. Project Software Engineering) Ideally also knowledge of compiler construction (e.g. parsing, ASTs, basic code analysis, etc.) Good (academic) English reading and writing skills Lecture Laptop seminar Computer lab session/practical training Self-study Presentation/symposium Syllabus:Reader consisting of selected papers on software evolution Reader consisting of selected papers on software evolution Other:http://www.rascal-mpl.orgPotentially other (academic) sources made available on Canvas http://www.rascal-mpl.org Potentially other (academic) sources made available on Canvas Reader consisting of selected papers on software evolution http://www.rascal-mpl.org Potentially other (academic) sources made available on Canvas practical lab assignments performed in pairs and assessed by a demonstration/presentation and a report individual reading and writing exercise in the form of an annotated bibliography for a selection of papers",-,"Course catalogue number 5364SSVT6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Software specification, verification, and testing entail checking whether a given software system satisfies given requirements and/or specifications. Without a specification, it is impossible to state what a piece of software should do, and there is no reasonable way to set up the test process. An informal specification is not enough. If we aim to automate the test process we need pre-given information about: Programs written in functional or imperative languages can be tested, given a formal specification, by means of a random test generator. This test method will be illustrated for a number of example programs that are written in Haskell. The course assumes basic familiarity with this language and focusses on how to test programs written in either functional or imperative style, and how to use tools for automated test generation. Basic familiarity with logic and functional programming in Haskell. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration-the-right-system-for-the-right-course The schedule for this course is published onDataNose. Course examination consists of weekly assignments plus a final exam both the theory and practical parts. Course catalogue number 5364SSVT6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering understand and write specifications in the language of predicate logic use type-specification and abstraction to make programs more easily testable write formal specifications for testing Haskell code use random test generation for automating the test process Lecture Seminar Laptop seminar Self-study Literature:Graham Hutton,Programming in Haskell, Cambridge University Press 2016 (Second Edition).Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,Logic in Action, electronically available fromhttp://www.logicinaction.orgKees Doets and Jan van Eijck,The Haskell Road to Logic, Maths and Programming. College Publications, London 2012. Graham Hutton,Programming in Haskell, Cambridge University Press 2016 (Second Edition). Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,Logic in Action, electronically available fromhttp://www.logicinaction.org Kees Doets and Jan van Eijck,The Haskell Road to Logic, Maths and Programming. College Publications, London 2012. Graham Hutton,Programming in Haskell, Cambridge University Press 2016 (Second Edition). Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,Logic in Action, electronically available fromhttp://www.logicinaction.org Kees Doets and Jan van Eijck,The Haskell Road to Logic, Maths and Programming. College Publications, London 2012. which tests are relevant --> this information states the preconditions of the code what the outcomes of the relevant tests should be --> this information states the postconditions of the code",-,"Course catalogue number 5364DCBS6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of DevOps is a modern software and applications development model that realises the continuous integration (CI), continuous deployment (CD) and continuous improvement of the services and applications that is deeply based on the cloud virtualisation, on demand services deployment and precision services monitoring currently available on the major cloud platforms. The course discusses the basic concepts of DevOps, including its philosophy, workflow, monitoring methods, and tools. Students will apply these concepts to understand how they can be best implemented to automate development, test, and release practices. Students will work in teams to apply DevOps model and tools to develop working applications and will use one of cloud and DevOps platforms. The following topics will be covered in the course: The course will also feature guest lectures from local cloud providers and DevOps companies. Familiarity with one of the programming languages: Java, C or Python, and with any IDE platform. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration-the-right-system-for-the-right-course The schedule for this course is published onDataNose. The course assessment includes the following components: individual practical assignments; literature study; group project report  and code; project development process. Course catalogue number 5364DCBS6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. Z. Zhao (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   dr. Z. Zhao (co-ordinator) Master's Software Engineering Graduates are familiar with the concept of DevOps and related technologies, their benefits for organisational IT infrastructure and services management; understand organisational aspects of DevOps, describe relation of DevOps to other technologies Graduates will understand how to build cloud-based applications and use cloud automation tools in the DevOps process applied to a range of applications and software development scenarios/processes Graduates will understand functionalities offered by the popular DevOps and cloud automations tools such as Chef, Terraform, Ansible,  and have practical hands on experience with one of such tools Introduction DevOps, core concepts and models, Continuous Delivery (CD), Continuous Integration (CI), Continuous Deployment. Agile development, relation to Agile, Scrum, Kanban, Lean Cloud Computing architecture, service models, virtualisation, resources management and monitoring DevOps and software engineering on major cloud platforms: AWS, Microsoft Azure. Cloud powered applications deployment, accounts management Cloud automation tools and platforms: Chef, Terraform, Ansible, and DevOps tools available from the major cloud providers AWS and Azure Software delivery life cycle in an agile DevOps organisation, QA in cloud based software development systems, secure applications development with DevSecOps DevOps applications architecture, configuration management, monitoring, environment setup on the selected cloud platform AWS or Microsoft Azure. Lecture Self-study Working independently on e.g. a project or thesis Laptop seminar Presentation/symposium Other:Online materials will be provided via Canvas. Online materials will be provided via Canvas. Online materials will be provided via Canvas. Availability of Canvas site","Course catalogue number 5364MBDC6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Cyber-physical systems (CPS) are systems that integrate computation, sensing, actuation, and networking to interact with and control the physical world. They are built for a particular purpose and exist in many application domains. Well-known examples of CPS from different domains include satellites, airplanes, cars, cleaning robots, smart grids, smart lighting, x-ray machines, printers, radars, and lithography machines. The design of CPS is a multi-disciplinary activity that combines different fields, such as embedded systems, software engineering, control theory, and mechatronics, and is fundamentally different from the design of general-purpose computer systems, such as a desktop computer. CPS are subject to different non-functional requirements, such as size, weight, energy consumption, reliability, security, and cost. Some cyber-physical systems, such as a car or an airplane, are furthermore safety critical, and must guarantee that a system failure cannot result in death or injury. Such a system must always be available and must reliably produce correct results. To further complicate matters, the correctness of most CPS is not just defined by the correct result of a computation, but by the correct result and the correct timing. For example, consider an air-bag controller in a car, which must inflate the air-bag in time before the driver’s head hits the steering wheel, or a flight control system, which must correct turbulence before the airplane becomes unstable. Trends show that CPS across application domains are getting more and more complex. The consequences of this increasing complexity are visible in daily practice in which industry struggles to efficiently develop correct and well-performing CPS. This course is an introduction to CPS and their design, with a focus on computing aspects (hardware and software). It teaches how the increasing complexity of CPS can be addressed by model-based design methodologies in which abstraction, provided by models used for specification, analysis, simulation, or synthesis, play an essential role in increasing system quality and reducing development time and overall system cost. The course covers the following topics: More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration-the-right-system-for-the-right-course The schedule for this course is published onDataNose. A Canvas site for the course is available Course catalogue number 5364MBDC6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) prof. dr. K.B. Akesson MSc (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   prof. dr. K.B. Akesson MSc (co-ordinator) Master's Software Engineering The student is able to explain the key characteristics and complexity drivers of cyber-physical systems The student is able to specify aspects of cyber-physical systems using models at different levels of abstraction The student is able to functionally verify weak termination of systems using methods based on Petri Net models The student is able to verify schedulability of periodic tasks and perform cache analysis on a single-core system, and explain the added challenges in a multi-core system The student is able to explain how design-space exploration identifies hardware and software configurations that satisfy multi-dimensional constraints on e.g. cost, performance and energy consumption The student is able to work together in a team to develop software that satisfies its requirements for a given cyber-physical system in a model-based manner An introduction to cyber-physical systems and their key characteristics and complexity drivers Model-based specification, analysis, and verification of functional and non-functional behavior of cyber-physical systems Model-based software development for cyber-physical systems Identification and selection of suitable hardware and software configurations that satisfy multi-dimensional constraints on e.g. cost, performance, and energy consumption in a cyber-physical system Programming (Java, Python, C++, or similar language) Computer Organization (preferred, not mandatory) Lecture Laptop seminar Self-study Working independently on e.g. a project or thesis Three assignments Practical group project",[],[],[],[],[],[],"['requirements', 'engineering', 'instruction', 'syllabus', 'topics', 'lectures', 'informatics', 'modeling', 'knowledge', 'develop', 'applying', 'contact', 'agile', 'construct', 'planner', 'elicitation', 'fnwiscience', 'explore', 'tests', 'esc', 'stakeholder', '5364reen6y', 'sommerville', '1sem', 'supplementary', 'hard', 'van', 'likelihood', 'enable', 'periods']","['requirement engineering', 'knowledge requirement', 'skills course', 'explores requirement', 'engineering understand', 'language instruction', 'informatics lecturer', 'self study', 'en topics', 'techniques uml', 'intricacies applying', 'knowledge elicitation', 'matters syllabus', 'supplementary lectures', 'procedures registration', 'planner sem', 'needs hard', 'books sommerville', 'diagrams software', 'understand organizational', 'construct humans', 'science uva', 'ordinator contact', 'experience enable', 'approaches pitfalls', 'servicedesk esc', 'simple domain', '1sem 2see', 'improve likelihood', 'periods athttps']","['explores requirement engineering', 'knowledge requirement engineering', 'course explores requirement', 'engineering add course', 'domain knowledge requirement', 'software engineering understand', 'course schedule course', 'engineering example books', 'learn use scenarios', 'creating right lecture', 'language instruction english', 'informatics lecturer contact', 'education desk fnwiscience', 'requires number skills', 'ordinator contact education', 'techniques uml diagrams', 'intricacies applying theory', 'servicedesk esc science', 'information procedures registration', 'nl master software', 'scarce matters syllabus', 'work develop skills', 'construct humans means', 'model heart knowledge', 'books sommerville robertson', 'life project hand', 'independently project thesis', 'needs hard express', 'improve likelihood creating', '1sem 2see sem']","['requirements', 'study', 'thesis', 'instruction', 'lecturer', 'topics', 'informatics', 'project', 'graduation', 'ideas', 'presentation', 'planner', 'engineering', 'preparation', 'symposium', 'language', 'registration', 'catalogue', 'fnwiscience', 'esc', 'schedule', 'credits', 'uva', 'structures', 'defined', '904b1020', 'foundation', '1sem', 'ordinator', 'athttps']","['course registration', 'language instruction', 'project thesis', 'study materials', 'planning scientific', 'informatics lecturer', 'seminar study', 'ideas students', 'engineering graduation', 'preparation discuss', 'requirements time', 'en topics', 'education desk', 'esc science', 'theory building', 'learn build', 'text knowledge', 'information procedures', 'validation project', 'defined themes', 'catalogue number', 'foundation feasibility', '5364prms6y credits', 'getting approval', 'sem 1sem', 'uva nl', 'number defined', '904b1020 5257100servicedesk', 'possible define', 'periods athttps']","['topics course registration', 'idea lecturer help', 'graduation project proposal', 'study materials available', 'language instruction english', 'project planning scientific', 'schedule course published', 'self study presentation', 'graduate school informatics', 'help preparation discuss', 'course catalogue number', 'student pass course', 'theory analysis graduation', 'students information procedures', 'engineering add course', 'getting approval course', 'independently project thesis', 'contact education desk', 'esc science uva', 'publications learn build', 'planner sem sem', 'structures need theory', 'writing scientific literature', 'text knowledge current', 'entry requirements time', 'periods athttps student', '5364prms6y credits ec', 'defined themes possible', 'ir bor ordinator', 'choose number defined']","['programming', 'informatics', 'requirements', 'developing', 'scrum', 'instruction', 'complexity', 'tasks', 'lectures', 'consultants', 'technical', 'ictu', 'architecture', 'knowledge', 'collaboration', 'fnwiscience', 'desk', 'esc', 'related', 'english', 'ensuring', 'graduate', 'xp', 'determine', 'course', 'nl', '5364sopr6y', 'thousands', 'ordinator', 'supplement']","['course setup', 'software engineering', 'informatics lecturer', 'complexity developing', 'learning organization', 'learn documented', 'nl developing', 'language instruction', 'knowledge software', 'requirements plans', 'tutorials designed', 'scrum xp', 'projects information', 'desk fnwiscience', 'contact education', 'esc science', 'student uva', 'symposium supervision', 'pair programming', 'en topics', 'distribute tasks', 'solution space', 'collaboration thousands', 'assessment quality', 'analysis propose', '5257100servicedesk esc', 'case design', 'proofs obstacle', '2see sem', 'right right']","['features needed course', 'design adequate software', 'education desk fnwiscience', 'software engineering organization', 'ec language instruction', 'lectures tutorials designed', 'informatics lecturer contact', 'projects information procedures', 'learn documented failed', 'programming test experience', 'truely learning organization', 'course catalogue number', 'insight complexity developing', 'solution space needs', 'engineering understand problems', 'setup follows knowledge', 'nl developing large', '5257100servicedesk esc science', 'require collaboration thousands', 'planning entails planning', 'uva nl master', 'rup scrum xp', 'blogs engineers consultants', 'increments biggest projects', 'coordination assessment quality', 'presentation symposium supervision', 'determine adequacy requirements', 'sem sem drs', 'change hard determine', 'code produced restricts']",[],[],[],"['semester', 'courses', 'requirements', 'study', 'masterproject', 'instruction', 'lecturer', 'engineering', 'program', 'preparation', 'planner', 'credits', 'schedule', 'catalogue', 'supervision', 'thesis', 'informatics', 'esc', 'proposed', 'contact', 'presentation', '1sem', '904b1020', 'course', 'assessed', 'session', '18', 'phase', 'fnwiscience', 'ordinator']","['courses semester', 'course preparation', 'project course', 'requirements time', 'preparation masterproject', 'study time', 'add course', 'instruction english', 'project software', 'planner sem', 'phase academic', 'education desk', 'informatics lecturer', 'contact education', 'ec language', 'thesis supervision', 'engineering assessed', 'esc science', '5364mas18y credits', 'catalogue number', 'program passed', 'graduate graduate', 'research carried', 'ordinator contact', 'available weekly', 'feedback meeting', 'uva nl', '1sem 2see', 'distribute necessary', 'session order']","['course preparation masterproject', 'master project schedule', 'course catalogue number', 'students courses semester', 'study time preparation', 'master software engineering', 'project course coordinator', 'schedule course published', 'program passed course', 'contact education desk', 'instruction english entry', 'semester block second', 'project plan related', 'entry requirements time', 'graduate school informatics', 'software engineering add', 'planner sem sem', 'nl master software', 'engineering self study', 'phase academic supervisor', 'assessed dimensions course', '18 ec language', 'need approval preparation', '5364mas18y credits 18', 'servicedesk esc science', 'presentation symposium working', 'fnwiscience park 904b1020', 'ir bor ordinator', 'literature research carried', 'session order start']","['programming', 'rascal', 'assignments', 'lectures', 'syllabus', 'maintainability', 'refactoring', 'languages', 'informatics', 'introductory', 'tool', 'requirements', 'lab', 'parsing', 'visualisations', 'mpl', 'procedures', 'annotated', 'implementation', 'catalogue', 'empirical', 'metrics', 'clone', 'stemming', 'course', 'transformations', 'esc', '904b1020', 'apply', 'periods']","['rascal programming', 'software maintenance', 'engineering language', 'software transformations', 'programming projects', 'empirical software', 'software metrics', 'software visualisations', 'code analysis', 'seminar computer', 'meta programming', 'knowledge compiler', 'instruction english', 'analysis tool', 'lab assignments', 'course reader', 'refactoring information', 'series lectures', 'asts basic', 'requirements advanced', 'experimenting implementation', 'practical training', 'sessions study', 'mpl org', 'clone detection', 'uva nl', 'understand wide', 'sem 1sem', 'sources available', '904b1020 5257100servicedesk']","['rascal programming language', 'lecture learn rascal', 'software engineering understand', 'seminar computer lab', 'metrics software analyses', 'skills programming languages', 'ideally knowledge compiler', 'requirements advanced programming', 'language engineering empirical', 'nl master software', 'maintenance maintainability empirical', 'projects project software', 'papers software evolution', 'topics course registration', 'ec language instruction', 'language workbench meta', 'tool experimenting implementation', 'refactoring information procedures', 'mpl org student', 'techniques large code', 'introductory material interactive', 'servicedesk esc science', 'analysis good academic', 'assignments available canvas', 'evolution reader consisting', 'bases order analyze', 'sem sem dr', 'college graduate graduate', 'right right course', 'park 904b1020 5257100servicedesk']",[],[],[],"['testing', 'haskell', 'programming', 'specification', 'automating', 'requirements', 'instruction', 'study', 'languages', 'formal', 'imperative', 'logicinaction', 'seminar', 'sem', 'schedule', 'ordinator', 'fnwiscience', 'electronically', 'graduate', 'uva', 'postconditions', 'outcomes', 'credits', 'pre', 'consists', 'generator', '5257100servicedesk', 'periods', 'athttps', 'right']","['testing haskell', 'test programs', 'specifications testing', 'automating test', 'software specification', 'languages tested', 'verification testing', 'language instruction', 'programming college', 'testable write', 'generation automating', 'given requirements', 'course registration', 'examination consists', 'information procedures', 'entail checking', 'functional imperative', 'write formal', 'nl software', 'code outcomes', 'process need', 'preconditions code', 'www logicinaction', 'desk fnwiscience', 'theory practical', 'sem 1sem', 'oprescu ordinator', 'number 5364ssvt6y', 'plus final', 'periods athttps']","['specifications testing haskell', 'formal specifications testing', 'programs easily testable', 'test process lecture', 'test generation basic', 'automate test process', 'software specification verification', 'written haskell course', 'testable write formal', 'languages tested given', 'tests information states', 'verification testing entail', 'specification aim automate', 'given requirements specifications', 'functional imperative languages', 'course schedule course', 'ec language instruction', 'software engineering understand', 'abstraction make programs', 'programming college publications', 'logic maths programming', 'information procedures registration', 'preconditions code outcomes', 'uva nl software', 'ordinator master software', 'self study literature', 'periods athttps student', 'servicedesk esc science', 'sem dr oprescu', 'number 5364ssvt6y credits']",[],[],[],"['devops', 'deployment', 'informatics', 'programming', 'ansible', 'virtualisation', 'terraform', 'development', 'automate', 'monitoring', 'azure', 'esc', 'lectures', 'graduates', 'services', 'delivery', 'scrum', 'assessment', 'ci', 'core', 'configuration', 'related', 'concept', 'desk', 'cd', 'integration', 'aspects', '5257100servicedesk', '2see', 'periods']","['devops software', 'cloud automations', 'course registration', 'informatics lecturer', 'azure lecture', 'processes graduates', 'tools students', 'development test', 'monitoring environment', 'terraform ansible', 'engineering add', 'servicedesk esc', 'configuration management', 'ec language', 'precision services', 'integration ci', 'deployment accounts', 'laptop seminar', 'virtualisation demand', 'selected cloud', 'delivery cd', 'management understand', 'platform information', 'desk fnwiscience', 'java python', 'core concepts', 'number 5364dcbs6y', 'scrum kanban', '2see sem', 'feature guest']","['devops technologies graduates', 'basic concepts devops', 'cloud devops platforms', 'management monitoring devops', 'uva nl devops', 'understand build cloud', 'cloud automations tools', 'lectures local cloud', 'process course catalogue', 'terraform ansible devops', 'course feature guest', 'based software development', 'engineering add course', 'platforms course discusses', 'continuous deployment cd', 'development test release', 'virtualisation resources management', 'informatics lecturer dr', 'azure software delivery', 'ec language instruction', 'sem sem college', '5257100servicedesk esc science', 'monitoring currently available', 'secure applications development', 'continuous improvement services', 'students work teams', 'familiarity programming languages', 'project thesis laptop', 'periods athttps student', 'scrum kanban lean']","['cps', 'systems', 'mechatronics', 'hardware', 'design', 'informatics', 'programming', 'cyber', 'requirements', 'msc', 'desk', 'radars', 'printers', 'core', 'petri', 'schedulability', 'defined', 'controller', 'esc', 'characteristics', 'thesis', 'energy', '5257100servicedesk', 'disciplinary', 'safety', 'fnwiscience', 'ordinator', 'athttps', 'consider', 'integrate']","['cps systems', 'embedded systems', 'physical programming', 'machines design', 'engineering control', 'systems desktop', 'design space', 'systems identification', 'introduction cyber', 'grids smart', 'based specification', 'school informatics', 'desk fnwiscience', 'project thesis', 'planner sem', 'net models', 'msc ordinator', 'tasks perform', 'course covers', 'requirements size', 'consumption reliability', 'printers radars', 'core explain', 'bag controller', '904b1020 5257100servicedesk', 'cleaning robots', 'satellites airplanes', 'schedulability periodic', 'analysis verification', 'security cost']","['physical systems cps', 'computer cps subject', 'machines design cps', 'cyber physical systems', 'design cps multi', 'requirements given cyber', 'explain design space', 'computer systems desktop', 'embedded systems software', 'systems student able', 'robots smart grids', 'systems identification selection', 'graduate school informatics', 'software engineering control', 'characteristics complexity drivers', 'engineering add course', 'petri net models', 'computation sensing actuation', 'mechatronics fundamentally different', 'termination systems using', 'analysis single core', 'schedulability periodic tasks', 'nl servicedesk esc', 'desk fnwiscience park', 'energy consumption reliability', 'include satellites airplanes', 'radars lithography machines', 'air bag controller', 'cost course covers', '5364mbdc6y credits ec']"
2023-2024,-,-,"Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of This highly interactive course explores requirement engineering (RE) approaches and pitfalls by discussing real life cases. Supplementary lectures will go into truth finding, sense making, best practices, methods and will provide an abstract model for RE. At the heart, RE is about knowledge elicitation, creation and validation. Making decisions about what system to construct. We humans are by no means truth telling and finding machines. You will explore psychological and philosophical sources to get a better understanding of how that works. To do proper requirements engineering requires a number of skills, during this course we will work to develop your skills in a small real life project. This first hand experience will enable you to better appreciate the intricacies in applying theory even in a simple domain. Knowledge of requirement engineering, for example books of Sommerville, Robertson, van Lamsweerde, Wiegers or Pohl. 'Modeling techniques', e.g. UML diagrams to describe software behaviour. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration Reading tests, paper and lab work. Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering You will understand why organizational and stakeholder needs are hard to express, capture and understand You will learn the shortcomings in the (agile) methods and best practices that are widely used Furthermore you will learn how to use scenarios and hard data to improve the likelihood of creating the right system Lecture Seminar Working independently on e.g. a project or thesis Supervision/feedback meeting Self-study Presentation/symposium Literature:Noise: a flaw in human judgement (Kahneman) Noise: a flaw in human judgement (Kahneman) Syllabus:  Noise: a flaw in human judgement (Kahneman) ","Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For both part-time and full-time students. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of During paper sessions you learn skills to find, read and assess relevant scientific publications. You will also learn to build argumentation structures you need for your theory and analysis. For your graduation project, you can choose from a number of defined themes. It is also possible to define a project yourself, once you have thoroughly examined the foundation and feasibility of your idea. The lecturer will help you during the preparation. You will also discuss your ideas with other students. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration The schedule for this course is published onDataNose. The student can pass the course by getting approval from the course coordinator and the academic supervisor for two deliverables: Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For both part-time and full-time students. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. ir. M.C. Bor (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   dr. ir. M.C. Bor (co-ordinator) Master's Software Engineering Problem analysis Scientific literature survey Theory building Hypothesizing Structuring research and validation Project planning Scientific reporting Self-study Presentation/symposium Working independently on e.g. a project or thesis Supervision/feedback meeting Seminar Other:Study materials are made available through the course’s Canvas page. Study materials are made available through the course’s Canvas page. Study materials are made available through the course’s Canvas page. An interest in reading and writing scientific literature Affinity with reading and writing English text Knowledge of current challenges and results in software engineering Graduation project proposal Survey of related literature","Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Developing large scale software systems is challenging for many reasons. Our understanding of what needs to be done is at best incomplete, at points invalid, and subject to change. It’s hard to determine the adequacy of requirements, plans, designs and increments. The biggest projects require collaboration of thousands of people, with imperfect mechanisms for division of work, coordination, assessment of quality and assessment of progress. It proofs hard to be a truely learning organization and to adapt in the right way. Every design decision, every line of code restricts the solution space for what still needs to be developed, and at worst proofs to be an obstacle to add the features that are needed. The course setup is as follows: Knowledge of software methods like Rup, Scrum, Xp and software practices like pair programming, test first. Experience with working in big projects. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration Reading tests, essays. Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering Insight in methods and best practices in the field of Software Engineering. Understand what problems these try to solve. Being able to make a contextual analysis and propose a fitting organizational setup to engineer a system. Insight into complexity of developing large software systems Understanding what agility is, and how this is related to process, ability and architecture Understanding what planning entails, and how planning can contribute to a successful outcome Insight in individual, team and organizational performance Insight in organizational patterns to decompose and distribute tasks and empower engineers while ensuring their combined work leads to a successful outcome Every week you will read research papers about a different topic and supplement this with information from professional and expert blogs Engineers, consultants and technical managers from a variety of companies will share their experiences and give insight in how they create and deliver software. In the past we had presentations from companies like Netflix, Spotify, Microsoft Azure, ICTU, BitVavo,  Adyen, Booking.com, Bol.com, ING. You will apply your knowledge on a small case for which you will design an adequate  software engineering organization and think about how this would work out for a number of situations. You will learn from well documented failed cases. The lectures and tutorials are designed as dialogue to help you think about the subject matter Lecture Seminar Presentation/symposium Supervision/feedback meeting",-,"Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Carry out the research as proposed by the plan you made in the preparation phase. An academic supervisor will be available for (weekly) feedback and discussion. Part-time students will need to discuss their planning with the coordinator and the academic supervisor, as there are various possibilities to distribute the necessary work across the study time. Preparation Master Project The Master Project Software Engineering is assessed along three dimensions: Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. ir. M.C. Bor (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   dr. ir. M.C. Bor (co-ordinator) Master's Software Engineering Acquiring the ability to do research by designing, executing and reporting on a project in the area of software engineering research Adding knowledge or gathering new evidence in the field of software engineering Self-study Presentation/symposium Working independently on e.g. a project or thesis Supervision/feedback meeting Literature:Scientific literature Scientific literature Scientific literature research carried out written thesis presentation and discussion during the defense session In order to start the Master’s project you need to have approval from the Preparation Master Project course coordinator and your academic supervisor on your project plan and related literature survey.","Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of This course is designed around lab sessions in which we study real and large (open-source) software systems. We use Rascal -a programming language workbench, or meta programming language- to apply and build software metrics, software analyses, software visualisations and software transformations. Seehttp://www.rascal-mpl.org.The student is supported with introductory material and interactive lab sessions (including a guest lecture) to learn Rascal. The course consists of a series of lectures on the theory of software maintenance and evolution, guest lecturers from field experts, working in pairs on practical assignments and a guided study of research papers on maintenance, maintainability, empirical software engineering and language engineering. Example topics are clone detection, maintainability metrics, and (automated) refactoring. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration This course uses the following form of assessments, that will be detailed at the start of the course: The course reader and assignments will be made available on Canvas. Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. L.T. van Binsbergen (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   dr. L.T. van Binsbergen (co-ordinator) Master's Software Engineering Understand a wide range of challenges stemming from the fact that software is developed in large, dynamic teams, is subjected to changing requirements and needs to be adapted to new contexts Apply language engineering and empirical software engineering techniques to large code-bases in order to analyze them using various software quality metrics (e.g. to measure maintainability) Analyze scientific contributions from selected papers addressing the challenges in software evolution discussed in lectures and covered in practicals Evaluate one's own implementation of a software analysis tool by experimenting with the implementation (e.g. tweaking parameters or implementation choices), drawing comparisons with alternative approaches in literature, and/or against a set of clearly specified requirements Advanced programming skills in several programming languages Experience with sizeable programming projects (e.g. Project Software Engineering) Ideally also knowledge of compiler construction (e.g. parsing, ASTs, basic code analysis, etc.) Good (academic) English reading and writing skills Lecture Laptop seminar Computer lab session/practical training Self-study Presentation/symposium Syllabus:Reader consisting of selected papers on software evolution Reader consisting of selected papers on software evolution Other:http://www.rascal-mpl.orgPotentially other (academic) sources made available on Canvas http://www.rascal-mpl.org Potentially other (academic) sources made available on Canvas Reader consisting of selected papers on software evolution http://www.rascal-mpl.org Potentially other (academic) sources made available on Canvas practical lab assignments performed in pairs and assessed by a demonstration/presentation and a report individual reading and writing exercise in the form of an annotated bibliography for a selection of papers",-,"Course catalogue number 5364SSVT6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Software specification, verification, and testing entail checking whether a given software system satisfies given requirements and/or specifications. Without a specification, it is impossible to state what a piece of software should do, and there is no reasonable way to set up the test process. An informal specification is not enough. If we aim to automate the test process we need pre-given information about: Programs written in functional or imperative languages can be tested, given a formal specification, by means of a random test generator. This test method will be illustrated for a number of example programs that are written in Haskell. The course assumes basic familiarity with this language and focusses on how to test programs written in either functional or imperative style, and how to use tools for automated test generation. Basic familiarity with logic and functional programming in Haskell. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration The course is mainly aimed at Software Engineering master students. Course examination consists of weekly assignments plus a final exam both the theory and practical parts. We will mainly use Canvas to broadcast information and course materials, as well as announcements during the course contact hours. Course catalogue number 5364SSVT6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering understand and write specifications in the language of predicate logic use type-specification and abstraction to make programs more easily testable write formal specifications for testing Haskell code use random test generation for automating the test process Lecture Seminar Laptop seminar Self-study Literature:Graham Hutton,Programming in Haskell, Cambridge University Press 2016 (Second Edition).Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,Logic in Action, electronically available fromhttp://www.logicinaction.orgKees Doets and Jan van Eijck,The Haskell Road to Logic, Maths and Programming. College Publications, London 2012. Graham Hutton,Programming in Haskell, Cambridge University Press 2016 (Second Edition). Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,Logic in Action, electronically available fromhttp://www.logicinaction.org Kees Doets and Jan van Eijck,The Haskell Road to Logic, Maths and Programming. College Publications, London 2012. Graham Hutton,Programming in Haskell, Cambridge University Press 2016 (Second Edition). Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,Logic in Action, electronically available fromhttp://www.logicinaction.org Kees Doets and Jan van Eijck,The Haskell Road to Logic, Maths and Programming. College Publications, London 2012. which tests are relevant --> this information states the preconditions of the code what the outcomes of the relevant tests should be --> this information states the postconditions of the code",-,"Course catalogue number 5364DCBS6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of DevOps is a modern software and applications development model that realises the continuous integration (CI), continuous deployment (CD) and continuous improvement of the services and applications that is deeply based on the cloud virtualisation, on demand services deployment and precision services monitoring currently available on the major cloud platforms. The course discusses the basic concepts of DevOps, including its philosophy, workflow, monitoring methods, and tools. Students will apply these concepts to understand how they can be best implemented to automate development, test, and release practices. Students will work in teams to apply DevOps model and tools to develop working applications and will use one of cloud and DevOps platforms. The following topics will be covered in the course: The course will also feature guest lectures from local cloud providers and DevOps companies. Familiarity with one of the programming languages: Java, C or Python, and with any IDE platform. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration The course assessment includes the following components: individual practical assignments; literature study; group project report  and code; project development process. Course catalogue number 5364DCBS6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. Z. Zhao (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   dr. Z. Zhao (co-ordinator) Master's Software Engineering Graduates are familiar with the concept of DevOps and related technologies, their benefits for organisational IT infrastructure and services management; understand organisational aspects of DevOps, describe relation of DevOps to other technologies Graduates will understand how to build cloud-based applications and use cloud automation tools in the DevOps process applied to a range of applications and software development scenarios/processes Graduates will understand functionalities offered by the popular DevOps and cloud automations tools such as Chef, Terraform, Ansible,  and have practical hands on experience with one of such tools Introduction DevOps, core concepts and models, Continuous Delivery (CD), Continuous Integration (CI), Continuous Deployment. Agile development, relation to Agile, Scrum, Kanban, Lean Cloud Computing architecture, service models, virtualisation, resources management and monitoring DevOps and software engineering on major cloud platforms: AWS, Microsoft Azure. Cloud powered applications deployment, accounts management Cloud automation tools and platforms: Chef, Terraform, Ansible, and DevOps tools available from the major cloud providers AWS and Azure Software delivery life cycle in an agile DevOps organisation, QA in cloud based software development systems, secure applications development with DevSecOps DevOps applications architecture, configuration management, monitoring, environment setup on the selected cloud platform AWS or Microsoft Azure. Lecture Self-study Working independently on e.g. a project or thesis Laptop seminar Presentation/symposium Other:Online materials will be provided via Canvas. Online materials will be provided via Canvas. Online materials will be provided via Canvas. Availability of Canvas site","Course catalogue number 5364MBDC6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Cyber-physical systems (CPS) are systems that integrate computation, sensing, actuation, and networking to interact with and control the physical world. They are built for a particular purpose and exist in many application domains. Well-known examples of CPS from different domains include satellites, airplanes, cars, x-ray machines, printers, radars, and lithography machines. The design of CPS is a multi-disciplinary activity that combines different fields, such as embedded systems, software engineering, control theory, and mechatronics, and is fundamentally different from the design of general-purpose computer systems, such as a desktop computer. CPS are subject to different non-functional requirements, such as size, weight, energy consumption, reliability, security, and cost. Some cyber-physical systems, such as a car or an airplane, are furthermore safety critical, and must guarantee that a system failure cannot result in death or injury. Such a system must always be available and must reliably produce correct results. To further complicate matters, the correctness of most CPS is not just defined by the correct result of a computation, but by the correct result and the correct timing. For example, consider an air-bag controller in a car, which must inflate the air-bag in time before the driver’s head hits the steering wheel, or a flight control system, which must correct turbulence before the airplane becomes unstable. Trends show that CPS across application domains are getting more and more complex. The consequences of this increasing complexity are visible in daily practice in which industry struggles to efficiently develop correct and well-performing CPS. This course is an introduction to CPS and their design, with a focus on computing aspects (hardware and software). It teaches how the increasing complexity of CPS can be addressed by model-based design methodologies in which abstraction, provided by models used for specification, analysis, simulation, or synthesis, play an essential role in increasing system quality and reducing development time and overall system cost. The course covers the following topics: More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration A Canvas site for the course is available Course catalogue number 5364MBDC6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) prof. dr. K.B. Akesson MSc (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   prof. dr. K.B. Akesson MSc (co-ordinator) Master's Software Engineering The student is able to explain the key characteristics and complexity drivers of cyber-physical systems The student is able to model the behavior of software using Statecharts and generate code The student is able to functionally verify systems using methods based on Petri Net models The student is able to create a domain-specific language (DSL) that allows specification and validation of models in a particular domain, and generation of design artifacts The student is able to verify schedulability of periodic tasks and perform cache analysis on a single-core system, and explain the added challenges in a multi-core system The student is able to explain how design-space exploration identifies hardware and software configurations that satisfy multi-dimensional constraints on e.g. cost, performance and energy consumption The student is able to work together in a team to develop software that satisfies its requirements for a given cyber-physical system in a model-based manner An introduction to cyber-physical systems and their key characteristics and complexity drivers Model-based specification, analysis, and verification of functional and non-functional behavior of cyber-physical systems Model-based software development for cyber-physical systems Identification and selection of suitable hardware and software configurations that satisfy multi-dimensional constraints on e.g. cost, performance, and energy consumption in a cyber-physical system Programming (Java, Python, C++, or similar language) Computer Organization (preferred, not mandatory) Lecture Laptop seminar Self-study Working independently on e.g. a project or thesis Three assignments Practical group project",[],[],[],[],[],[],"['requirements', 'engineering', 'instruction', 'syllabus', 'topics', 'lectures', 'informatics', 'modeling', 'knowledge', 'develop', 'applying', 'contact', 'agile', 'construct', 'elicitation', 'fnwiscience', 'explore', 'tests', 'esc', 'course', 'stakeholder', '5364reen6y', 'sommerville', '1sem', 'supplementary', 'hard', 'van', 'likelihood', 'enable', 'periods']","['requirement engineering', 'knowledge requirement', 'skills course', 'explores requirement', 'engineering understand', 'language instruction', 'informatics lecturer', 'self study', 'en topics', 'techniques uml', 'intricacies applying', 'knowledge elicitation', 'supplementary lectures', 'kahneman syllabus', 'procedures registration', 'needs hard', 'books sommerville', 'diagrams software', 'life project', 'understand organizational', 'construct humans', 'science uva', 'ordinator contact', 'experience enable', 'approaches pitfalls', 'servicedesk esc', 'simple domain', '1sem 2see', 'improve likelihood', 'periods athttps']","['explores requirement engineering', 'knowledge requirement engineering', 'course explores requirement', 'engineering add course', 'en topics course', 'engineering requires number', 'domain knowledge requirement', 'software engineering understand', 'engineering example books', 'learn use scenarios', 'number skills course', 'creating right lecture', 'language instruction english', 'informatics lecturer contact', 'education desk fnwiscience', 'modeling techniques uml', 'intricacies applying theory', 'nl master software', 'project hand experience', 'construct humans means', 'example books sommerville', 'understand learn shortcomings', 'model heart knowledge', 'procedures registration periods', 'uva nl servicedesk', 'agile methods best', 'needs hard express', 'improve likelihood creating', '1sem 2see sem', 'life cases supplementary']","['requirements', 'study', 'seminar', 'thesis', 'instruction', 'lecturer', 'topics', 'informatics', 'graduation', 'planning', 'catalogue', 'presentation', 'ideas', 'proposal', 'symposium', 'registration', 'engineering', 'language', 'fnwiscience', 'schedule', 'esc', 'uva', 'credits', '904b1020', 'foundation', 'defined', '1sem', 'ordinator', 'course', 'athttps']","['course registration', 'study presentation', 'study materials', 'language instruction', 'project thesis', 'informatics lecturer', 'planning scientific', 'ideas students', 'requirements time', 'engineering graduation', 'education desk', 'help preparation', 'en topics', 'esc science', 'meeting seminar', 'information procedures', 'catalogue number', 'learn build', 'publications learn', 'defined themes', 'sessions learn', 'foundation feasibility', '5364prms6y credits', 'uva nl', 'sem 1sem', 'getting approval', 'number defined', 'supervisor deliverables', 'possible define', 'periods athttps']","['topics course registration', 'idea lecturer help', 'study materials available', 'graduation project proposal', 'schedule course published', 'language instruction english', 'graduate school informatics', 'project planning scientific', 'students information procedures', 'self study presentation', 'student pass course', 'deliverables course catalogue', 'engineering add course', 'help preparation discuss', 'getting approval course', 'theory analysis graduation', 'contact education desk', 'esc science uva', 'published ondatanose student', 'publications learn build', 'writing scientific literature', 'text knowledge current', 'entry requirements time', 'periods athttps student', 'symposium working independently', 'number defined themes', 'number 5364prms6y credits', 'build argumentation structures', 'ir bor ordinator', '1sem 2see sem']","['programming', 'requirements', 'scrum', 'developing', 'informatics', 'engineering', 'instruction', 'design', 'tasks', 'complexity', 'lectures', 'consultants', 'technical', 'knowledge', 'ictu', 'collaboration', 'ensuring', 'esc', 'english', 'related', 'fnwiscience', 'determine', 'xp', 'graduate', 'course', 'booking', 'ordinator', '5257100servicedesk', '1sem', 'supplement']","['course setup', 'software engineering', 'informatics lecturer', 'setup engineer', 'learn documented', 'language instruction', 'knowledge software', 'requirements plans', 'nl developing', 'tutorials designed', 'systems challenging', 'pair programming', 'contact education', 'rup scrum', 'desk fnwiscience', 'design decision', 'student uva', 'insight complexity', 'en topics', 'biggest projects', 'distribute tasks', 'team organizational', 'assessment quality', 'sem 1sem', 'proofs obstacle', 'add features', 'code restricts', '904b1020 5257100servicedesk', '5364sopr6y credits', 'dekkers ordinator']","['features needed course', 'design adequate software', 'education desk fnwiscience', 'software engineering organization', 'ec language instruction', 'lectures tutorials designed', 'learn documented failed', 'informatics lecturer contact', 'projects information procedures', 'rup scrum xp', 'engineering understand problems', 'insight complexity developing', 'setup follows knowledge', 'truely learning organization', 'solution space needs', 'planning entails planning', 'tests essays course', 'work coordination assessment', 'require collaboration thousands', '5257100servicedesk esc science', 'nl developing large', 'systems understanding agility', 'progress proofs hard', 'increments biggest projects', 'pair programming test', 'quality assessment progress', 'ordinator master software', 'determine adequacy requirements', 'sem sem drs', 'change hard determine']",[],[],[],"['semester', 'courses', 'requirements', 'instruction', 'study', 'engineering', 'masterproject', 'credits', 'graduate', 'preparation', 'entry', 'supervision', 'software', 'language', 'informatics', 'thesis', 'esc', 'catalogue', 'plan', '1sem', '18', 'presentation', 'contact', 'assessed', '904b1020', 'phase', 'session', 'desk', 'ordinator', 'distribute']","['courses semester', 'requirements time', 'instruction english', 'preparation masterproject', 'study time', 'entry requirements', 'ec language', 'software engineering', 'phase academic', 'project plan', 'credits 18', 'contact education', 'engineering assessed', 'informatics lecturer', 'approval preparation', 'esc science', 'registration sem', 'program passed', 'catalogue number', 'graduate graduate', 'desk fnwiscience', 'research carried', 'written thesis', 'supervisor available', 'field software', '1sem 2see', 'bor ordinator', 'distribute necessary', 'session order', 'discussion defense']","['course preparation masterproject', 'instruction english entry', 'study time preparation', 'master software engineering', 'course catalogue number', 'program passed course', 'project course coordinator', 'entry requirements time', 'contact education desk', 'year students courses', '18 ec language', 'software engineering add', 'project plan related', 'semester block second', 'graduate school informatics', 'engineering self study', 'nl master software', 'need approval preparation', 'assessed dimensions course', 'registration sem sem', 'number 5364mas18y credits', 'graduate graduate school', 'servicedesk esc science', 'carried written thesis', 'ir bor ordinator', 'supervisor available weekly', 'fnwiscience park 904b1020', 'presentation discussion defense', 'session order start', 'various possibilities distribute']","['programming', 'rascal', 'assignments', 'lectures', 'syllabus', 'maintainability', 'refactoring', 'languages', 'informatics', 'introductory', 'tool', 'requirements', 'lab', 'parsing', 'visualisations', 'mpl', 'procedures', 'annotated', 'implementation', 'catalogue', 'empirical', 'metrics', 'clone', 'stemming', 'course', 'transformations', 'esc', '904b1020', 'apply', 'periods']","['rascal programming', 'software maintenance', 'engineering language', 'software transformations', 'programming projects', 'empirical software', 'software metrics', 'software visualisations', 'code analysis', 'seminar computer', 'meta programming', 'knowledge compiler', 'instruction english', 'analysis tool', 'lab assignments', 'course reader', 'refactoring information', 'series lectures', 'asts basic', 'requirements advanced', 'experimenting implementation', 'practical training', 'sessions study', 'mpl org', 'clone detection', 'uva nl', 'understand wide', 'sem 1sem', 'sources available', '904b1020 5257100servicedesk']","['rascal programming language', 'lecture learn rascal', 'software engineering understand', 'seminar computer lab', 'metrics software analyses', 'skills programming languages', 'ideally knowledge compiler', 'requirements advanced programming', 'language engineering empirical', 'nl master software', 'maintenance maintainability empirical', 'projects project software', 'papers software evolution', 'topics course registration', 'ec language instruction', 'language workbench meta', 'tool experimenting implementation', 'refactoring information procedures', 'mpl org student', 'techniques large code', 'introductory material interactive', 'servicedesk esc science', 'analysis good academic', 'assignments available canvas', 'large dynamic teams', 'evolution reader consisting', 'bases order analyze', 'sem sem dr', 'college graduate graduate', 'park 904b1020 5257100servicedesk']",[],[],[],"['testing', 'haskell', 'programming', 'specification', 'automating', 'requirements', 'instruction', 'languages', 'formal', 'imperative', 'students', 'logicinaction', 'seminar', 'sem', 'ordinator', 'fnwiscience', 'electronically', 'uva', 'postconditions', 'entail', 'outcomes', 'credits', 'generation', 'consists', 'jan', '5257100servicedesk', 'periods', 'nl', 'athttps', 'graham']","['testing haskell', 'test programs', 'specifications testing', 'automating test', 'software specification', 'languages tested', 'verification testing', 'language instruction', 'programming college', 'testable write', 'generation automating', 'given requirements', 'course registration', 'examination consists', 'information procedures', 'entail checking', 'functional imperative', 'write formal', 'nl software', 'code outcomes', 'process need', 'preconditions code', 'www logicinaction', 'desk fnwiscience', 'theory practical', 'sem 1sem', 'oprescu ordinator', 'number 5364ssvt6y', 'plus final', 'periods athttps']","['specifications testing haskell', 'formal specifications testing', 'generation automating test', 'programs easily testable', 'test process lecture', 'written haskell course', 'testable write formal', 'languages tested given', 'tests information states', 'verification testing entail', 'specification aim automate', 'nl software specification', 'functional imperative languages', 'maths programming college', 'ec language instruction', 'master software engineering', 'abstraction make programs', 'use tools automated', 'satisfies given requirements', 'add course registration', 'preconditions code outcomes', 'education desk fnwiscience', 'information programs written', 'ordinator master software', 'examination consists weekly', 'www logicinaction org', 'periods athttps student', 'sem sem dr', 'number 5364ssvt6y credits', 'orgkees doets jan']",[],[],[],"['devops', 'deployment', 'informatics', 'programming', 'ansible', 'virtualisation', 'terraform', 'development', 'automate', 'monitoring', 'azure', 'esc', 'lectures', 'graduates', 'services', 'delivery', 'scrum', 'assessment', 'ci', 'core', 'configuration', 'related', 'concept', 'desk', 'cd', 'integration', 'aspects', '5257100servicedesk', '2see', 'periods']","['devops software', 'cloud automations', 'course registration', 'informatics lecturer', 'azure lecture', 'processes graduates', 'tools students', 'development test', 'monitoring environment', 'terraform ansible', 'engineering add', 'servicedesk esc', 'configuration management', 'ec language', 'precision services', 'integration ci', 'deployment accounts', 'laptop seminar', 'virtualisation demand', 'selected cloud', 'delivery cd', 'management understand', 'platform information', 'desk fnwiscience', 'java python', 'core concepts', 'number 5364dcbs6y', 'scrum kanban', '2see sem', 'feature guest']","['devops technologies graduates', 'basic concepts devops', 'cloud devops platforms', 'management monitoring devops', 'uva nl devops', 'understand build cloud', 'cloud automations tools', 'lectures local cloud', 'process course catalogue', 'terraform ansible devops', 'course feature guest', 'based software development', 'engineering add course', 'platforms course discusses', 'continuous deployment cd', 'development test release', 'virtualisation resources management', 'informatics lecturer dr', 'azure software delivery', 'ec language instruction', 'sem sem college', '5257100servicedesk esc science', 'monitoring currently available', 'secure applications development', 'continuous improvement services', 'students work teams', 'familiarity programming languages', 'project thesis laptop', 'periods athttps student', 'scrum kanban lean']","['cps', 'systems', 'hardware', 'programming', 'informatics', 'cyber', 'design', 'requirements', 'radars', 'desk', 'printers', 'msc', 'schedulability', 'defined', 'petri', 'catalogue', 'core', 'topics', 'statecharts', 'characteristics', 'airplanes', 'controller', 'esc', 'safety', '5257100servicedesk', 'consumption', 'fnwiscience', 'ordinator', 'cache', 'integrate']","['cps systems', 'systems using', 'physical systems', 'embedded systems', 'systems desktop', 'cyber physical', 'engineering control', 'design space', 'identifies hardware', 'requirements given', 'school informatics', 'machines printers', 'methodologies abstraction', 'net models', 'esc science', 'lecture laptop', 'language dsl', 'include satellites', 'characteristics complexity', 'tasks perform', 'consumption reliability', 'airplanes cars', 'bag controller', '904b1020 5257100servicedesk', 'just defined', 'radars lithography', 'verify schedulability', 'statecharts generate', 'perform cache', 'security cost']","['physical systems cps', 'computer cps subject', 'machines design cps', 'cyber physical systems', 'requirements given cyber', 'design cps multi', 'computer systems desktop', 'embedded systems software', 'systems student able', 'explain design space', 'systems identification selection', 'graduate school informatics', 'software engineering control', 'characteristics complexity drivers', 'methodologies abstraction provided', 'computation sensing actuation', 'petri net models', '5257100servicedesk esc science', 'mechatronics fundamentally different', 'include satellites airplanes', 'schedulability periodic tasks', 'radars lithography machines', 'available course catalogue', 'desk fnwiscience park', 'nl en topics', 'bag controller car', 'performance energy consumption', 'statecharts generate code', 'just defined correct', 'reliability security cost']"
2024-2025,-,-,"Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of At the heart Requirements Engineering is making careful decisions about what system to construct. To understand what decisions to make we have to gather and structure  knowledge. About the domain, but also about what is feasible. Humans are by no means truth telling and finding machines and our decision making is often flawed. This interactive course explores requirement engineering approaches and pitfalls by discussing real life cases. You will dive into  psychological and philosophical sources. You will also practice a lot, with the primary focus on interviewing.  Knowledge of requirement engineering, for example books of Sommerville, Robertson, van Lamsweerde, Wiegers or Pohl. 'Modeling techniques', e.g. UML diagrams to describe software behaviour. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration Reading tests, lab work, exam. Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering You will understand why organizational and stakeholder needs are hard to express, capture and understand You will learn the shortcomings in the (agile) methods and best practices that are widely used Furthermore you will practice knowledge gathering and system modeling techniques Lecture Seminar Working independently on e.g. a project or thesis Supervision/feedback meeting Self-study Presentation/symposium Literature:Noise: a flaw in human judgement (Kahneman) Noise: a flaw in human judgement (Kahneman) Syllabus:  Noise: a flaw in human judgement (Kahneman) ","Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For both part-time and full-time students. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of During paper sessions you learn skills to find, read and assess relevant scientific publications. You will also learn to build argumentation structures you need for your theory and analysis. For your graduation project, you can choose from a number of defined themes. It is also possible to define a project yourself, once you have thoroughly examined the foundation and feasibility of your idea. The lecturer will help you during the preparation. You will also discuss your ideas with other students. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration The student can pass the course by getting approval from the course coordinator and the academic supervisor for two deliverables: Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For both part-time and full-time students. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. K. Papagiannopoulos (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   dr. K. Papagiannopoulos (co-ordinator) Master's Software Engineering Problem analysis Scientific literature survey Theory building Hypothesizing Structuring research and validation Project planning Scientific reporting Self-study Presentation/symposium Working independently on e.g. a project or thesis Supervision/feedback meeting Seminar Other:Study materials are made available through the course’s Canvas page. Study materials are made available through the course’s Canvas page. Study materials are made available through the course’s Canvas page. An interest in reading and writing scientific literature Affinity with reading and writing English text Knowledge of current challenges and results in software engineering Graduation project proposal Survey of related literature","Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Developing large scale software systems is challenging for many reasons. Our understanding of what needs to be done is at best incomplete, at points invalid, and subject to change. It’s hard to determine the adequacy of plans and code. The biggest projects require collaboration of thousands of people, yet our mechanisms for division of work, coordination, and keeping track of progress have severe limitations. Learning is the credo, but in reality it proofs hard to adapt. Everything we do has impact, and not before long we work within the constraints of our own legacy. During this course you will read a lot about the many aspects of organizing software engineering. There will be guest lecturers to share their experiences with you. You will analyze a failed case and come up with a game plan for a project. Knowledge of software methods like Rup, Scrum, Xp and software practices like pair programming, test first. Experience with working in real software engineering. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration Reading tests, reports, exam. Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering Understanding the dynamics of realizing software solutions in a business or government context Understanding the choices you can make to successfully create and deliver a software system An introduction to empirical research to software engineering Lecture Seminar Presentation/symposium Supervision/feedback meeting",-,"Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: 4 out of the 6 mandatory courses have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Carry out the research as proposed by the plan you made in the preparation phase. An academic supervisor will be available for (weekly) feedback and discussion. Part-time students will need to discuss their planning with the coordinator and the academic supervisor, as there are various possibilities to distribute the necessary work across the study time. Preparation Master Project The Master Project Software Engineering is assessed along three dimensions: Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: 4 out of the 6 mandatory courses have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. ir. M.C. Bor (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   dr. ir. M.C. Bor (co-ordinator) Master's Software Engineering Acquiring the ability to do research by designing, executing and reporting on a project in the area of software engineering research Adding knowledge or gathering new evidence in the field of software engineering Self-study Presentation/symposium Working independently on e.g. a project or thesis Supervision/feedback meeting Literature:Scientific literature Scientific literature Scientific literature research carried out written thesis presentation and discussion during the defense session In order to start the Master’s project you need to have approval from the thesis coordinator and your academic supervisor on your project proposal.","Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of This course is designed around lab sessions in which we study real and large (open-source) software systems. We use Rascal -a programming language workbench, or meta programming language- to apply and build software metrics, software analyses, software visualisations and software transformations. Seehttp://www.rascal-mpl.org.The student is supported with introductory material and interactive lab sessions (including a guest lecture) to learn Rascal. The course consists of a series of lectures on the theory of software maintenance and evolution, guest lecturers from field experts, working in pairs on practical assignments and a guided study of research papers on maintenance, maintainability, empirical software engineering and language engineering. Example topics are clone detection, maintainability metrics, and (automated) refactoring. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration This course uses the following form of assessments, that will be detailed at the start of the course: The course reader and assignments will be made available on Canvas. Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. L.T. van Binsbergen (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   dr. L.T. van Binsbergen (co-ordinator) Master's Software Engineering Understand a wide range of challenges stemming from the fact that software is developed in large, dynamic teams, is subjected to changing requirements and needs to be adapted to new contexts Apply language engineering and empirical software engineering techniques to large code-bases in order to analyze them using various software quality metrics (e.g. to measure maintainability) Analyze scientific contributions from selected papers addressing the challenges in software evolution discussed in lectures and covered in practicals Evaluate one's own implementation of a software analysis tool by experimenting with the implementation (e.g. tweaking parameters or implementation choices), drawing comparisons with alternative approaches in literature, and/or against a set of clearly specified requirements Advanced programming skills in several programming languages including functional programming Experience with sizeable programming projects (e.g. Project Software Engineering) Ideally also knowledge of compiler construction (e.g. parsing, ASTs, basic code analysis, etc.) Good (academic) English reading and writing skills Lecture Laptop seminar Computer lab session/practical training Self-study Presentation/symposium Syllabus:Reader consisting of selected papers on software evolution Reader consisting of selected papers on software evolution Other:http://www.rascal-mpl.orgPotentially other (academic) sources made available on Canvas http://www.rascal-mpl.org Potentially other (academic) sources made available on Canvas Reader consisting of selected papers on software evolution http://www.rascal-mpl.org Potentially other (academic) sources made available on Canvas practical lab assignments performed in pairs and assessed by a demonstration/presentation and a report individual reading and writing exercise in the form of an annotated bibliography for a selection of papers",-,"Course catalogue number 5364SSVT6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Software specification, verification, and testing entail checking whether a given software system satisfies given requirements and/or specifications. Without a specification, it is impossible to state what a piece of software should do, and there is no reasonable way to set up the test process. An informal specification is not enough. If we aim to automate the test process we need pre-given information about: Programs written in functional or imperative languages can be tested, given a formal specification, by means of a random test generator. This test method will be illustrated for a number of example programs that are written in Haskell. The course assumes basic familiarity with this language and focusses on how to test programs written in either functional or imperative style, and how to use tools for automated test generation. Basic familiarity with logic and functional programming in Haskell. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration The course is mainly aimed at Software Engineering master students. Course examination consists of several assignments plus a final assessment of both the theory and practical parts. We will mainly use Canvas to broadcast information and course materials, as well as announcements during the course contact hours. Course catalogue number 5364SSVT6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering understand and write specifications in the language of predicate logic use type-specification and abstraction to make programs more easily testable write formal specifications for testing Haskell code use random test generation for automating the test process Lecture Seminar Laptop seminar Self-study Literature:Graham Hutton,Programming in Haskell, Cambridge University Press 2016 (Second Edition).Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,Logic in Action, electronically available fromhttp://www.logicinaction.orgKees Doets and Jan van Eijck,The Haskell Road to Logic, Maths and Programming. College Publications, London 2012. Graham Hutton,Programming in Haskell, Cambridge University Press 2016 (Second Edition). Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,Logic in Action, electronically available fromhttp://www.logicinaction.org Kees Doets and Jan van Eijck,The Haskell Road to Logic, Maths and Programming. College Publications, London 2012. Graham Hutton,Programming in Haskell, Cambridge University Press 2016 (Second Edition). Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,Logic in Action, electronically available fromhttp://www.logicinaction.org Kees Doets and Jan van Eijck,The Haskell Road to Logic, Maths and Programming. College Publications, London 2012. which tests are relevant --> this information states the preconditions of the code what the outcomes of the relevant tests should be --> this information states the postconditions of the code",-,"Course catalogue number 5364DCBS6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of DevOps is a modern software and applications development model that realises the continuous integration (CI), continuous deployment (CD) and continuous improvement of the services and applications that is deeply based on the cloud virtualisation, on demand services deployment and precision services monitoring currently available on the major cloud platforms. The course discusses the basic concepts of DevOps, including its philosophy, workflow, monitoring methods, and tools. Students will apply these concepts to understand how they can be best implemented to automate development, test, and release practices. Students will work in teams to apply DevOps model and tools to develop working applications and will use one of cloud and DevOps platforms. The following topics will be covered in the course: The course will also feature guest lectures from local cloud providers and DevOps companies. Familiarity with one of the programming languages: Java, C or Python, and with any IDE platform. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration The course assessment includes the following components: individual practical assignments; literature study; group project report  and code; project development process. Course catalogue number 5364DCBS6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. Z. Zhao (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   dr. Z. Zhao (co-ordinator) Master's Software Engineering Students are familiar with the concept of DevOps and related technologies, their benefits for organisational IT infrastructure and services management; understand organisational aspects of DevOps, describe relation of DevOps to other technologies Students will understand how to build cloud-based applications and use cloud automation tools in the DevOps process applied to various applications and software development scenarios/processes. Students can analyze practical cloud application problems, apply agile and DevOps practices in teamwork, and develop solutions using cloud computing and automation techniques. Introduction DevOps, core concepts and models, Continuous Delivery (CD), Continuous Integration (CI), Continuous Deployment. Agile development, relation to Agile, Scrum, Kanban, Lean Cloud Computing architecture, service models, virtualisation, resources management and monitoring DevOps and software engineering on major cloud platforms: AWS, Microsoft Azure. Cloud powered applications deployment, accounts management Cloud automation tools and platforms: Chef, Terraform, Ansible, and DevOps tools available from the major cloud providers AWS and Azure Software delivery life cycle in an agile DevOps organisation, QA in cloud based software development systems, secure applications development with DevSecOps DevOps applications architecture, configuration management, monitoring, environment setup on the selected cloud platform AWS or Microsoft Azure. Lecture Self-study Working independently on e.g. a project or thesis Laptop seminar Presentation/symposium Supervision/feedback meeting Other:Online materials will be provided via Canvas. Online materials will be provided via Canvas. Online materials will be provided via Canvas. Availability of Canvas site","Course catalogue number 5364MBDC6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Cyber-physical systems (CPS) are systems that integrate computation, sensing, actuation, and networking to interact with and control the physical world. They are built for a particular purpose and exist in many application domains. Well-known examples of CPS from different domains include satellites, airplanes, cars, x-ray machines, printers, radars, and lithography machines. The design of CPS is a multi-disciplinary activity that combines different fields, such as embedded systems, software engineering, control theory, and mechatronics, and is fundamentally different from the design of general-purpose computer systems, such as a desktop computer. CPS are subject to different non-functional requirements, such as size, weight, energy consumption, reliability, security, and cost. Some cyber-physical systems, such as a car or an airplane, are furthermore safety critical, and must guarantee that a system failure cannot result in death or injury. Such a system must always be available and must reliably produce correct results. To further complicate matters, the correctness of most CPS is not just defined by the correct result of a computation, but by the correct result and the correct timing. For example, consider an air-bag controller in a car, which must inflate the air-bag in time before the driver’s head hits the steering wheel, or a flight control system, which must correct turbulence before the airplane becomes unstable. Trends show that CPS across application domains are getting more and more complex. The consequences of this increasing complexity are visible in daily practice in which industry struggles to efficiently develop correct and well-performing CPS. This course is an introduction to CPS and their design, with a focus on computing aspects (hardware and software). It teaches how the increasing complexity of CPS can be addressed by model-based design methodologies in which abstraction, provided by models used for specification, analysis, simulation, or synthesis, play an essential role in increasing system quality and reducing development time and overall system cost. The course covers the following topics: More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration A Canvas site for the course is available Course catalogue number 5364MBDC6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. ir. M.C. Bor (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   dr. ir. M.C. Bor (co-ordinator) Master's Software Engineering The student is able to explain the key characteristics and complexity drivers of cyber-physical systems The student is able to model the behavior of software using Statecharts and generate code The student is able to functionally verify systems using methods based on Petri Net models The student is able to create a domain-specific language (DSL) that allows specification and validation of models in a particular domain, and generation of design artifacts The student is able to verify schedulability of periodic tasks and perform cache analysis on a single-core system, and explain the added challenges in a multi-core system The student is able to explain how design-space exploration identifies hardware and software configurations that satisfy multi-dimensional constraints on e.g. cost, performance and energy consumption The student is able to work together in a team to develop software that satisfies its requirements for a given cyber-physical system in a model-based manner An introduction to cyber-physical systems and their key characteristics and complexity drivers Model-based specification, analysis, and verification of functional and non-functional behavior of cyber-physical systems Model-based software development for cyber-physical systems Identification and selection of suitable hardware and software configurations that satisfy multi-dimensional constraints on e.g. cost, performance, and energy consumption in a cyber-physical system Programming (Java, Python, C++, or similar language) Computer Organization (preferred, not mandatory) Lecture Laptop seminar Self-study Working independently on e.g. a project or thesis Three assignments Practical group project",[],[],[],[],[],[],"['requirements', 'instruction', 'syllabus', 'engineering', 'exam', 'lecture', 'interviewing', 'topics', 'informatics', 'procedures', 'software', 'agile', 'diagrams', 'language', 'practice', 'contact', 'supervision', 'construct', 'psychological', 'uml', 'uva', 'esc', 'ordinator', 'course', 'credits', 'pitfalls', '5364reen6y', 'stakeholder', 'periods', 'drs']","['requirement engineering', 'interactive course', 'topics course', 'software engineering', 'course registration', 'instruction english', 'informatics lecturer', 'contact education', 'uml diagrams', 'techniques lecture', 'information procedures', 'heart requirements', 'focus interviewing', 'practice knowledge', 'kahneman syllabus', 'construct understand', 'ec language', 'reading tests', 'esc science', 'decision making', 'feasible humans', 'sem drs', 'nl master', 'life cases', 'syllabus noise', 'dive psychological', 'shortcomings agile', 'number 5364reen6y', 'periods athttps', 'express capture']","['explores requirement engineering', 'course explores requirement', 'heart requirements engineering', 'work exam course', 'engineering add course', 'topics course registration', 'software engineering understand', 'interactive course explores', 'modeling techniques lecture', 'language instruction english', 'focus interviewing knowledge', 'informatics lecturer contact', 'uml diagrams software', 'meeting self study', 'ordinator contact education', 'nl en topics', 'education desk fnwiscience', 'study presentation symposium', 'behaviour information procedures', 'procedures registration periods', 'capture understand learn', 'servicedesk esc science', 'domain feasible humans', 'gather structure knowledge', 'sem sem drs', 'judgement kahneman syllabus', 'uva nl heart', 'learn shortcomings agile', 'practice lot primary', '5364reen6y credits ec']","['requirements', 'study', 'instruction', 'thesis', 'lecturer', 'graduation', 'informatics', 'topics', 'students', 'planning', 'project', 'catalogue', 'presentation', 'proposal', 'engineering', 'symposium', 'registration', 'language', 'credits', 'uva', 'fnwiscience', 'esc', 'contact', 'pass', '5364prms6y', 'sessions', 'foundation', 'defined', 'ordinator', 'athttps']","['course registration', 'language instruction', 'study materials', 'informatics lecturer', 'project thesis', 'seminar study', 'planning scientific', 'engineering graduation', 'requirements time', 'ideas students', 'education desk', 'preparation discuss', 'contact education', 'en topics', 'esc science', 'information procedures', 'text knowledge', 'learn build', 'catalogue number', '5364prms6y credits', 'proposal survey', 'defined themes', 'sessions learn', 'uva nl', 'foundation feasibility', 'sem 1sem', 'number defined', 'supervisor deliverables', 'possible define', 'periods athttps']","['topics course registration', 'study materials available', 'graduation project proposal', 'ec language instruction', 'idea lecturer help', 'student pass course', 'graduate school informatics', 'students information procedures', 'project planning scientific', 'engineering add course', 'self study presentation', 'getting approval course', 'contact education desk', 'help preparation discuss', 'theory analysis graduation', 'course coordinator academic', 'deliverables course catalogue', 'esc science uva', 'sem sem college', 'english text knowledge', 'structures need theory', 'writing scientific literature', 'entry requirements time', 'sessions learn skills', 'learn build argumentation', 'nl master software', 'number 5364prms6y credits', 'periods athttps student', 'number defined themes', 'fnwiscience park 904b1020']","['programming', 'scrum', 'organizing', 'developing', 'lecture', 'projects', 'informatics', 'engineering', 'supervision', 'procedures', 'meeting', 'knowledge', 'plan', 'sem', 'english', 'symposium', 'analyze', 'contact', 'constraints', 'legacy', 'aspects', 'uva', 'division', 'xp', 'ordinator', 'fnwiscience', 'thousands', '5364sopr6y', 'athttps', 'periods']","['software engineering', 'organizing software', 'informatics lecturer', 'course registration', 'topics course', 'language instruction', 'engineering lecture', 'learning credo', 'projects require', 'nl developing', 'systems challenging', 'rup scrum', 'aspects organizing', 'game plan', 'work coordination', 'information procedures', 'pair programming', 'esc science', 'presentation symposium', 'developing large', 'progress severe', 'failed case', 'reasons understanding', 'business government', 'share experiences', 'create deliver', 'period sem', 'thousands people', '5364sopr6y credits', 'dekkers ordinator']","['software engineering lecture', 'organizing software engineering', 'realizing software solutions', 'plan project knowledge', 'en topics course', 'aspects organizing software', 'knowledge software methods', 'informatics lecturer contact', 'code biggest projects', 'constraints legacy course', 'course registration reading', 'limitations learning credo', 'create deliver software', 'rup scrum xp', 'instruction english time', 'uva nl developing', 'education desk fnwiscience', 'reasons understanding needs', 'experiences analyze failed', 'supervision feedback meeting', 'require collaboration thousands', 'ordinator master software', 'division work coordination', 'keeping track progress', 'sem sem drs', 'servicedesk esc science', 'business government context', 'case come game', 'pair programming test', '5364sopr6y credits ec']",[],[],[],"['courses', 'requirements', 'study', 'instruction', 'credits', 'engineering', 'masterproject', 'graduate', 'program', 'supervision', 'entry', 'preparation', 'informatics', 'designing', 'thesis', 'catalogue', 'english', '18', '1sem', 'assessed', 'esc', 'plan', 'contact', 'available', 'symposium', 'session', 'fnwiscience', 'phase', 'uva', '5257100servicedesk']","['course registration', 'requirements time', 'study time', 'preparation masterproject', 'language instruction', 'students need', 'phase academic', '5364mas18y credits', 'contact education', 'project software', 'engineering assessed', 'english entry', 'informatics lecturer', 'discuss planning', 'catalogue number', 'approval thesis', 'program passed', 'graduate graduate', 'desk fnwiscience', 'sem 1sem', 'research carried', 'presentation symposium', 'available weekly', 'bor ordinator', 'servicedesk esc', 'uva nl', 'distribute necessary', 'acquiring ability', 'executing reporting', 'session order']","['course preparation masterproject', 'course catalogue number', 'instruction english entry', 'study time preparation', 'entry requirements time', 'program passed course', 'contact education desk', 'software engineering add', 'planning coordinator academic', 'necessary work study', 'year students mandatory', 'graduate school informatics', '18 ec language', 'plan preparation phase', 'engineering self study', 'project need approval', 'number 5364mas18y credits', 'engineering passed time', 'period college graduate', 'discussion time students', 'registration sem sem', 'esc science uva', 'engineering assessed dimensions', 'written thesis presentation', 'nl carry research', 'supervisor available weekly', 'ir bor ordinator', 'designing executing reporting', 'defense session order', 'various possibilities distribute']","['programming', 'rascal', 'assignments', 'lectures', 'syllabus', 'maintainability', 'refactoring', 'languages', 'informatics', 'introductory', 'tool', 'requirements', 'lab', 'parsing', 'visualisations', 'mpl', 'procedures', 'annotated', 'implementation', 'catalogue', 'empirical', 'metrics', 'clone', 'stemming', 'course', 'transformations', 'esc', '904b1020', 'apply', 'periods']","['rascal programming', 'software engineering', 'software maintenance', 'engineering language', 'software transformations', 'empirical software', 'software metrics', 'software visualisations', 'seminar computer', 'programming experience', 'meta programming', 'knowledge compiler', 'build software', 'code bases', 'instruction english', 'analysis tool', 'lab assignments', 'course reader', 'refactoring information', 'series lectures', 'asts basic', 'sessions study', 'mpl org', 'requirements needs', 'covered practicals', 'clone detection', 'uva nl', 'understand wide', 'sem 1sem', '904b1020 5257100servicedesk']","['rascal programming language', 'lecture learn rascal', 'software engineering understand', 'seminar computer lab', 'metrics software analyses', 'skills programming languages', 'ideally knowledge compiler', 'requirements advanced programming', 'language engineering empirical', 'nl master software', 'maintenance maintainability empirical', 'projects project software', 'papers software evolution', 'topics course registration', 'ec language instruction', 'language workbench meta', 'tool experimenting implementation', 'refactoring information procedures', 'mpl org student', 'techniques large code', 'introductory material interactive', 'servicedesk esc science', 'analysis good academic', 'assignments available canvas', 'large dynamic teams', 'evolution reader consisting', 'bases order analyze', 'sem sem dr', 'college graduate graduate', 'park 904b1020 5257100servicedesk']",[],[],[],"['testing', 'haskell', 'programming', 'specification', 'automating', 'requirements', 'instruction', 'assessment', 'languages', 'formal', 'imperative', 'students', 'logicinaction', 'seminar', 'sem', 'ordinator', 'fnwiscience', 'electronically', 'uva', 'postconditions', 'entail', 'credits', 'generation', 'consists', 'jan', '5257100servicedesk', 'periods', 'nl', 'athttps', 'graham']","['testing haskell', 'test programs', 'specifications testing', 'automating test', 'software specification', 'languages tested', 'verification testing', 'language instruction', 'programming college', 'testable write', 'generation automating', 'given requirements', 'course registration', 'examination consists', 'information procedures', 'entail checking', 'functional imperative', 'write formal', 'nl software', 'code outcomes', 'process need', 'preconditions code', 'www logicinaction', 'desk fnwiscience', 'theory practical', 'sem 1sem', 'oprescu ordinator', 'number 5364ssvt6y', 'plus final', 'periods athttps']","['specifications testing haskell', 'formal specifications testing', 'generation automating test', 'programs easily testable', 'test process lecture', 'written haskell course', 'testable write formal', 'languages tested given', 'tests information states', 'verification testing entail', 'specification aim automate', 'nl software specification', 'functional imperative languages', 'maths programming college', 'examination consists assignments', 'ec language instruction', 'master software engineering', 'abstraction make programs', 'use tools automated', 'satisfies given requirements', 'add course registration', 'preconditions code outcomes', 'education desk fnwiscience', 'information programs written', 'ordinator master software', 'www logicinaction org', 'periods athttps student', 'sem sem dr', 'number 5364ssvt6y credits', 'orgkees doets jan']",[],[],[],"['devops', 'deployment', 'informatics', 'ansible', 'virtualisation', 'terraform', 'student', 'automate', 'engineering', 'monitoring', 'azure', 'esc', 'lectures', 'basic', 'services', 'delivery', 'scrum', 'ci', 'languages', 'configuration', 'related', 'desk', 'cd', 'integration', 'aspects', 'apply', '5257100servicedesk', '2see', 'precision', 'periods']","['devops software', 'course registration', 'informatics lecturer', 'azure lecture', 'tools students', 'development test', 'monitoring environment', 'computing automation', 'terraform ansible', 'engineering add', 'servicedesk esc', 'configuration management', 'ec language', 'precision services', 'integration ci', 'deployment accounts', 'laptop seminar', 'virtualisation demand', 'selected cloud', 'delivery cd', 'management understand', 'platform information', 'desk fnwiscience', 'symposium supervision', 'core concepts', 'number 5364dcbs6y', 'scrum kanban', '2see sem', 'feature guest', 'teams apply']","['devops technologies students', 'cloud devops platforms', 'management monitoring devops', 'uva nl devops', 'development process course', 'understand build cloud', 'lectures local cloud', 'use cloud automation', 'terraform ansible devops', 'servicedesk esc science', 'deployment precision services', 'course feature guest', 'engineering add course', 'platforms course discusses', 'virtualisation resources management', 'deployment agile development', 'informatics lecturer dr', 'azure software delivery', 'ec language instruction', 'computing architecture service', 'course catalogue number', 'monitoring currently available', 'cd continuous integration', 'registration sem sem', 'nl master software', 'study group project', 'python ide platform', 'delivery life cycle', 'desk fnwiscience park', 'concepts models continuous']","['cps', 'systems', 'hardware', 'programming', 'informatics', 'cyber', 'design', 'requirements', 'radars', 'desk', 'abstraction', 'printers', 'schedulability', 'defined', 'petri', 'core', 'statecharts', 'characteristics', 'airplanes', 'thesis', 'controller', 'esc', 'seminar', 'safety', '5257100servicedesk', 'consumption', 'fnwiscience', 'ordinator', 'cache', 'integrate']","['cps systems', 'systems using', 'physical systems', 'embedded systems', 'systems desktop', 'cyber physical', 'engineering control', 'design space', 'identifies hardware', 'requirements given', 'school informatics', 'machines printers', 'methodologies abstraction', 'net models', 'esc science', 'lecture laptop', 'language dsl', 'include satellites', 'characteristics complexity', 'tasks perform', 'consumption reliability', 'airplanes cars', 'bag controller', '904b1020 5257100servicedesk', 'just defined', 'radars lithography', 'verify schedulability', 'statecharts generate', 'perform cache', 'security cost']","['physical systems cps', 'computer cps subject', 'machines design cps', 'cyber physical systems', 'requirements given cyber', 'design cps multi', 'computer systems desktop', 'embedded systems software', 'systems student able', 'explain design space', 'systems identification selection', 'graduate school informatics', 'software engineering control', 'characteristics complexity drivers', 'methodologies abstraction provided', 'computation sensing actuation', 'petri net models', '5257100servicedesk esc science', 'mechatronics fundamentally different', 'include satellites airplanes', 'schedulability periodic tasks', 'radars lithography machines', 'available course catalogue', 'desk fnwiscience park', 'nl en topics', 'bag controller car', 'performance energy consumption', 'statecharts generate code', 'just defined correct', 'reliability security cost']"
