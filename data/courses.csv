Year,Software Architecture,Software Testing,Requirements Engineering,Preparation Masterproject Software Engineering,Software Process,Software Construction,Masterproject Software Engineering,Software Evolution,Software Architecture (VU),"Software Specification, Verification and Testing",Embedded Software and Systems,DevOps and Cloud-based Software,Model-based Design of Cyber-physical Systems
2014-2015,"Course catalogue number 5364SOAR6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of  After this course, the student is able to: translate requirements into a system architecture, handle trade-offs between conflicting requirements and motivate choices made, assess an architecture document for different stakeholders having different priorities.   Keywords: Design decisions, architecture documentation, software quality, architectural patterns, design patterns, architecture trade-off analysis, views, viewpoints, architectural evolution. This course examines fundamental design decisions that should ensure that a software system is able to meet the quality requirements. This concerns the division of a system into components, the relationships between these components, the quality requirements of the individual components and the system as a whole, and decisions that need to be made to choose between conflicting requirements.   General knowledge of software engineering; construction of programs of considerable size.  Registration is required via https://www.sis.uva.nl→ URLuntil four weeks before the start of the semester.  Lecture, seminar and computer lab   L. Bass, P. Clements and R. Kazman. 'Software Architecture in Practice'. Addison-Wesley, 2012. (Third edition.)   Examination and laboratory work  Course catalogue number 5364SOAR6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator)prof.dr. J.C. van Vliet Is part of Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) prof.dr. J.C. van Vliet Software Engineering","Course catalogue number 5364SOTE6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of After the course, the student is able to understand and produce formal specifications of modest-sized samples of software, and is able to use formal specifications to generate relevant tests for the software. Software testing is checking whether a given software system satisfies given requirements or specifications. Without a specification, it is impossible to state what a piece of software should do, and there is no reasonable way to set up the test process. An informal specification is not enough, for if we want to automate the test process we need pre-given information about (i) which tests are relevant, and about (ii) what the outcomes of the relevant tests should be. The information about (i) states the preconditions of the code, and the information about (ii) states the postconditions. Programs written in functional or imperative languages can be tested, given a formal specification, by means of a random test generator. This test method will be illustrated for a number of example programs written in Haskell. The course includes a lightning introduction to this languages, and then focusses on how to test programs written in either functional or imperative style, and how to use tools for automated test generation. Registration is required via https://www.sis.uva.nl→ URLuntil four weeks before the start of the semester. To be announced Lectures, seminars and computer lab sessions. Course Book: Kees Doets and Jan van Eijck, 'The Haskell Road to Logic, Maths and Programming'. College Publications, London 2012. This book can be ordered (at a discount) with the lecturer. Course reader: Jan van Eijck, 'Purely Functional Algorithm Specification'. Will be made available during the course. Recommended background reading: M. Huth and M. Ryan, 'Logic in Computer Science: Modelling and Reasoning about Systems',Cambridge University Press 2004 (Second Edition). Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,'Logic in Action', electronically available fromhttp://www.logicinaction.org Course examination will consist of assignments during the course plus a final exam consisting of a theory part and a computer lab part. Final grade determined for 40 % by the course assignment results and for 60 % by the result on the final exam. Course catalogue number 5364SOTE6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) prof. dr. D.J.N. van Eijck (co-ordinator) Is part of Software Engineering Add course to planner Sem. 1 Sem. 2   prof. dr. D.J.N. van Eijck (co-ordinator) Software Engineering","Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s)  College/graduate Graduate School of Informatics Lecturer(s) Is part of The success of a software system depends on the proper interpretation and analysis of user needs. Experience shows that it is extremely difficult to adequately define and specify a system. The perception of customers and users on the problem is often incomplete, inaccurate and changes over time. Knowledge is hard to express and to transfer. During this course you will understand why user needs are so hard to express, capture and understand. You will also learn the shortcomings of best practices like scrum, prototyping, interviewing and use cases. Furthermore you will learn about data-driven methods for requirements engineering like Contextual Design. Requirements methods and techniques will be discussed during the lectures. If feasible the whole student group will collaborate in one real life requirements project based on the method of contextual design. Next to specific RE literature we will also study literature from psychology, law, philosophy and cognitive science to get a better understanding of the subject. Finally students will design and do an experiment to show the inherent weakness of requirements best practices, like the use of prototyping for requirement validation. This will be done from the perspective of human factors. Knowledge of requirement engineering, for example books of Sommerville, Robertson, van Lamsweerde, Wiegers or Pohl. 'Modeling techniques', e.g. UML diagrams to describe software behoviour. Registration is required viahttps://www.sis.uva.nluntil four weeks before the start of the semester. Lecture, seminar and computer lab. Thinking, fast and slow, Kahneman Reading tests, paper and lab work. Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2 Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Is part of Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Software Engineering","Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For part-time (2 year students): all other courses in the program have been passed. For full-time (1 year students): To continue with the Master’s project preparation in the second semester (January), all courses of the first semester have to be passed. Time period(s)   College/graduate Graduate School of Informatics Lecturer(s) Is part of The objective of the course is teaching the skills needed to successfully complete the Master’s (graduation) project. In summary these skills are: During paper sessions you learn skills to find, read and assess relevant scientific publications. You will also learn to build argumentation structures you need for your theory and analysis. For your graduation you can choose from a number of defined themes. In exceptional cases it is possible to define a project yourself. A tutor will help you during the preparation. You will also discuss your ideas with other students. Registration is required viahttps://www.sis.uva.nluntil four weeks before the start of the semester. This is a mixed theoretical and practical course. The format is aimed at exercising skills needed to complete the Master’s project. There are interactive sessions where scientific reading, writing, research design, and presentation skills are covered. Study materials are made available through the course’s BlackBoard page. The student can pass the course by getting approval by a lecturer (tutor) for two deliverables: Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For part-time (2 year students): all other courses in the program have been passed. For full-time (1 year students): To continue with the Master’s project preparation in the second semester (January), all courses of the first semester have to be passed. Time period(s) Sem. 1Sem. 2 Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. M. Bruntinkdrs. H.L. Dekkersprof. dr. D.J.N. van Eijckdr. T. van der Stormdr. S.F.M van Vlijmendr. V.V. Zaytsev (co-ordinator) Is part of Software Engineering Add course to planner Sem. 1 Sem. 2   dr. M. Bruntink drs. H.L. Dekkers prof. dr. D.J.N. van Eijck dr. T. van der Storm dr. S.F.M van Vlijmen dr. V.V. Zaytsev (co-ordinator) Software Engineering Problem analysis, Scientific literature survey, Theory building, Hypothesizing, Structuring research and validation, Project planning, Scientific reporting. An interest in reading and writing scientific literature. Affinity with reading and writing English text. Knowledge of current challenges and results in software engineering. Plan for the Masters project, Survey of related literature.","Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s)  College/graduate Graduate School of Informatics Lecturer(s) Is part of During this course you will come to understand why big software engineering projects are prone to failure. You will come to understand how performance is influenced at different levels: that of the individual software engineer, the team and the whole organization. You will learn about motivation, competences, and the crucial role of culture. Also you will learn about organizational paradigms and control mechanisms, quality paradigms, and the role of planning and design in a world that is volatile and of which a lot is unknown. As software engineering is a special kind of organization, you will also learn how effective our best practices are. With this knowledge you will be able to understand why a method like RUP or Scrum is sometimes successful and sometimes not. You will also come to assess such a method and better be able to use it in such a way to improve overall project performance. Developing large scale software systems is challenging for many reasons. We work from a set of requirements that are ambiguous and incomplete, may be invalid and are subject to change. It’s hard to determine the quality and doneness of (intermediate) deliverables like designs, plans and code. We have to coordinate up to 1.000 software engineers with imperfect mechanisms for separation of concerns. To be able to understand reasons for software project failure we study failed projects. We learn about organizational control mechanisms and look at theory from social sciences notably motivation, empowerment, effective teams and coordination strategies. Last but not least we look at what we can learn from the quality community: Lean, CMMi, TQM, Kaizen. We will also examine evidence about the practices we apply in software engineering, like test first, pair programming, software architecture. Knowledge of software methods like Rup, Scrum, Xp and software practices like pair programming, test first. Experience with working in big projects. Lecture, work groups, seminar. Andy Oram, Greg Wilson'Making Software:What Really Works, and Why We Believe It'. Reading tests, essay and lab work. Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2 Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Is part of Software Engineering Add course to planner Sem. 1 Sem. 2   Registration is   required viahttps://www.sis.uva.nlbefore the start of the semester. Please   visit the website of your programme throughhttp://student.uva.nland check   the A-Z list ’Course and Exam Registration’ for more information. drs. H.L. Dekkers (co-ordinator) Software Engineering","Course catalogue number 5364SOCO6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of The course focuses on methods and techniques of software construction. This primarily covers the programming and implementation activities of a software engineering project. Examples of such activities are coding and debugging, detailed design, unit testing, code reviews, optimization, component integration and code generation. The course has two main objectivea: In the practical course students will implement a Domain-Specific Language (DSL). This involves both language engineering aspects (parsing, type checking, interpretation etc.) as well as a substantial amount of programming and discussion. The code will be reviewed based on aspects of code quality, simplicity, readability, modularity, separation of concerns and consistency of style. Lectures will provide the required background on DSLs, model-driven engineering (MDE), compiler theory, generative programming, code quality, ""Don't-Repeat-Yourself"" (DRY), code smells and design patterns. Additional academic literature covers subjects such as design-by-contract, SOLID principles, data abstraction, modularity, hierarchy and object-oriented frameworks. Students are required to complete a take home exam based on the academic literature, so as to show they master concepts and practices relevant for high quality software construction. Technical mastery of one or more object-oriented programming languages (e.g., Java, C#, etc.). Lectures, workshops and computer lab. Required reading (tentative): Crista Lopes, 'Exercises in Programming Styles'. Syllabus of landmark papers on topics in software construction. 60 Successful completion of the take home exam, final grade based on submitted code. Course catalogue number 5364SOCO6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. T. van der Storm (co-ordinator)dr. J.J. Vinju Is part of Software Engineering Add course to planner Sem. 1 Sem. 2   Registration is   required viahttps://www.sis.uva.nlbefore the start of the semester. Please   visit the website of your programme throughhttp://student.uva.nland check   the A-Z list ’Course and Exam Registration’ for more information. dr. T. van der Storm (co-ordinator) dr. J.J. Vinju Software Engineering Inform students about the area of software language engineering: how to employ model-driven and language-driven approaches in software construction. This is includes basic theory of compiler construction. Actively engage students to reason about and reflect upon aspect of design, code quality, and software construction methods.","Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s)  College/graduate Graduate School of Informatics Lecturer(s) Is part of Carry out the research as proposed by the plan you made in the preparation phase. A lecturer (tutor) will be available for weekly feedback and discussion. Part time students will need to free time to work at least two month full time on their research. In order to start the Master’s project you need to have approval from a lecturer (tutor) on your project plan and related literature survey. Registration is NOT required but will be done by the Servicedesk of the ESC after the completion of the Master Project. The Master’s project consists of a software engineering-themed research assignment (an internship) at either a company or a research institution. Blackboard Scientific literature Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s) Sem. 1Sem. 2 Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. M. Bruntinkdrs. H.L. Dekkersprof. dr. D.J.N. van Eijckprof.dr. P. Klintdr. T. van der Stormdr. V.V. Zaytsev (co-ordinator) Is part of Software Engineering Add course to planner Sem. 1 Sem. 2   dr. M. Bruntink drs. H.L. Dekkers prof. dr. D.J.N. van Eijck prof.dr. P. Klint dr. T. van der Storm dr. V.V. Zaytsev (co-ordinator) Software Engineering Acquiring the ability to do research by designing, executing and reporting on a project in the area of software engineering research, Adding knowledge or gathering new evidence in the field of software engineering. Quality of the work as reported on in the thesis, Quality of the presentation given during the defense session.","Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of Our objectives are three-fold. The first objective is to acquire an understanding and appreciation of the challenges posed by software maintenance and software evolution. The second objective is to learn about quality of architecture and source code and how it affects software maintenance and evolution. The final objective is to be able to select and also construct software analysis and software transformation tools to help obtain insight in software quality and to help improve software quality. The course ties in closely with paper writing sessions where the objectives are to learn from academic literature, to develop curiosity, and to improve argumentation and writing skills. This course is designed around lab sessions in which we study real and large (open-source) software systems, written in languages like C, Java, PHP or Ruby. We use Rascal -a programming language workbench, or meta programming language- to apply and build software metrics, software analyses, software visualisations and (if time permits) software transformations. See http://www.rascal-mpl.org. The student is supported with introductory courses and interactive lab sessions while learning this new language in the beginning. The course is supported by a series of lectures on the theory of software maintenance and evolution, and a guided study of a number of research papers about maintenance, reverse engineering, reengineering and renovation. Example topics are clone detection, mining software repositories and refactoring. During the course students all write a short, but in-depth, paper about one of these subjects (possibly supported by facts generated by the lab exercises). Advanced programming skills in several programming languages.Basic knowledge of compiler construction (parsing, ASTs, basic code analysis, etc.)Good (academic) English reading and writing skills Registration is required viahttps://www.sis.uva.nluntil four weeks before the start of the semester. The format is focused on practical skills via the lab exercises, such as exploring source code and building tools, and academic skills via the paper writing component. Every week we start with two hour lecture on the theory of software evolution, which is required to understand the material covered in the lab exercises. The rest of the day and the following day are lab hours. You also need two hours time every other week to prepare for the bi-weekly two-hour paper sessions. - http://www.rascal-mpl.org- reader consisting of material on software evolution- potentially other (academic) sources This course typically uses various types of assessment, that will be detailed at the start of the course:- lab assignments, assessed by demonstration and oral exam- online test to assess basic skills- paper/essay- exam In this course we use the experimental programming language Rascal, which is (beta) open-source software and new to most students. On top of that we dive into many new topics for the students. Therefore the lab time is designed to be an integral and interactive part of the teaching, where the lecturer and the students are both present. Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. M. Bruntink (co-ordinator)dr. T. van der Storm Is part of Software Engineering Add course to planner Sem. 1 Sem. 2   dr. M. Bruntink (co-ordinator) dr. T. van der Storm Software Engineering",-,-,-,-,-
2015-2016,"Course catalogue number 5364SOAR6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of After this course, the student is able to: translate stakeholder's requirements into a software architecture, handle trade-offs between conflicting requirements and motivate choices and assess an (other's) architecture document for completeness and value for development. Keywords: architecture design, architecture trade-off analysis, architectural vies, architectural evolution, desig decisions, architecture decisions, software quality and architecture patterns. This course examines fundamental architecture design decisions that should ensure that a software system is able to achieve as much as possible the quality requirements. This concerns the division of a system into components, the relationships between these components, the quality requirements of the individual components and the system as a whole, and decisions that need to be made to balance between conflicting requirements. General knowledge of (and experience in) software engineering; construction of programs of considerable size. Preferably experience in developing software in a large organization. Registration is required via https://www.sis.uva.nl→ URLuntil four weeks before the start of the semester. Lecture, seminars, workshops and practice in computer lab. L. Bass, P. Clements and R. Kazman. 'Software Architecture in Practice'. Addison-Wesley, 2012. (Third edition.)Various architecture relevant papers which will be provided during the course. Written examination (40% of final grade) and laboratory work (60% of final grade). The grade weights are indicative and will be detailed at the start of the course. Course catalogue number 5364SOAR6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. M. Bruntink (co-ordinator)prof.dr. J.C. van Vliet Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. M. Bruntink (co-ordinator) prof.dr. J.C. van Vliet Master's Software Engineering","Course catalogue number 5364SOTE6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of After the course, the student is able to understand and produce formal specifications of modest-sized samples of software, and is able to use formal specifications to generate relevant tests for the software. Software testing is checking whether a given software system satisfies given requirements or specifications. Without a specification, it is impossible to state what a piece of software should do, and there is no reasonable way to set up the test process. An informal specification is not enough, for if we want to automate the test process we need pre-given information about (i) which tests are relevant, and about (ii) what the outcomes of the relevant tests should be. The information about (i) states the preconditions of the code, and the information about (ii) states the postconditions. Programs written in functional or imperative languages can be tested, given a formal specification, by means of a random test generator. This test method will be illustrated for a number of example programs written in Haskell. The course includes a lightning introduction to this languages, and then focusses on how to test programs written in either functional or imperative style, and how to use tools for automated test generation. Lectures, seminars and computer lab sessions. Course Book: Kees Doets and Jan van Eijck, 'The Haskell Road to Logic, Maths and Programming'. College Publications, London 2012. This book can be ordered (at a discount) with the lecturer. Course reader: Jan van Eijck, 'Purely Functional Algorithm Specification'. Will be made available during the course. Recommended background reading: M. Huth and M. Ryan, 'Logic in Computer Science: Modelling and Reasoning about Systems',Cambridge University Press 2004 (Second Edition). Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,'Logic in Action', electronically available fromhttp://www.logicinaction.org Course examination will consist of assignments during the course plus a final exam consisting of a theory part and a computer lab part. Final grade determined for 40 % by the course assignment results and for 60 % by the result on the final exam. Course catalogue number 5364SOTE6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) prof. dr. D.J.N. van Eijck (co-ordinator) Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   Registration is required viahttps://www.sis.uva.nlbefore the start of the semester. Please visit the website of your programme throughhttp://student.uva.nland check the A-Z list ’Course and Exam Registration’ for more information. prof. dr. D.J.N. van Eijck (co-ordinator) Master's Software Engineering","Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s)  College/graduate Graduate School of Informatics Lecturer(s) Is part of The success of a software system depends on the proper interpretation and analysis of user needs. Experience shows that it is extremely difficult to adequately define and specify a system. The perception of customers and users of the problem is often incomplete, inaccurate and changes over time. Knowledge is hard to express and to transfer. During this course you will understand why user needs are so hard to express, capture and understand. You will also learn the shortcomings of best practices like scrum, prototyping, interviewing and use cases. Furthermore you will learn about data-driven methods for requirements engineering like Contextual Design. Requirements methods and techniques will be discussed during the lectures. If feasible the whole student group will collaborate in one real life requirements project based on the method of contextual design. Next to specific RE literature we will also study literature from psychology, law, philosophy and cognitive science to get a better understanding of the subject. Finally students will design and do an experiment to show the inherent weakness of requirements best practices, like the use of prototyping for requirement validation. This will be done from the perspective of human factors. Knowledge of requirement engineering, for example books of Sommerville, Robertson, van Lamsweerde, Wiegers or Pohl. 'Modeling techniques', e.g. UML diagrams to describe software behoviour. Lecture, seminar and computer lab. 'Thinking, fast and slow', Kahneman Reading tests, paper and lab work. Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2 Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   Registration   is required viahttps://www.sis.uva.nlbefore the start of the semester.   Please visit the website of your programme throughhttp://student.uva.nland   check the A-Z list ’Course and Exam Registration’ for more information. drs. H.L. Dekkers (co-ordinator) Master's Software Engineering","Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For part-time (2 year students): all other courses in the program have been passed. For full-time (1 year students): To continue with the Master’s project preparation in the second semester (January), all courses of the first semester have to be passed. Time period(s)  College/graduate Graduate School of Informatics Lecturer(s) Is part of The objective of the course is teaching the skills needed to successfully complete the Master’s (graduation) project. In summary these skills are: During paper sessions you learn skills to find, read and assess relevant scientific publications. You will also learn to build argumentation structures you need for your theory and analysis. For your graduation you can choose from a number of defined themes. In exceptional cases it is possible to define a project yourself. A tutor will help you during the preparation. You will also discuss your ideas with other students. This is a mixed theoretical and practical course. The format is aimed at exercising skills needed to complete the Master’s project. There are interactive sessions where scientific reading, writing, research design, and presentation skills are covered. Study materials are made available through the course’s BlackBoard page. The student can pass the course by getting approval by a lecturer (tutor) for two deliverables: Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For part-time (2 year students): all other courses in the program have been passed. For full-time (1 year students): To continue with the Master’s project preparation in the second semester (January), all courses of the first semester have to be passed. Time period(s) Sem. 1Sem. 2 Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. M. Bruntinkdrs. H.L. Dekkersprof. dr. D.J.N. van Eijckdr. T. van der Stormdr. S.F.M van Vlijmendr. V.V. Zaytsev (co-ordinator) Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   Registration   is required viahttps://www.sis.uva.nlbefore the start of the semester.   Please visit the website of your programme throughhttp://student.uva.nland   check the A-Z list ’Course and Exam Registration’ for more information. dr. M. Bruntink drs. H.L. Dekkers prof. dr. D.J.N. van Eijck dr. T. van der Storm dr. S.F.M van Vlijmen dr. V.V. Zaytsev (co-ordinator) Master's Software Engineering Problem analysis, Scientific literature survey, Theory building, Hypothesizing, Structuring research and validation, Project planning, Scientific reporting. An interest in reading and writing scientific literature. Affinity with reading and writing English text. Knowledge of current challenges and results in software engineering. Plan for the Masters project, Survey of related literature.","Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s)  College/graduate Graduate School of Informatics Lecturer(s) Is part of During this course you will come to understand why big software engineering projects are prone to failure. You will come to understand how performance is influenced at different levels: that of the individual software engineer, the team and the whole organization. You will learn about motivation, competences, and the crucial role of culture. Also you will learn about organizational paradigms and control mechanisms, quality paradigms, and the role of planning and design in a world that is volatile and of which a lot is unknown. As software engineering is a special kind of organization, you will also learn how effective our best practices are. With this knowledge you will be able to understand why a method like RUP or Scrum is sometimes successful and sometimes not. You will also come to assess such a method and better be able to use it in such a way to improve overall project performance. Developing large scale software systems is challenging for many reasons. We work from a set of requirements that are ambiguous and incomplete, may be invalid and are subject to change. It’s hard to determine the quality and doneness of (intermediate) deliverables like designs, plans and code. We have to coordinate up to 1.000 software engineers with imperfect mechanisms for separation of concerns. To be able to understand reasons for software project failure we study failed projects. We learn about organizational control mechanisms and look at theory from social sciences notably motivation, empowerment, effective teams and coordination strategies. Last but not least we look at what we can learn from the quality community: Lean, CMMi, TQM, Kaizen. We will also examine evidence about the practices we apply in software engineering, like test first, pair programming, software architecture. Knowledge of software methods like Rup, Scrum, Xp and software practices like pair programming, test first. Experience with working in big projects. Lecture, work groups, seminar. Andy Oram, Greg Wilson'Making Software:What Really Works, and Why We Believe It'. Reading tests, essay and lab work. Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2 Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   Registration is   required viahttps://www.sis.uva.nlbefore the start of the semester. Please   visit the website of your programme throughhttp://student.uva.nland check   the A-Z list ’Course and Exam Registration’ for more information. drs. H.L. Dekkers (co-ordinator) Master's Software Engineering","Course catalogue number 5364SOCO6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of The course focuses on methods and techniques of software construction. This primarily covers the programming and implementation activities of a software engineering project. Examples of such activities are coding and debugging, detailed design, unit testing, code reviews, optimization, component integration and code generation. The course has two main objectivea: In the practical course students will implement a Domain-Specific Language (DSL). This involves both language engineering aspects (parsing, type checking, interpretation etc.) as well as a substantial amount of programming and discussion. The code will be reviewed based on aspects of code quality, simplicity, readability, modularity, separation of concerns and consistency of style. Lectures will provide the required background on DSLs, model-driven engineering (MDE), compiler theory, generative programming, code quality, ""Don't-Repeat-Yourself"" (DRY), code smells and design patterns. Additional academic literature covers subjects such as design-by-contract, SOLID principles, data abstraction, modularity, hierarchy, programming style, code smells, and object-oriented frameworks. Students are required to complete an exam based on the academic literature, to show they master concepts and practices relevant for high quality software construction. Technical mastery of one or more programming languages (e.g., Java, C#, etc.). Lectures, workshops and computer lab. Required reading: Crista Lopes', 'Exercises in Programming Styles'. Syllabus of landmark papers on topics in software construction. 60 Assessment is based on the code produced during the lab and a final exam. Both need to be completed successfully. Final grade is the average of both lab and exam grades. This is a Bring-Your-Own-Device (BYOD) course, so a laptop is required. See here more info: http://student.uva.nl/se/az/item/bring-your-own-device.html Course catalogue number 5364SOCO6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. T. van der Storm (co-ordinator)dr. J.J. Vinju Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   Registration is   required viahttps://www.sis.uva.nlbefore the start of the semester. Please   visit the website of your programme throughhttp://student.uva.nland check   the A-Z list ’Course and Exam Registration’ for more information. dr. T. van der Storm (co-ordinator) dr. J.J. Vinju Master's Software Engineering Inform students about the area of software language engineering: how to employ model-driven and language-driven approaches in software construction. This is includes basic theory of compiler construction. Actively engage students to reason about and reflect upon aspect of design, code quality, and software construction methods.","Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s)  College/graduate Graduate School of Informatics Lecturer(s) Is part of Carry out the research as proposed by the plan you made in the preparation phase. A lecturer (tutor) will be available for weekly feedback and discussion. Part time students will need to free time to work at least two month full time on their research. In order to start the Master’s project you need to have approval from a lecturer (tutor) on your project plan and related literature survey. Registration is NOT required but will be done by the Servicedesk of the ESC after the completion of the Master Project. The Master’s project consists of a software engineering-themed research assignment (an internship) at either a company or a research institution. Blackboard Scientific literature Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s) Sem. 1Sem. 2 Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. M. Bruntinkdrs. H.L. Dekkersprof. dr. D.J.N. van Eijckprof.dr. P. Klintdr. T. van der Stormdr. V.V. Zaytsev (co-ordinator) Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. M. Bruntink drs. H.L. Dekkers prof. dr. D.J.N. van Eijck prof.dr. P. Klint dr. T. van der Storm dr. V.V. Zaytsev (co-ordinator) Master's Software Engineering Acquiring the ability to do research by designing, executing and reporting on a project in the area of software engineering research, Adding knowledge or gathering new evidence in the field of software engineering. Quality of the work as reported on in the thesis, Quality of the presentation given during the defense session.","Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of Exit qualification: “The graduate masters the methods and techniques needed to analyze an existing software system and to enable it to evolve given changing requirements.” Our objectives are three-fold: The course ties in closely with paper writing sessions where the objectives are to learn from academic literature, to develop curiosity, and to improve argumentation and writing skills. This course is designed around lab sessions in which we study real and large (open-source) software systems, written in languages like C, Java, PHP or Ruby. We use Rascal -a programming language workbench, or meta programming language- to apply and build software metrics, software analyses, software visualisations and (if time permits) software transformations. See http://www.rascal-mpl.org. The student is supported with introductory courses and interactive lab sessions while learning this new language in the beginning. The course is supported by a series of lectures on the theory of software maintenance and evolution, guest lecturers from field experts, and a guided study of a number of research papers about maintenance, reverse engineering, reengineering and renovation. Example topics are clone detection, mining software repositories and refactoring. The format is focused on practical skills via the lab exercises, such as exploring source code and building tools, and academic skills via the paper sessions. Every week we start with a two hour lecture on the theory of software evolution, which is required to understand the material covered in the lab exercises. The rest of the day and the following day are lab hours. You also need two hours time every other week to prepare for the bi-weekly two-hour paper sessions. In this course we use the experimental programming language Rascal, which is (beta) open-source software and new to most students. On top of that we dive into many new topics for the students. Therefore the lab time is designed to be an integral and interactive part of the teaching, where the lecturer and the students are both present. This course typically uses the following assessments, that will be detailed at the start of the course: The grade weights are indicative and will be detailed at the start of the course. Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. M. Bruntinkdr. V.V. Zaytsev (co-ordinator) Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   Registration is required viahttps://www.sis.uva.nlbefore the start of the semester. Please visit the website of your programme throughhttp://student.uva.nland check the A-Z list ’Course and Exam Registration’ for more information. dr. M. Bruntink dr. V.V. Zaytsev (co-ordinator) Master's Software Engineering The first objective is to acquire an understanding and appreciation of the challenges posed by software maintenance and software evolution. The second objective is to learn about quality of software and source code and how it affects software maintenance and evolution. The final objective is to be able to select and also construct software analysis and software transformation tools to help obtain insight in software quality and to help improve software quality. Advanced programming skills in several programming languages. Knowledge of compiler construction (parsing, ASTs, basic code analysis, etc.). Good (academic) English reading and writing skills. http://www.rascal-mpl.org:http://www.rascal-mpl.org reader consisting of selected papers on software evolution potentially other (academic) sources online test to assess basic skills practical lab assignments, assessed by demonstration and oral exam (2/3 of final grade) writing exercise(s): essay and/or annotated bilbiography (1/3 final grade)",-,-,-,-,-
2016-2017,"Course catalogue number 5364SOAR6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of After this course, the student is able to: translate stakeholder's requirements into a software architecture, handle trade-offs between conflicting requirements and motivate choices and assess an (other's) architecture document for completeness and value for development. Keywords: architecture design, architecture trade-off analysis, architectural vies, architectural evolution, desig decisions, architecture decisions, software quality and architecture patterns. This course examines fundamental architecture design decisions that should ensure that a software system is able to achieve as much as possible the quality requirements. This concerns the division of a system into components, the relationships between these components, the quality requirements of the individual components and the system as a whole, and decisions that need to be made to balance between conflicting requirements. Information about procedures can be found athttp://www.student.uva.nl/se/az/item/course-registration.html. Lecture, seminars, workshops and practice in computer lab. Written examination (40% of final grade) and laboratory work (60% of final grade). The grade weights are indicative and will be detailed at the start of the course. Recommended prior knowledge:General knowledge of (and experience in) software engineering; construction of programs of considerable size. Preferably experience in developing software in a large organization. Course catalogue number 5364SOAR6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering Literature: L. Bass, P. Clements and R. Kazman. 'Software Architecture in Practice'. Addison-Wesley, 2012. (Third edition.) Other: Various architecture relevant papers which will be provided during the course.","Course catalogue number 5364SOTE6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of After the course, the student is able to understand and produce formal specifications of modest-sized samples of software, and is able to use formal specifications to generate relevant tests for the software. Software testing is checking whether a given software system satisfies given requirements or specifications. Without a specification, it is impossible to state what a piece of software should do, and there is no reasonable way to set up the test process. An informal specification is not enough, for if we want to automate the test process we need pre-given information about (i) which tests are relevant, and about (ii) what the outcomes of the relevant tests should be. The information about (i) states the preconditions of the code, and the information about (ii) states the postconditions. Programs written in functional or imperative languages can be tested, given a formal specification, by means of a random test generator. This test method will be illustrated for a number of example programs written in Haskell. The course includes a lightning introduction to this languages, and then focusses on how to test programs written in either functional or imperative style, and how to use tools for automated test generation. Information about procedures can be found athttp://www.student.uva.nl/se/az/item/course-registration.html. Lectures, seminars and computer lab sessions. Course examination will consist of assignments during the course plus a final exam consisting of a theory part and a computer lab part. Final grade determined for 40% by the course assignment results and for 60% by the result on the final exam. Course catalogue number 5364SOTE6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) prof. dr. D.J.N. van Eijck (co-ordinator) Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   prof. dr. D.J.N. van Eijck (co-ordinator) Master's Software Engineering Literature: Kees Doets and Jan van Eijck, 'The Haskell Road to Logic, Maths and Programming'. College Publications, London 2012. This book can be ordered (at a discount) with the lecturer. Literature: Recommended background reading: M. Huth and M. Ryan, 'Logic in Computer Science: Modelling and Reasoning about Systems',Cambridge University Press 2004 (Second Edition). Literature: Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,'Logic in Action', electronically available fromhttp://www.logicinaction.org Syllabus: Reader: Jan van Eijck, 'Purely Functional Algorithm Specification'. Will be made available during the course. Syllabus: Syllabus:","Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of The success of a software system depends on the proper interpretation and analysis of user needs. Experience shows that it is extremely difficult to adequately define and specify a system. The perception of customers and users of the problem is often incomplete, inaccurate and changes over time. Knowledge is hard to express and to transfer. During this course you will understand why user needs are so hard to express, capture and understand. You will also learn the shortcomings of best practices like scrum, prototyping, interviewing and use cases. Furthermore you will learn about data-driven methods for requirements engineering like Contextual Design. Requirements methods and techniques will be discussed during the lectures. If feasible the whole student group will collaborate in one real life requirements project based on the method of contextual design. Next to specific RE literature we will also study literature from psychology, law, philosophy and cognitive science to get a better understanding of the subject. Finally students will design and do an experiment to show the inherent weakness of requirements best practices, like the use of prototyping for requirement validation. This will be done from the perspective of human factors. Information about procedures can be found athttp://www.student.uva.nl/se/az/item/course-registration.html. Lecture, seminar and computer lab. Reading tests, paper and lab work. Recommended prior knowledge: Knowledge of requirement engineering, for example books of Sommerville, Robertson, van Lamsweerde, Wiegers or Pohl. 'Modeling techniques', e.g. UML diagrams to describe software behaviour. Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering Literature:  D. Kahneman 'Thinking, fast and slow'.","Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For part-time (2 year students): all other courses in the program have been passed. For full-time (1 year students): To continue with the Master’s project preparation in the second semester (January), all courses of the first semester have to be passed. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of The objective of the course is teaching the skills needed to successfully complete the Master’s (graduation) project. In summary these skills are: During paper sessions you learn skills to find, read and assess relevant scientific publications. You will also learn to build argumentation structures you need for your theory and analysis. For your graduation you can choose from a number of defined themes. In exceptional cases it is possible to define a project yourself. A tutor will help you during the preparation. You will also discuss your ideas with other students. Information about procedures can be found athttp://www.student.uva.nl/se/az/item/course-registration.html. This is a mixed theoretical and practical course. The format is aimed at exercising skills needed to complete the Master’s project. There are interactive sessions where scientific reading, writing, research design, and presentation skills are covered. The student can pass the course by getting approval by a lecturer (tutor) for two deliverables: Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For part-time (2 year students): all other courses in the program have been passed. For full-time (1 year students): To continue with the Master’s project preparation in the second semester (January), all courses of the first semester have to be passed. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator)prof. dr. D.J.N. van Eijckdr. T. van der Storm Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) prof. dr. D.J.N. van Eijck dr. T. van der Storm Master's Software Engineering Problem analysis, Scientific literature survey, Theory building, Hypothesizing, Structuring research and validation, Project planning, Scientific reporting. Other: Study materials are made available through the course’s BlackBoard page. An interest in reading and writing scientific literature. Affinity with reading and writing English text. Knowledge of current challenges and results in software engineering. Plan for the Masters project, Survey of related literature.","Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of During this course you will come to understand why big software engineering projects are prone to failure. You will come to understand how performance is influenced at different levels: that of the individual software engineer, the team and the whole organization. You will learn about motivation, competences, and the crucial role of culture. Also you will learn about organizational paradigms and control mechanisms, quality paradigms, and the role of planning and design in a world that is volatile and of which a lot is unknown. As software engineering is a special kind of organization, you will also learn how effective our best practices are. With this knowledge you will be able to understand why a method like RUP or Scrum is sometimes successful and sometimes not. You will also come to assess such a method and better be able to use it in such a way to improve overall project performance. Developing large scale software systems is challenging for many reasons. We work from a set of requirements that are ambiguous and incomplete, may be invalid and are subject to change. It’s hard to determine the quality and doneness of (intermediate) deliverables like designs, plans and code. We have to coordinate up to 1.000 software engineers with imperfect mechanisms for separation of concerns. To be able to understand reasons for software project failure we study failed projects. We learn about organizational control mechanisms and look at theory from social sciences notably motivation, empowerment, effective teams and coordination strategies. Last but not least we look at what we can learn from the quality community: Lean, CMMi, TQM, Kaizen. We will also examine evidence about the practices we apply in software engineering, like test first, pair programming, software architecture. Information about procedures can be found athttp://www.student.uva.nl/se/az/item/course-registration.html. Lecture, work groups, seminar. Reading tests, essay and lab work. Recommended prior knowledge:Knowledge of software methods like Rup, Scrum, Xp and software practices like pair programming, test first. Experience with working in big projects. Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering Literature: Andy Oram, Greg Wilson'Making Software: What Really Works, and Why We Believe It'.","Course catalogue number 5364SOCO6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of The course focuses on methods and techniques of software construction. This primarily covers the programming and implementation activities of a software engineering project. Examples of such activities are coding and debugging, detailed design, unit testing, code reviews, optimization, component integration and code generation. The course has two main objectivea: In the practical course students will implement a Domain-Specific Language (DSL). This involves both language engineering aspects (parsing, type checking, interpretation etc.) as well as a substantial amount of programming and discussion. The code will be reviewed based on aspects of code quality, simplicity, readability, modularity, separation of concerns and consistency of style. Lectures will provide the required background on DSLs, model-driven engineering (MDE), compiler theory, generative programming, code quality, ""Don't-Repeat-Yourself"" (DRY), code smells and design patterns. Additional academic literature covers subjects such as design-by-contract, SOLID principles, data abstraction, modularity, hierarchy, programming style, code smells, and object-oriented frameworks. Students are required to complete an exam based on the academic literature, to show they master concepts and practices relevant for high quality software construction. Information about procedures can be found athttp://www.student.uva.nl/se/az/item/course-registration.html. Assessment is based on the code produced during the lab and a final exam. Both need to be completed successfully. Final grade is the average of both lab and exam grades. This is a Bring-Your-Own-Device (BYOD) course, so a laptop is required. See here more info:http://student.uva.nl/se/az/item/bring-your-own-device.html Technical mastery of one or more programming languages (e.g., Java, C#, etc.). Maximum number of students: 60 Course catalogue number 5364SOCO6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. T. van der Storm (co-ordinator)dr. J.J. Vinju Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. T. van der Storm (co-ordinator) dr. J.J. Vinju Master's Software Engineering Inform students about the area of software language engineering: how to employ model-driven and language-driven approaches in software construction. This is includes basic theory of compiler construction. Actively engage students to reason about and reflect upon aspect of design, code quality, and software construction methods. Lecture Seminar Computer lab session/practical training Supervision/feedback meeting Literature: Required reading: Crista Lopes', 'Exercises in Programming Styles'. Syllabus: Syllabus of landmark papers on topics in software construction.","Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of Carry out the research as proposed by the plan you made in the preparation phase. A lecturer (tutor) will be available for weekly feedback and discussion. Part time students will need to free time to work at least two month full time on their research. Information about procedures can be found athttp://www.student.uva.nl/se/az/item/course-registration.html. The Master’s project consists of a software engineering-themed research assignment (an internship) at either a company or a research institution. Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkersprof. dr. D.J.N. van Eijckdr. C.U. Grelck (co-ordinator)dr. T. van der Storm Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers prof. dr. D.J.N. van Eijck dr. C.U. Grelck (co-ordinator) dr. T. van der Storm Master's Software Engineering Acquiring the ability to do research by designing, executing and reporting on a project in the area of software engineering research, Adding knowledge or gathering new evidence in the field of software engineering. Literature: Scientific literature Quality of the work as reported on in the thesis, Quality of the presentation given during the defense session. In order to start the Master’s project you need to have approval from a lecturer (tutor) on your project plan and related literature survey.","Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Is part of Exit qualification: “The graduate masters the methods and techniques needed to analyze an existing software system and to enable it to evolve given changing requirements.” Our objectives are three-fold: The course ties in closely with paper writing sessions where the objectives are to learn from academic literature, to develop curiosity, and to improve argumentation and writing skills. This course is designed around lab sessions in which we study real and large (open-source) software systems, written in languages like C, Java, PHP or Ruby. We use Rascal -a programming language workbench, or meta programming language- to apply and build software metrics, software analyses, software visualisations and (if time permits) software transformations. Seehttp://www.rascal-mpl.org.The student is supported with introductory courses and interactive lab sessions while learning this new language in the beginning. The course is supported by a series of lectures on the theory of software maintenance and evolution, guest lecturers from field experts, and a guided study of a number of research papers about maintenance, reverse engineering, reengineering and renovation. Example topics are clone detection, mining software repositories and refactoring. Information about procedures can be found athttp://www.student.uva.nl/se/az/item/course-registration.html. The format is focused on practical skills via the lab exercises, such as exploring source code and building tools, and academic skills via the paper sessions. Every week we start with a two hour lecture on the theory of software evolution, which is required to understand the material covered in the lab exercises. The rest of the day and the following day are lab hours. You also need two hours time every other week to prepare for the bi-weekly two-hour paper sessions. In this course we use the experimental programming language Rascal, which is (beta) open-source software and new to most students. On top of that we dive into many new topics for the students. Therefore the lab time is designed to be an integral and interactive part of the teaching, where the lecturer and the students are both present. This course typically uses the following assessments, that will be detailed at the start of the course: The grade weights are indicative and will be detailed at the start of the course. Recommended prior knowledge: Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. C.U. Grelck (co-ordinator) Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. C.U. Grelck (co-ordinator) Master's Software Engineering The first objective is to acquire an understanding and appreciation of the challenges posed by software maintenance and software evolution. The second objective is to learn about quality of software and source code and how it affects software maintenance and evolution. The final objective is to be able to select and also construct software analysis and software transformation tools to help obtain insight in software quality and to help improve software quality. Syllabus: Reader consisting of selected papers on software evolution Other: http://www.rascal-mpl.org:<a href=:'>http://www.rascal-mpl.org:http://www.rascal-mpl.org Other: Potentially other (academic) sources online test to assess basic skills practical lab assignments, assessed by demonstration and oral exam (2/3 of final grade) writing exercise(s): essay and/or annotated bilbiography (1/3 final grade) Advanced programming skills in several programming languages. Knowledge of compiler construction (parsing, ASTs, basic code analysis, etc.). Good (academic) English reading and writing skills.",-,-,-,-,-
2017-2018,"Course catalogue number 52848SAR6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of For the most recent contents of this course and other information consulthttp://www.few.vu.nl/nl/studenten/studiegids/. Registration at the VU ; course code at the VU X_400170; enrollment viahttp://vunet.vu.nl Course will be offered at the VU University Amsterdam, see alsohttp://www.vu.nl/nl/studiegids/index.asp Course catalogue number 52848SAR6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) Associate Prof.Dr. P. Lago (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   Associate Prof.Dr. P. Lago (co-ordinator) Master's Software Engineering","Course catalogue number 5364SOTE6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of After the course, the student is able to understand and produce formal specifications of modest-sized samples of software, and is able to use formal specifications to generate relevant tests for the software. Software testing is checking whether a given software system satisfies given requirements or specifications. Without a specification, it is impossible to state what a piece of software should do, and there is no reasonable way to set up the test process. An informal specification is not enough, for if we want to automate the test process we need pre-given information about (i) which tests are relevant, and about (ii) what the outcomes of the relevant tests should be. The information about (i) states the preconditions of the code, and the information about (ii) states the postconditions. Programs written in functional or imperative languages can be tested, given a formal specification, by means of a random test generator. This test method will be illustrated for a number of example programs written in Haskell. The course includes a lightning introduction to this languages, and then focusses on how to test programs written in either functional or imperative style, and how to use tools for automated test generation. Basic familiarity with functional programming in Haskell. Information about procedures can be found athttp://www.student.uva.nl/se/az/item/course-registration.html. The schedule for this course is published onDataNose. Course examination will consist of assignments during the course plus a final exam consisting of a theory part and a computer lab part. Final grade determined for 40% by the course assignment results and for 60% by the result on the final exam. Course catalogue number 5364SOTE6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering Lecture Seminar Laptop seminar Literature: Recommended background reading: Kees Doets and Jan van Eijck, 'The Haskell Road to Logic, Maths and Programming'. College Publications, London 2012. This book can be ordered (at a discount) with the lecturer. Literature: Recommended background reading: M. Huth and M. Ryan, 'Logic in Computer Science: Modelling and Reasoning about Systems',Cambridge University Press 2004 (Second Edition). Literature: Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,'Logic in Action', electronically available fromhttp://www.logicinaction.org Literature: Graham Hutton, 'Programming in Haskell', Cambridge University Press 2016 (Second Edition). Syllabus: Reader: Jan van Eijck, 'Purely Functional Algorithm Specification'. Will be made available during the course. Syllabus Syllabus","Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of The success of a software system depends on the proper interpretation and analysis of stakeholder needs. Experience shows that it is extremely difficult to adequately define and specify a system. The perception of stakeholders and users of the problem is often incomplete, inaccurate and changes over time. Knowledge is hard to express and to transfer. During this course you will understand why stakeholder needs are so hard to express, capture and understand. You will also learn the shortcomings of best practices like scrum, prototyping, interviewing and use cases. Furthermore you will learn about data-driven methods for requirements engineering like Contextual Design. Requirements methods and techniques will be discussed during the lectures. If possible, you will do a real life requirements project. Next to specific RE literature we will also study literature from law, philosophy and cognitive science to get a better understanding of the subject. Finally students will design and do an experiment to show the inherent weakness of requirements best practices, like the use of prototyping for requirement validation. Information about procedures can be found athttp://www.student.uva.nl/se/az/item/course-registration.html. The schedule for this course is published onDataNose. Reading tests, paper and lab work. Recommended prior knowledge: Knowledge of requirement engineering, for example books of Sommerville, Robertson, van Lamsweerde, Wiegers or Pohl. 'Modeling techniques', e.g. UML diagrams to describe software behaviour. Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering Lecture Seminar Literature:  D. Kahneman 'Thinking, fast and slow'. Syllabus","Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For both part-time and full-time students. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of The objective of the course is teaching the skills needed to successfully complete the Master’s (graduation) project. In summary these skills are: During paper sessions you learn skills to find, read and assess relevant scientific publications. You will also learn to build argumentation structures you need for your theory and analysis. For your graduation you can choose from a number of defined themes. In exceptional cases it is possible to define a project yourself. A tutor will help you during the preparation. You will also discuss your ideas with other students. Information about procedures can be found athttp://www.student.uva.nl/se/az/item/course-registration.html. The schedule for this course is published onDataNose. The student can pass the course by getting approval by a lecturer (tutor) for two deliverables: Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For both part-time and full-time students. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering Problem analysis, Scientific literature survey, Theory building, Hypothesizing, Structuring research and validation, Project planning, Scientific reporting. Self-study Presentation/symposium Working independently on e.g. a project or thesis Supervision/feedback meeting Seminar Other:Study materials are made available through the course’s BlackBoard page. Study materials are made available through the course’s BlackBoard page. Study materials are made available through the course’s BlackBoard page. An interest in reading and writing scientific literature. Affinity with reading and writing English text. Knowledge of current challenges and results in software engineering. Plan for the Masters project, Survey of related literature.","Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of During this course you will come to understand why big software engineering projects are prone to failure. You will come to understand how performance is influenced at different levels: that of the individual software engineer, the team and the whole organization. You will learn about motivation, competences, and the crucial role of culture. Also you will learn about organizational paradigms and control mechanisms, quality paradigms, and the role of planning and design in a world that is volatile and of which a lot is unknown. As software engineering is a special kind of organization, you will also learn how effective our best practices are. With this knowledge you will be able to understand why a method like RUP or Scrum is sometimes successful and sometimes not. You will also come to assess such a method and better be able to use it in a situational fit way to improve overall project performance. Developing large scale software systems is challenging for many reasons. We work from a set of requirements that are ambiguous and incomplete, may be invalid and are subject to change. It’s hard to determine the quality and doneness of (intermediate) deliverables like designs, plans and code. We have to coordinate up to 1.000 software engineers with imperfect mechanisms for separation of concerns. To be able to understand reasons for software project failure we study failed projects. We learn about organizational control mechanisms and look at theory from social sciences notably motivation, empowerment, effective teams and coordination strategies. Last but not least we look at what we can learn from the quality community: Lean, CMMi, TQM, Kaizen. We will also examine evidence about the practices we apply in software engineering, like test first, pair programming, software architecture. Knowledge of software methods like Rup, Scrum, Xp and software practices like pair programming, test first. Experience with working in big projects. Information about procedures can be found athttp://www.student.uva.nl/se/az/item/course-registration.html. The schedule for this course is published onDataNose. Reading tests, essay and lab work. Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering Lecture Seminar Literature: Andy Oram, Greg Wilson'Making Software: What Really Works, and Why We Believe It'.","Course catalogue number 5364SOCO6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of The course focuses on methods and techniques of software construction. This primarily covers the programming and implementation activities of a software engineering project. Examples of such activities are coding and debugging, detailed design, unit testing, code reviews, optimization, component integration and code generation. The course has two main objectives: In the practical part of the course students will implement a Domain-Specific Language (DSL). This involves both language engineering aspects (parsing, type checking, interpretation etc.) as well as a substantial amount of programming and discussion. The code will be reviewed based on aspects of code quality, simplicity, readability, modularity, separation of concerns and consistency of style. Lectures will provide the required background on DSLs, model-driven engineering (MDE), compiler theory, generative programming, code quality, ""Don't-Repeat-Yourself"" (DRY), code smells and design patterns. Additional academic literature covers subjects such as design-by-contract, SOLID principles, data abstraction, modularity, hierarchy, programming style, code smells, and object-oriented frameworks. Students are required to complete an exam based on the academic literature, to show they master concepts and practices relevant for high quality software construction. Information about procedures can be found athttp://www.student.uva.nl/se/az/item/course-registration.html. The schedule for this course is published onDataNose. The assessment is based on the code produced during the labs and on a final written exam. Both must be passed individually; the final grade is the average of both the lab and the exam grade. This is a Bring-Your-Own-Device (BYOD) course, so a laptop is required. See here more info:http://student.uva.nl/se/az/item/bring-your-own-device.html Technical mastery of one or more programming languages (e.g., Java, C#, etc.).  Course catalogue number 5364SOCO6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. C.U. Grelck (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. C.U. Grelck (co-ordinator) Master's Software Engineering to inform students about the area of software language engineering: how to employ model-driven and language-driven approaches in software construction, including basic theory of compiler construction, and to actively engage students to reason about and to reflect upon aspects of code design, code quality and software construction methods. Lecture Seminar Computer lab session/practical training Supervision/feedback meeting Literature: Required reading: Crista Lopes', 'Exercises in Programming Styles'. Syllabus: Syllabus of landmark papers on topics in software construction.","Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Carry out the research as proposed by the plan you made in the preparation phase. A lecturer (tutor) will be available for weekly feedback and discussion. Part time students will need to free time to work at least two month full time on their research. Preparation Master Project Information about procedures can be found athttp://www.student.uva.nl/se/az/item/course-registration.html. The schedule for this course is published onDataNose. Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering Acquiring the ability to do research by designing, executing and reporting on a project in the area of software engineering research, Adding knowledge or gathering new evidence in the field of software engineering. Self-study Presentation/symposium Working independently on e.g. a project or thesis Supervision/feedback meeting Literature: Scientific literature Quality of the work as reported on in the thesis, Quality of the presentation given during the defense session. In order to start the Master’s project you need to have approval from a lecturer (tutor) on your project plan and related literature survey.","Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Exit qualification: “The graduate masters the methods and techniques needed to analyze an existing software system and to enable it to evolve given changing requirements.” Our objectives are three-fold: The course ties in closely with paper writing sessions where the objectives are to learn from academic literature, to develop curiosity, and to improve argumentation and writing skills. This course is designed around lab sessions in which we study real and large (open-source) software systems, written in languages like C, Java, PHP or Ruby. We use Rascal -a programming language workbench, or meta programming language- to apply and build software metrics, software analyses, software visualisations and (if time permits) software transformations. Seehttp://www.rascal-mpl.org.The student is supported with introductory courses and interactive lab sessions while learning this new language in the beginning. The course is supported by a series of lectures on the theory of software maintenance and evolution, guest lecturers from field experts, and a guided study of a number of research papers about maintenance, reverse engineering, reengineering and renovation. Example topics are clone detection, mining software repositories and refactoring. Information about procedures can be found athttp://www.student.uva.nl/se/az/item/course-registration.html. The format is focused on practical skills via the lab exercises, such as exploring source code and building tools, and academic skills via the paper sessions. Every week we start with a two hour lecture on the theory of software evolution, which is required to understand the material covered in the lab exercises. The rest of the day and the following day are lab hours. You also need two hours time every other week to prepare for the bi-weekly two-hour paper sessions. In this course we use the experimental programming language Rascal, which is (beta) open-source software and new to most students. On top of that we dive into many new topics for the students. Therefore the lab time is designed to be an integral and interactive part of the teaching, where the lecturer and the students are both present. The schedule for this course is published onDataNose. This course typically uses the following assessments, that will be detailed at the start of the course: The grade weights are indicative and will be detailed at the start of the course. Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) R.A. van Rozen (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   R.A. van Rozen (co-ordinator) Master's Software Engineering The first objective is to acquire an understanding and appreciation of the challenges posed by software maintenance and software evolution. The second objective is to learn about quality of software and source code and how it affects software maintenance and evolution. The final objective is to be able to select and also construct software analysis and software transformation tools to help obtain insight in software quality and to help improve software quality. Advanced programming skills in several programming languages. Knowledge of compiler construction (parsing, ASTs, basic code analysis, etc.). Good (academic) English reading and writing skills. Syllabus: Reader consisting of selected papers on software evolution Other:http://www.rascal-mpl.org:'>http://www.rascal-mpl.org:http://www.rascal-mpl.org Other: Potentially other (academic) sources online test to assess basic skills practical lab assignments, assessed by demonstration and oral exam (2/3 of final grade) writing exercise(s): essay and/or annotated bilbiography (1/3 final grade)","Course catalogue number 52848SAR6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of For the most recent contents of this course and other information consulthttp://www.few.vu.nl/nl/studenten/studiegids/. Registration at the VU ; course code at the VU X_400170; enrollment viahttp://vunet.vu.nl Course will be offered at the VU University Amsterdam, see alsohttp://www.vu.nl/nl/studiegids/index.asp Course catalogue number 52848SAR6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) Associate Prof.Dr. P. Lago (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   Associate Prof.Dr. P. Lago (co-ordinator) Master's Software Engineering",-,-,-,-
2018-2019,-,-,"Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of The success of a software system depends on the proper interpretation and analysis of stakeholder needs. Experience shows that it is extremely difficult to adequately define and specify a system. The perception of stakeholders and users of the problem is often incomplete, inaccurate and changes over time. Knowledge is hard to express and to transfer. During this course you will understand why stakeholder needs are so hard to express, capture and understand. You will also learn the shortcomings of best practices like scrum, prototyping, interviewing and use cases. Furthermore you will learn about data-driven methods for requirements engineering like Contextual Design. Requirements methods and techniques will be discussed during the lectures. If possible, you will do a real life requirements project. Next to specific RE literature we will also study literature from law, philosophy and cognitive science to get a better understanding of the subject. Finally students will design and do an experiment to show the inherent weakness of requirements best practices, like the use of prototyping for requirement validation. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. Reading tests, paper and lab work. Recommended prior knowledge: Knowledge of requirement engineering, for example books of Sommerville, Robertson, van Lamsweerde, Wiegers or Pohl. 'Modeling techniques', e.g. UML diagrams to describe software behaviour. Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering Lecture Seminar Literature:D. Kahneman 'Thinking, fast and slow'. D. Kahneman 'Thinking, fast and slow'. Syllabus:  D. Kahneman 'Thinking, fast and slow'. ","Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For both part-time and full-time students. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of The objective of the course is teaching the skills needed to successfully complete the Master’s (graduation) project. In summary these skills are: During paper sessions you learn skills to find, read and assess relevant scientific publications. You will also learn to build argumentation structures you need for your theory and analysis. For your graduation you can choose from a number of defined themes. In exceptional cases it is possible to define a project yourself. A tutor will help you during the preparation. You will also discuss your ideas with other students. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. The student can pass the course by getting approval by a lecturer (tutor) for two deliverables: Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For both part-time and full-time students. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering Problem analysis, Scientific literature survey, Theory building, Hypothesizing, Structuring research and validation, Project planning, Scientific reporting. Self-study Presentation/symposium Working independently on e.g. a project or thesis Supervision/feedback meeting Seminar Other:Study materials are made available through the course’s Canvas page. Study materials are made available through the course’s Canvas page. Study materials are made available through the course’s Canvas page. An interest in reading and writing scientific literature. Affinity with reading and writing English text. Knowledge of current challenges and results in software engineering. Plan for the Masters project, Survey of related literature.","Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of During this course you will come to understand why big software engineering projects are prone to failure. You will come to understand how performance is influenced at different levels: that of the individual software engineer, the team and the whole organization. You will learn about motivation, competences, and the crucial role of culture. Also you will learn about organizational paradigms and control mechanisms, quality paradigms, and the role of planning and design in a world that is volatile and of which a lot is unknown. As software engineering is a special kind of organization, you will also learn how effective our best practices are. With this knowledge you will be able to understand why a method like RUP or Scrum is sometimes successful and sometimes not. You will also come to assess such a method and better be able to use it in a situational fit way to improve overall project performance. Developing large scale software systems is challenging for many reasons. We work from a set of requirements that are ambiguous and incomplete, may be invalid and are subject to change. It’s hard to determine the quality and doneness of (intermediate) deliverables like designs, plans and code. We have to coordinate up to 1.000 software engineers with imperfect mechanisms for separation of concerns. To be able to understand reasons for software project failure we study failed projects. We learn about organizational control mechanisms and look at theory from social sciences notably motivation, empowerment, effective teams and coordination strategies. Last but not least we look at what we can learn from the quality community: Lean, CMMi, TQM, Kaizen. We will also examine evidence about the practices we apply in software engineering, like test first, pair programming, software architecture. Knowledge of software methods like Rup, Scrum, Xp and software practices like pair programming, test first. Experience with working in big projects. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. Reading tests, essay and lab work. Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering Lecture Seminar Literature:Andy Oram, Greg Wilson'Making Software: What Really Works, and Why We Believe It'. Andy Oram, Greg Wilson'Making Software: What Really Works, and Why We Believe It'. Andy Oram, Greg Wilson'Making Software: What Really Works, and Why We Believe It'.",-,"Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Carry out the research as proposed by the plan you made in the preparation phase. A lecturer (tutor) will be available for weekly feedback and discussion. Part time students will need to free time to work at least two month full time on their research. Preparation Master Project The schedule for this course is published onDataNose. Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering Acquiring the ability to do research by designing, executing and reporting on a project in the area of software engineering research, Adding knowledge or gathering new evidence in the field of software engineering. Self-study Presentation/symposium Working independently on e.g. a project or thesis Supervision/feedback meeting Literature:Scientific literature Scientific literature Scientific literature Quality of the work as reported on in the thesis, Quality of the presentation given during the defense session. In order to start the Master’s project you need to have approval from a lecturer (tutor) on your project plan and related literature survey.","Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Exit qualification: “The graduate masters the methods and techniques needed to analyze an existing software system and to enable it to evolve given changing requirements.” Our objectives are three-fold: The course ties in closely with paper writing sessions where the objectives are to learn from academic literature, to develop curiosity, and to improve argumentation and writing skills. This course is designed around lab sessions in which we study real and large (open-source) software systems, written in languages like C, Java, PHP or Ruby. We use Rascal -a programming language workbench, or meta programming language- to apply and build software metrics, software analyses, software visualisations and (if time permits) software transformations. Seehttp://www.rascal-mpl.org.The student is supported with introductory courses and interactive lab sessions while learning this new language in the beginning. The course is supported by a series of lectures on the theory of software maintenance and evolution, guest lecturers from field experts, and a guided study of a number of research papers about maintenance, reverse engineering, reengineering and renovation. Example topics are clone detection, mining software repositories and refactoring. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. This course typically uses the following assessments, that will be detailed at the start of the course: The grade weights are indicative and will be detailed at the start of the course. Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) R.A. van Rozen (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   R.A. van Rozen (co-ordinator) Master's Software Engineering The first objective is to acquire an understanding and appreciation of the challenges posed by software maintenance and software evolution. The second objective is to learn about quality of software and source code and how it affects software maintenance and evolution. The final objective is to be able to select and also construct software analysis and software transformation tools to help obtain insight in software quality and to help improve software quality. Advanced programming skills in several programming languages. Knowledge of compiler construction (parsing, ASTs, basic code analysis, etc.). Good (academic) English reading and writing skills. Lecture Laptop seminar Computer lab session/practical training Self-study Syllabus:Reader consisting of selected papers on software evolution Reader consisting of selected papers on software evolution Other:http://www.rascal-mpl.orgPotentially other (academic) sources http://www.rascal-mpl.org Potentially other (academic) sources Reader consisting of selected papers on software evolution http://www.rascal-mpl.org Potentially other (academic) sources online test to assess basic skills practical lab assignments, assessed by demonstration and oral exam (2/3 of final grade) writing exercise(s): essay and/or annotated bilbiography (1/3 final grade)",-,"Course catalogue number 5364SSVT6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of At the end of the course, the student is Software specification, verification, and testing entail checking whether a given software system satisfies given requirements and/or specifications. Without a specification, it is impossible to state what a piece of software should do, and there is no reasonable way to set up the test process. An informal specification is not enough. If we aim to automate the test process we need pre-given information about: Programs written in functional or imperative languages can be tested, given a formal specification, by means of a random test generator. This test method will be illustrated for a number of example programs that are written in Haskell. The course assumes basic familiarity with this language and focusses on how to test programs written in either functional or imperative style, and how to use tools for automated test generation. Basic familiarity with functional programming in Haskell. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. Course examination consists of weekly assignments plus a final exam both the theory and practical parts. Final grade determined for 40% by the weekly assignment results and for 60% by the result on the final exam. Course catalogue number 5364SSVT6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering able to understand and produce formal specifications of modest-sized samples of software, able to use formal specifications to generate relevant tests for the software Lecture Seminar Laptop seminar Self-study Literature:Graham Hutton, 'Programming in Haskell', Cambridge University Press 2016 (Second Edition).Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,'Logic in Action', electronically available fromhttp://www.logicinaction.orgRecommended background reading: Kees Doets and Jan van Eijck, 'The Haskell Road to Logic, Maths and Programming'. College Publications, London 2012. This book can be ordered (at a discount) with the lecturer. Graham Hutton, 'Programming in Haskell', Cambridge University Press 2016 (Second Edition). Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,'Logic in Action', electronically available fromhttp://www.logicinaction.org Recommended background reading: Kees Doets and Jan van Eijck, 'The Haskell Road to Logic, Maths and Programming'. College Publications, London 2012. This book can be ordered (at a discount) with the lecturer. Graham Hutton, 'Programming in Haskell', Cambridge University Press 2016 (Second Edition). Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,'Logic in Action', electronically available fromhttp://www.logicinaction.org Recommended background reading: Kees Doets and Jan van Eijck, 'The Haskell Road to Logic, Maths and Programming'. College Publications, London 2012. This book can be ordered (at a discount) with the lecturer. which tests are relevant --> this information states the preconditions of the code what the outcomes of the relevant tests should be --> this information states the postconditions of the code.","Course catalogue number 5364EMSS6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of The overall course objective is the design, development and verification of embedded software and systems: This course targets the software design and programming of embedded systems, i.e., computing systems which are not immediately recognized as such. Examples include mobile phones, TV sets, consumer electronics, Internet-of-Things, but also airplanes, cars, and satellites. Designing such embedded systems differs fundamentally from traditional design methods for general-purpose computer software: Embedded systems are subject to specific requirements, especially in terms of efficiency (size, weight and power) and costs. At the same time, embedded systems are subject to increased reliability constraints. The go-to solution to resolve system errors for general-purpose computing, i.e., a complete system restart, is typically precluded in an embedded system. The system must always be available and must always reliably produce correct results. To further complicate matters, the correctness of most embedded systems is not just defined by the correct result of a computation, but by the correct result and the correct timing. Imagine an air-bag controller, which must inflate the air-bag in time before the driver’s head hits the steering wheel, or a flight control system, which must correct turbulences, before the airplane becomes instable. Concerning less critical cases, we have for instance media players where the playback is delayed or the quality is degraded. In this course, we will provide an introduction to the domain of embedded computer systems, and teach common design and development methods of embedded software and systems. The course covers the following topics: More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. Course catalogue number 5364EMSS6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. ing. S.J. Altmeyer (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. ing. S.J. Altmeyer (co-ordinator) Master's Software Engineering The students know the characteristics of embedded software and systems and how to accommodate these characteristics during the design-phase. The students are able to specify and develop embedded software and systems for a given embedded architecture. Characteristics and constraints of embedded systems Embedded system design flow Specification of the functional and non-functional behavior of an embedded system Selection and configuration of suitable embedded architectures Analysis of non-functional behavior of embedded systems Correctness verification of (non-)functional properties of embedded systems C-Knowledge (preferred, not mandatory) Computer Organization (preferred, not mandatory) Lecture Self-study Working independently on e.g. a project or thesis Laptop seminar Practical Project Assignments Examination","Course catalogue number 5364DCBS6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of DevOps is a modern software and applications development model that realises the continuous integration (CI), continuous deployment (CD) and continuous improvement of the services and applications that is deeply based on the cloud virtualisation, on demand services deployment and precision services monitoring currently available on the major cloud platforms. The course discusses the basic concepts of DevOps, including its philosophy, workflow, monitoring methods, and tools. Students will apply these concepts to understand how they can be best implemented to automate development, test, and release practices. Students will work in teams to apply DevOps model and tools to develop working applications and will use one of cloud and DevOps platforms. The following topics will be covered in the course: The course will also feature guest lectures from local cloud providers or DevOps companies. Knowledge of one of programming languages Java, C or Python and one of IDE platforms More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. The course assessment includes two parts: individual assignment (30%) and final project (70%, of which final report and code 40% and project development process 30%) Course catalogue number 5364DCBS6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dhr. Y. Demchenko (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dhr. Y. Demchenko (co-ordinator) Master's Software Engineering Graduates are familiar with the concept of DevOps and related technologies, their benefits for organisational IT infrastructure and services management; understand organisational aspects of DevOps, describe relation of DevOps to other technologies Graduates will understand how to build cloud based applications and use cloud automation tools in the DevOps process applied to a range of applications and software development scenarios/processes Graduates will understand functionalities offered by the popular DevOps and cloud automations tools such as Chef, Puppet, Ansible, SlipStream and have practical hands on experience with one of such tools Introduction DevOps, core concepts and models, Continuous Delivery (CD), Continuous Integration (CI), Continuous Deployment. Agile development, relation to Agile, Scrum, Lean, ITSM Cloud Computing architecture, service models, virtualisation, resources management and monitoring DevOps and software engineering on major cloud platforms: AWS, Microsoft Azure. Cloud powered applications deployment, accounts management Cloud automation tools and platforms: Chef, Puppet, Ansible, SlipStream Software delivery lifecycle in an agile DevOps organisation, QA in cloud based software development systems, software security and Security Development Lifecycle management (SDLM) DevOps applications architecture, configuration management, environment setups in AWS cloud using SlipStream platform Lecture Self-study Working independently on e.g. a project or thesis Laptop seminar Presentation/symposium",-
2019-2020,-,-,"Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of This highly interactive course explores requirement engineering (RE) approaches and pitfalls by discussing real life cases. Supplementary lectures will go into truth finding, sense making, best practices, methods and will provide an abstract model for RE. Next to specific RE literature you will study literature from philosophy and psychology to get a better understanding of the domain. In the first weeks you will gather knowledge to construct requirements for a small project. You will get intensive feedback about your knowledge acquisition skills. This first hand experience will enable you to better appreciate the complexity and theory. Finally you will design and run an experiment to show the inherent sensitivity of requirements best practices to bias. By default we focus on the use of prototyping/sprint demos for validation. Knowledge of requirement engineering, for example books of Sommerville, Robertson, van Lamsweerde, Wiegers or Pohl. 'Modeling techniques', e.g. UML diagrams to describe software behaviour. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. Reading tests, paper and lab work. Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering You will understand why stakeholder needs are so hard to express, capture and understand. You will learn the shortcomings in the (agile) methods and best practices that are widely used. Furthermore you will learn about data-driven methods and the benefits of working with scenarios. Lecture Seminar Literature:D. Kahneman 'Thinking, fast and slow'. D. Kahneman 'Thinking, fast and slow'. Syllabus:  D. Kahneman 'Thinking, fast and slow'. ","Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For both part-time and full-time students. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of During paper sessions you learn skills to find, read and assess relevant scientific publications. You will also learn to build argumentation structures you need for your theory and analysis. For your graduation you can choose from a number of defined themes. In exceptional cases it is possible to define a project yourself. A tutor will help you during the preparation. You will also discuss your ideas with other students. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. The student can pass the course by getting approval by a lecturer (tutor) for two deliverables: Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For both part-time and full-time students. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering Problem analysis, Scientific literature survey, Theory building, Hypothesizing, Structuring research and validation, Project planning, Scientific reporting. Self-study Presentation/symposium Working independently on e.g. a project or thesis Supervision/feedback meeting Seminar Other:Study materials are made available through the course’s Canvas page. Study materials are made available through the course’s Canvas page. Study materials are made available through the course’s Canvas page. An interest in reading and writing scientific literature. Affinity with reading and writing English text. Knowledge of current challenges and results in software engineering. Plan for the Masters project, Survey of related literature.","Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Developing large scale software systems is challenging for many reasons. Our understanding of what needs to be done is at best incomplete, at points invalid, and subject to change. It’s hard to determine the adequacy of requirements, plans, designs and increments. The biggest projects require collaboration of thousands of people, with imperfect mechanisms for division of work, coordination, assessment of quality and assessment of progress. The code that is produced restricts the solution space for what still needs to be developed, and at worst becomes too complex to add the features that we need. The course setup is as follows: Knowledge of software methods like Rup, Scrum, Xp and software practices like pair programming, test first. Experience with working in big projects. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. Reading tests, essays, exams. Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering Insight in methods and best practices in the field of Software Engineering. Understand what problems these try to solve. Understand that methods and best practices are merely a means to an end. Insight into complexity of developing large software systems. Understanding what agility is, and how this is related to process and other factors. Understanding what planning entails, and how it contributes to a successful outcome. Insight in individual, team and organizational performance. Insight in organizational patterns to decompose and distribute tasks and empower engineers while ensuring their combined work leads to a successful outcome. First you will learn about software development methods. This is put in a historical overview spanning organizational science in general. Second you will focus on the different aspects of planning: organizing, sizing, architecture. Different views on planning explain to some extent differences between methods. Third you will focus on individual, group and organizational performance. What is a good software engineer? What is at the heart of good performing groups and organizations? You will get insight in theory of empowerment: what is the relationship between empowerment and behaviour? You will come to understand how situational this relationship is. Throughout the course you will examine an infamous failed case. This will give you insight in complexity, but also helps you to test the fitness of the methods and best practices you studied. Throughout the course guest lecturers from big software companies will tell you how these are organized. You will extract organizational patterns and see how  companies / programs compare. Companies that presented in the past years include Spotify, Netflix, MicroSoft, Amazon, Booking.com, Adyen, Bol.com, Philips, ASML and Dutch Government about programs like DSO, BRP and SZW-MR. Throughout the course you will read and study scientific literature about methods and best practices, in part categorized in sources like Making Software, and Leprechauns. Lecture Seminar Literature:Andy Oram, Greg Wilson 'Making Software: What Really Works, and Why We Believe It'. Andy Oram, Greg Wilson 'Making Software: What Really Works, and Why We Believe It'. Andy Oram, Greg Wilson 'Making Software: What Really Works, and Why We Believe It'.",-,"Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Carry out the research as proposed by the plan you made in the preparation phase. A lecturer (tutor) will be available for weekly feedback and discussion. Part time students will need to free time to work at least two months full time on their research. Preparation Master Project The schedule for this course is published onDataNose. The Master Project Software Engineering is assessed along three dimensions: Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering Acquiring the ability to do research by designing, executing and reporting on a project in the area of software engineering research, Adding knowledge or gathering new evidence in the field of software engineering. Self-study Presentation/symposium Working independently on e.g. a project or thesis Supervision/feedback meeting Literature:Scientific literature Scientific literature Scientific literature research carried out, written thesis, presentation and discussion during the defense session. In order to start the Master’s project you need to have approval from a lecturer (tutor) on your project plan and related literature survey.","Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of This course is designed around lab sessions in which we study real and large (open-source) software systems, written in languages like C, Java, PHP or Ruby. We use Rascal -a programming language workbench, or meta programming language- to apply and build software metrics, software analyses, software visualisations and (if time permits) software transformations. Seehttp://www.rascal-mpl.org.The student is supported with introductory courses and interactive lab sessions while learning this new language in the beginning. The course is supported by a series of lectures on the theory of software maintenance and evolution, guest lecturers from field experts, and a guided study of a number of research papers about maintenance, reverse engineering, reengineering and renovation. Example topics are clone detection, mining software repositories and refactoring. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. This course typically uses the following assessments, that will be detailed at the start of the course: The grade weights are indicative and will be detailed at the start of the course. The course reader and assignments will be made available on Canvas. Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) R.A. van Rozen (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   R.A. van Rozen (co-ordinator) Master's Software Engineering The first objective is to acquire an understanding and appreciation of the challenges posed by software maintenance and software evolution. The second objective is to learn about quality of software and source code and how it affects software maintenance and evolution. The final objective is to be able to select and also construct software analysis and software transformation tools to help obtain insight in software quality and to help improve software quality. Advanced programming skills in several programming languages. Knowledge of compiler construction (parsing, ASTs, basic code analysis, etc.). Good (academic) English reading and writing skills. Lecture Laptop seminar Computer lab session/practical training Self-study Syllabus:Reader consisting of selected papers on software evolution Reader consisting of selected papers on software evolution Other:http://www.rascal-mpl.orgPotentially other (academic) sources http://www.rascal-mpl.org Potentially other (academic) sources Reader consisting of selected papers on software evolution http://www.rascal-mpl.org Potentially other (academic) sources practical lab assignments, assessed by demonstration and oral exam (2/3 of final grade) writing exercise(s): essay and/or annotated bilbiography (1/3 final grade)",-,"Course catalogue number 5364SSVT6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Software specification, verification, and testing entail checking whether a given software system satisfies given requirements and/or specifications. Without a specification, it is impossible to state what a piece of software should do, and there is no reasonable way to set up the test process. An informal specification is not enough. If we aim to automate the test process we need pre-given information about: Programs written in functional or imperative languages can be tested, given a formal specification, by means of a random test generator. This test method will be illustrated for a number of example programs that are written in Haskell. The course assumes basic familiarity with this language and focusses on how to test programs written in either functional or imperative style, and how to use tools for automated test generation. Basic familiarity with functional programming in Haskell. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. Course examination consists of weekly assignments plus a final exam both the theory and practical parts. Final grade determined for 40% by the weekly assignment results and for 60% by the result on the final exam. Course catalogue number 5364SSVT6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering able to understand and produce formal specifications of modest-sized samples of software, able to use formal specifications to generate relevant tests for the software Lecture Seminar Laptop seminar Self-study Literature:Graham Hutton, 'Programming in Haskell', Cambridge University Press 2016 (Second Edition).Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,'Logic in Action', electronically available fromhttp://www.logicinaction.orgKees Doets and Jan van Eijck, 'The Haskell Road to Logic, Maths and Programming'. College Publications, London 2012. Graham Hutton, 'Programming in Haskell', Cambridge University Press 2016 (Second Edition). Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,'Logic in Action', electronically available fromhttp://www.logicinaction.org Kees Doets and Jan van Eijck, 'The Haskell Road to Logic, Maths and Programming'. College Publications, London 2012. Graham Hutton, 'Programming in Haskell', Cambridge University Press 2016 (Second Edition). Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,'Logic in Action', electronically available fromhttp://www.logicinaction.org Kees Doets and Jan van Eijck, 'The Haskell Road to Logic, Maths and Programming'. College Publications, London 2012. which tests are relevant --> this information states the preconditions of the code what the outcomes of the relevant tests should be --> this information states the postconditions of the code.","Course catalogue number 5364EMSS6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of This course targets the software design and programming of embedded systems, i.e., computing systems which are not immediately recognized as such. Examples include mobile phones, TV sets, consumer electronics, Internet-of-Things, but also airplanes, cars, and satellites. Designing such embedded systems differs fundamentally from traditional design methods for general-purpose computer software: Embedded systems are subject to specific requirements, especially in terms of efficiency (size, weight and power) and costs. At the same time, embedded systems are subject to increased reliability constraints. The go-to solution to resolve system errors for general-purpose computing, i.e., a complete system restart, is typically precluded in an embedded system. The system must always be available and must always reliably produce correct results. To further complicate matters, the correctness of most embedded systems is not just defined by the correct result of a computation, but by the correct result and the correct timing. Imagine an air-bag controller, which must inflate the air-bag in time before the driver’s head hits the steering wheel, or a flight control system, which must correct turbulences, before the airplane becomes instable. Concerning less critical cases, we have for instance media players where the playback is delayed or the quality is degraded. In this course, we will provide an introduction to the domain of embedded computer systems, and teach common design and development methods of embedded software and systems. The course covers the following topics: More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. Course catalogue number 5364EMSS6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.D. Pimentel (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. A.D. Pimentel (co-ordinator) Master's Software Engineering The students know the characteristics of embedded software and systems and how to accommodate these characteristics during the design-phase. The students are able to specify and develop embedded software and systems for a given embedded architecture. Characteristics and constraints of embedded systems Embedded system design flow Specification of the functional and non-functional behavior of an embedded system Selection and configuration of suitable embedded architectures Analysis of non-functional behavior of embedded systems Correctness verification of (non-)functional properties of embedded systems C-Knowledge (preferred, not mandatory) Computer Organization (preferred, not mandatory) Lecture Self-study Working independently on e.g. a project or thesis Laptop seminar Practical Project (group) Assignments (individual)","Course catalogue number 5364DCBS6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of DevOps is a modern software and applications development model that realises the continuous integration (CI), continuous deployment (CD) and continuous improvement of the services and applications that is deeply based on the cloud virtualisation, on demand services deployment and precision services monitoring currently available on the major cloud platforms. The course discusses the basic concepts of DevOps, including its philosophy, workflow, monitoring methods, and tools. Students will apply these concepts to understand how they can be best implemented to automate development, test, and release practices. Students will work in teams to apply DevOps model and tools to develop working applications and will use one of cloud and DevOps platforms. The following topics will be covered in the course: The course will also feature guest lectures from local cloud providers or DevOps companies. Familiarity with one of the programming languages Java, C or Python and with one IDE platform More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. The course assessment includes the following components: individual practical assignments (20%); literature study 20%; group project report  and code 50%; project development process 10%. Course catalogue number 5364DCBS6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dhr. Y. Demchenko (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dhr. Y. Demchenko (co-ordinator) Master's Software Engineering Graduates are familiar with the concept of DevOps and related technologies, their benefits for organisational IT infrastructure and services management; understand organisational aspects of DevOps, describe relation of DevOps to other technologies Graduates will understand how to build cloud-based applications and use cloud automation tools in the DevOps process applied to a range of applications and software development scenarios/processes Graduates will understand functionalities offered by the popular DevOps and cloud automations tools such as Chef, Puppet, Ansible, SlipStream and have practical hands on experience with one of such tools Introduction DevOps, core concepts and models, Continuous Delivery (CD), Continuous Integration (CI), Continuous Deployment. Agile development, relation to Agile, Scrum, Lean, ITSM Cloud Computing architecture, service models, virtualisation, resources management and monitoring DevOps and software engineering on major cloud platforms: AWS, Microsoft Azure. Cloud powered applications deployment, accounts management Cloud automation tools and platforms: Chef, Puppet, Ansible, SlipStream Software delivery life cycle in an agile DevOps organisation, QA in cloud based software development systems, software security and Security Development Life cycle management (SDLM) DevOps applications architecture, configuration management, monitoring, environment setup on the selected cloud platform AWS or Microsoft Azure. Lecture Self-study Working independently on e.g. a project or thesis Laptop seminar Presentation/symposium",-
2020-2021,-,-,"Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of This highly interactive course explores requirement engineering (RE) approaches and pitfalls by discussing real life cases. Supplementary lectures will go into truth finding, sense making, best practices, methods and will provide an abstract model for RE. Next to specific RE literature you will study literature from philosophy and psychology to get a better understanding of the domain. In the first weeks you will gather knowledge to construct requirements for a small project. You will get intensive feedback about your knowledge acquisition skills. This first hand experience will enable you to better appreciate the intricacies in applying theory even in a simple domain. Finally you will design and run an experiment to show the inherent sensitivity of requirements best practices to bias. By default we focus on the use of prototyping/sprint demos for validation. Knowledge of requirement engineering, for example books of Sommerville, Robertson, van Lamsweerde, Wiegers or Pohl. 'Modeling techniques', e.g. UML diagrams to describe software behaviour. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. Reading tests, paper, exam and lab work. Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering You will understand why stakeholder needs are so hard to express, capture and understand. You will learn the shortcomings in the (agile) methods and best practices that are widely used. Furthermore you will learn about data-driven methods and the benefits of working with scenarios. Lecture Seminar Literature:D. Kahneman 'Thinking, fast and slow'. D. Kahneman 'Thinking, fast and slow'. Syllabus:  D. Kahneman 'Thinking, fast and slow'. ","Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For both part-time and full-time students. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of During paper sessions you learn skills to find, read and assess relevant scientific publications. You will also learn to build argumentation structures you need for your theory and analysis. For your graduation project, you can choose from a number of defined themes. It is also possible to define a project yourself, once you have thoroughly examined the foundation and feasibility of your idea. The lecturer will help you during the preparation. You will also discuss your ideas with other students. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. The student can pass the course by getting approval from the course coordinator and the academic supervisor for two deliverables: Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For both part-time and full-time students. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering Problem analysis, Scientific literature survey, Theory building, Hypothesizing, Structuring research and validation, Project planning, Scientific reporting. Self-study Presentation/symposium Working independently on e.g. a project or thesis Supervision/feedback meeting Seminar Other:Study materials are made available through the course’s Canvas page. Study materials are made available through the course’s Canvas page. Study materials are made available through the course’s Canvas page. An interest in reading and writing scientific literature. Affinity with reading and writing English text. Knowledge of current challenges and results in software engineering. Graduation project proposal, Survey of related literature.","Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Developing large scale software systems is challenging for many reasons. Our understanding of what needs to be done is at best incomplete, at points invalid, and subject to change. It’s hard to determine the adequacy of requirements, plans, designs and increments. The biggest projects require collaboration of thousands of people, with imperfect mechanisms for division of work, coordination, assessment of quality and assessment of progress. The code that is produced restricts the solution space for what still needs to be developed, and at worst becomes too complex to add the features that we need. The course setup is as follows: Knowledge of software methods like Rup, Scrum, Xp and software practices like pair programming, test first. Experience with working in big projects. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. Reading tests, essays, exams. Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering Insight in methods and best practices in the field of Software Engineering. Understand what problems these try to solve. Understand that methods and best practices are merely a means to an end. Insight into complexity of developing large software systems. Understanding what agility is, and how this is related to process and other factors. Understanding what planning entails, and how it contributes to a successful outcome. Insight in individual, team and organizational performance. Insight in organizational patterns to decompose and distribute tasks and empower engineers while ensuring their combined work leads to a successful outcome. First you will learn about software development methods. This is put in a historical overview spanning organizational science in general. Second you will focus on the different aspects of planning: organizing, sizing, architecture. Different views on planning explain to some extent differences between methods. Third you will focus on individual, group and organizational performance. What is a good software engineer? What is at the heart of good performing groups and organizations? You will get insight in theory of empowerment: what is the relationship between empowerment and behaviour? You will come to understand how situational this relationship is. Throughout the course you will examine an infamous failed case. This will give you insight in complexity, but also helps you to test the fitness of the methods and best practices you studied. Throughout the course guest lecturers from big software companies will tell you how these are organized. You will extract organizational patterns and see how  companies / programs compare. Companies that presented in the past years include Spotify, Netflix, MicroSoft, Amazon, Booking.com, Adyen, Bol.com, Philips, ASML and Dutch Government about programs like DSO, BRP and SZW-MR. Throughout the course you will read and study scientific literature about methods and best practices, in part categorized in sources like Making Software, and Leprechauns. Lecture Seminar Literature:Andy Oram, Greg Wilson 'Making Software: What Really Works, and Why We Believe It'. Andy Oram, Greg Wilson 'Making Software: What Really Works, and Why We Believe It'. Andy Oram, Greg Wilson 'Making Software: What Really Works, and Why We Believe It'.",-,"Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Carry out the research as proposed by the plan you made in the preparation phase. An academic supervisor will be available for (weekly) feedback and discussion. Part-time students will need to discuss their planning with the coordinator and the academic supervisor, as there are various possibilities to distribute the necessary work across the study time. Preparation Master Project The schedule for this course is published onDataNose. The Master Project Software Engineering is assessed along three dimensions: Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering Acquiring the ability to do research by designing, executing and reporting on a project in the area of software engineering research, Adding knowledge or gathering new evidence in the field of software engineering. Self-study Presentation/symposium Working independently on e.g. a project or thesis Supervision/feedback meeting Literature:Scientific literature Scientific literature Scientific literature research carried out, written thesis, presentation and discussion during the defense session. In order to start the Master’s project you need to have approval from the Preparation Master Project course coordinator and your academic supervisor on your project plan and related literature survey.","Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of This course is designed around lab sessions in which we study real and large (open-source) software systems, written in languages like C, Java, PHP or Ruby. We use Rascal -a programming language workbench, or meta programming language- to apply and build software metrics, software analyses, software visualisations and (if time permits) software transformations. Seehttp://www.rascal-mpl.org.The student is supported with introductory courses and interactive lab sessions while learning this new language in the beginning. The course is supported by a series of lectures on the theory of software maintenance and evolution, guest lecturers from field experts, and a guided study of a number of research papers about maintenance, reverse engineering, reengineering and renovation. Example topics are clone detection, mining software repositories and refactoring. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. This course typically uses the following assessments, that will be detailed at the start of the course: The course reader and assignments will be made available on Canvas. Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) R.A. van Rozen (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   R.A. van Rozen (co-ordinator) Master's Software Engineering The first objective is to acquire an understanding and appreciation of the challenges posed by software maintenance and software evolution. The second objective is to learn about quality of software and source code and how it affects software maintenance and evolution. The final objective is to be able to select and also construct software analysis and software transformation tools to help obtain insight in software quality and to help improve software quality. Advanced programming skills in several programming languages. Knowledge of compiler construction (parsing, ASTs, basic code analysis, etc.). Good (academic) English reading and writing skills. Lecture Laptop seminar Computer lab session/practical training Self-study Syllabus:Reader consisting of selected papers on software evolution Reader consisting of selected papers on software evolution Other:http://www.rascal-mpl.orgPotentially other (academic) sources http://www.rascal-mpl.org Potentially other (academic) sources Reader consisting of selected papers on software evolution http://www.rascal-mpl.org Potentially other (academic) sources practical lab assignments, assessed by demonstration and oral exam writing exercise(s): essay and/or annotated bilbiography",-,"Course catalogue number 5364SSVT6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Software specification, verification, and testing entail checking whether a given software system satisfies given requirements and/or specifications. Without a specification, it is impossible to state what a piece of software should do, and there is no reasonable way to set up the test process. An informal specification is not enough. If we aim to automate the test process we need pre-given information about: Programs written in functional or imperative languages can be tested, given a formal specification, by means of a random test generator. This test method will be illustrated for a number of example programs that are written in Haskell. The course assumes basic familiarity with this language and focusses on how to test programs written in either functional or imperative style, and how to use tools for automated test generation. Basic familiarity with logic and functional programming in Haskell. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. Course examination consists of weekly assignments plus a final exam both the theory and practical parts. Course catalogue number 5364SSVT6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering understand and write specifications in the language of predicate logic. use type-specification and abstraction to make programs more easily testable. write formal specifications for testing Haskell code. use random test generation for automating the test process. Lecture Seminar Laptop seminar Self-study Literature:Graham Hutton, 'Programming in Haskell', Cambridge University Press 2016 (Second Edition).Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,'Logic in Action', electronically available fromhttp://www.logicinaction.orgKees Doets and Jan van Eijck, 'The Haskell Road to Logic, Maths and Programming'. College Publications, London 2012. Graham Hutton, 'Programming in Haskell', Cambridge University Press 2016 (Second Edition). Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,'Logic in Action', electronically available fromhttp://www.logicinaction.org Kees Doets and Jan van Eijck, 'The Haskell Road to Logic, Maths and Programming'. College Publications, London 2012. Graham Hutton, 'Programming in Haskell', Cambridge University Press 2016 (Second Edition). Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,'Logic in Action', electronically available fromhttp://www.logicinaction.org Kees Doets and Jan van Eijck, 'The Haskell Road to Logic, Maths and Programming'. College Publications, London 2012. which tests are relevant --> this information states the preconditions of the code what the outcomes of the relevant tests should be --> this information states the postconditions of the code.","Course catalogue number 5364EMSS6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of This course targets the software design and programming of embedded systems, i.e., computing systems which are not immediately recognized as such. Examples include mobile phones, TV sets, consumer electronics, Internet-of-Things, but also airplanes, cars, and satellites. Designing such embedded systems differs fundamentally from traditional design methods for general-purpose computer software: Embedded systems are subject to specific requirements, especially in terms of efficiency (size, weight and power) and costs. At the same time, embedded systems are subject to increased reliability constraints. The go-to solution to resolve system errors for general-purpose computing, i.e., a complete system restart, is typically precluded in an embedded system. The system must always be available and must always reliably produce correct results. To further complicate matters, the correctness of most embedded systems is not just defined by the correct result of a computation, but also by the correct timing. Imagine an air-bag controller, which must inflate the air-bag in time before the driver’s head hits the steering wheel, or a flight control system, which must correct turbulence, before the airplane becomes unstable. Concerning less critical cases, we have for instance media players where the playback is delayed or the quality is degraded. In this course, we will provide an introduction to the broad domain of embedded computer systems, and teach common design and development methods of embedded software and systems. The course covers the following topics: More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. A Canvas site for the course is available Course catalogue number 5364EMSS6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) prof. dr. K.B. Akesson MSc (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   prof. dr. K.B. Akesson MSc (co-ordinator) Master's Software Engineering The student is able to explain the key characteristics of embedded software and systems The student is able to specify embedded systems using aspect models at different levels of abstraction The student is able to functionally verify weak termination of systems using methods based on Petri Net models The student is able to verify schedulability of periodic tasks and perform cache analysis on a single-core system, and explain the added challenges in a multi-core system The student is able to explain how design-space exploration identifies hardware and software configurations that satisfy multi-dimensional constraints on e.g. cost, performance and energy consumption The student is able to work together in a team to develop software that satisfies its requirements on a given embedded platform Characteristics and constraints of embedded systems Embedded system design flow Specification of the functional and non-functional behavior of an embedded system Selection and configuration of suitable embedded architectures Analysis of non-functional behavior of embedded systems Correctness verification of (non-)functional properties of embedded systems Programming (Java, Python, C++, or similar language) Computer Organization (preferred, not mandatory) Lecture Self-study Working independently on e.g. a project or thesis Laptop seminar Practical Project (group) Assignments (individual)","Course catalogue number 5364DCBS6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of DevOps is a modern software and applications development model that realises the continuous integration (CI), continuous deployment (CD) and continuous improvement of the services and applications that is deeply based on the cloud virtualisation, on demand services deployment and precision services monitoring currently available on the major cloud platforms. The course discusses the basic concepts of DevOps, including its philosophy, workflow, monitoring methods, and tools. Students will apply these concepts to understand how they can be best implemented to automate development, test, and release practices. Students will work in teams to apply DevOps model and tools to develop working applications and will use one of cloud and DevOps platforms. The following topics will be covered in the course: The course will also feature guest lectures from local cloud providers and DevOps companies. Familiarity with one of the programming languages: Java, C or Python, and with any IDE platform More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. The course assessment includes the following components: individual practical assignments; literature study; group project report  and code; project development process. Course catalogue number 5364DCBS6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dhr. Y. Demchenko (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dhr. Y. Demchenko (co-ordinator) Master's Software Engineering Graduates are familiar with the concept of DevOps and related technologies, their benefits for organisational IT infrastructure and services management; understand organisational aspects of DevOps, describe relation of DevOps to other technologies Graduates will understand how to build cloud-based applications and use cloud automation tools in the DevOps process applied to a range of applications and software development scenarios/processes Graduates will understand functionalities offered by the popular DevOps and cloud automations tools such as Chef, Puppet, Ansible,  and have practical hands on experience with one of such tools Introduction DevOps, core concepts and models, Continuous Delivery (CD), Continuous Integration (CI), Continuous Deployment. Agile development, relation to Agile, Scrum, Lean, ITSM Cloud Computing architecture, service models, virtualisation, resources management and monitoring DevOps and software engineering on major cloud platforms: AWS, Microsoft Azure. Cloud powered applications deployment, accounts management Cloud automation tools and platforms: Chef, Puppet, Ansible, and DevOps tools available from the major cloud providers AWS and Azure Software delivery life cycle in an agile DevOps organisation, QA in cloud based software development systems, software security and Security Development Life cycle management (SDLM) DevOps applications architecture, configuration management, monitoring, environment setup on the selected cloud platform AWS or Microsoft Azure. Lecture Self-study Working independently on e.g. a project or thesis Laptop seminar Presentation/symposium",-
2021-2022,-,-,"Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of This highly interactive course explores requirement engineering (RE) approaches and pitfalls by discussing real life cases. Supplementary lectures will go into truth finding, sense making, best practices, methods and will provide an abstract model for RE. At the heart RE is about knowledge elicitation, creation and validation to make decisions about what system to construct. We humans are by no means truth telling and finding machines. You will explore  psychological and philosophical sources to get a better understanding of how that works. Lab work in the first weeks of the course is about engineering requirements for a small real life project. You will get feedback about your knowledge acquisition skills. This first hand experience will enable you to better appreciate the intricacies in applying theory even in a simple domain. Finally you will design and run an experiment to show the inherent sensitivity of requirements best practices to bias. Knowledge of requirement engineering, for example books of Sommerville, Robertson, van Lamsweerde, Wiegers or Pohl. 'Modeling techniques', e.g. UML diagrams to describe software behaviour. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. Reading tests, paper, exam and lab work. Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering You will understand why stakeholder needs are so hard to express, capture and understand You will learn the shortcomings in the (agile) methods and best practices that are widely used Furthermore you will learn how to get more reliable data and to use that for decision making Lecture Seminar Literature:D. KahnemanThinking, fast and slow D. KahnemanThinking, fast and slow Syllabus:  D. KahnemanThinking, fast and slow ","Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For both part-time and full-time students. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of During paper sessions you learn skills to find, read and assess relevant scientific publications. You will also learn to build argumentation structures you need for your theory and analysis. For your graduation project, you can choose from a number of defined themes. It is also possible to define a project yourself, once you have thoroughly examined the foundation and feasibility of your idea. The lecturer will help you during the preparation. You will also discuss your ideas with other students. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. The student can pass the course by getting approval from the course coordinator and the academic supervisor for two deliverables: Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For both part-time and full-time students. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering Problem analysis Scientific literature survey Theory building Hypothesizing Structuring research and validation Project planning Scientific reporting Self-study Presentation/symposium Working independently on e.g. a project or thesis Supervision/feedback meeting Seminar Other:Study materials are made available through the course’s Canvas page. Study materials are made available through the course’s Canvas page. Study materials are made available through the course’s Canvas page. An interest in reading and writing scientific literature Affinity with reading and writing English text Knowledge of current challenges and results in software engineering Graduation project proposal Survey of related literature","Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Developing large scale software systems is challenging for many reasons. Our understanding of what needs to be done is at best incomplete, at points invalid, and subject to change. It’s hard to determine the adequacy of requirements, plans, designs and increments. The biggest projects require collaboration of thousands of people, with imperfect mechanisms for division of work, coordination, assessment of quality and assessment of progress. The code that is produced restricts the solution space for what still needs to be developed, and at worst becomes too complex to add the features that we need. The course setup is as follows: Knowledge of software methods like Rup, Scrum, Xp and software practices like pair programming, test first. Experience with working in big projects. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. Reading tests, essays, exams. Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering Insight in methods and best practices in the field of Software Engineering. Understand what problems these try to solve. Understand that methods and best practices are merely a means to an end Insight into complexity of developing large software systems Understanding what agility is, and how this is related to process and other factors Understanding what planning entails, and how planning contributes to a successful outcome Insight in individual, team and organizational performance Insight in organizational patterns to decompose and distribute tasks and empower engineers while ensuring their combined work leads to a successful outcome First you will learn about software development methods. This is put in a historical overview spanning organizational science in general. Second you will focus on the different aspects of planning: organizing, sizing, architecture. Different views on planning explain to some extent differences between methods. Third you will focus on individual, group and organizational performance. What is a good software engineer? What is at the heart of good performing groups and organizations? You will get insight in theory of empowerment: what is the relationship between empowerment and behaviour? You will come to understand how situational this relationship is. Throughout the course you will examine an infamous failed case. This will give you insight in complexity, but also helps you to test the fitness of the methods and best practices you studied. Throughout the course guest lecturers from big software companies will tell you how these are organized. You will extract organizational patterns and see how  companies / programs compare. Companies that presented in the past years include Spotify, Netflix, MicroSoft, Amazon, Booking.com, Adyen, Bol.com, Philips, ASML and Dutch Government about programs like DSO, BRP and SZW-MR. Throughout the course you will read and study scientific literature about methods and best practices, in part organized in sources like Making Software, and Leprechauns. Lecture Seminar Literature:Andy Oram, Greg WilsonMaking Software: What Really Works, and Why We Believe It. Andy Oram, Greg WilsonMaking Software: What Really Works, and Why We Believe It. Andy Oram, Greg WilsonMaking Software: What Really Works, and Why We Believe It.",-,"Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Carry out the research as proposed by the plan you made in the preparation phase. An academic supervisor will be available for (weekly) feedback and discussion. Part-time students will need to discuss their planning with the coordinator and the academic supervisor, as there are various possibilities to distribute the necessary work across the study time. Preparation Master Project The schedule for this course is published onDataNose. The Master Project Software Engineering is assessed along three dimensions: Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering Acquiring the ability to do research by designing, executing and reporting on a project in the area of software engineering research Adding knowledge or gathering new evidence in the field of software engineering Self-study Presentation/symposium Working independently on e.g. a project or thesis Supervision/feedback meeting Literature:Scientific literature Scientific literature Scientific literature research carried out written thesis presentation and discussion during the defense session In order to start the Master’s project you need to have approval from the Preparation Master Project course coordinator and your academic supervisor on your project plan and related literature survey.","Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of This course is designed around lab sessions in which we study real and large (open-source) software systems, written in languages like C, Java, PHP or Ruby. We use Rascal -a programming language workbench, or meta programming language- to apply and build software metrics, software analyses, software visualisations and (if time permits) software transformations. Seehttp://www.rascal-mpl.org.The student is supported with introductory courses and interactive lab sessions while learning this new language in the beginning. The course is supported by a series of lectures on the theory of software maintenance and evolution, guest lecturers from field experts, and a guided study of a number of research papers about maintenance, reverse engineering, reengineering and renovation. Example topics are clone detection, mining software repositories and refactoring. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. This course typically uses the following assessments, that will be detailed at the start of the course: The course reader and assignments will be made available on Canvas. Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. L.T. van Binsbergen (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. L.T. van Binsbergen (co-ordinator) Master's Software Engineering The first objective is to acquire an understanding and appreciation of the challenges posed by software maintenance and software evolution The second objective is to learn about quality of software and source code and how it affects software maintenance and evolution The final objective is to be able to select and also construct software analysis and software transformation tools to help obtain insight in software quality and to help improve software quality Advanced programming skills in several programming languages Knowledge of compiler construction (parsing, ASTs, basic code analysis, etc.) Good (academic) English reading and writing skills Lecture Laptop seminar Computer lab session/practical training Self-study Syllabus:Reader consisting of selected papers on software evolution Reader consisting of selected papers on software evolution Other:http://www.rascal-mpl.orgPotentially other (academic) sources http://www.rascal-mpl.org Potentially other (academic) sources Reader consisting of selected papers on software evolution http://www.rascal-mpl.org Potentially other (academic) sources practical lab assignments, assessed by demonstration and oral exam writing exercise(s): essay and/or annotated bilbiography",-,"Course catalogue number 5364SSVT6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Software specification, verification, and testing entail checking whether a given software system satisfies given requirements and/or specifications. Without a specification, it is impossible to state what a piece of software should do, and there is no reasonable way to set up the test process. An informal specification is not enough. If we aim to automate the test process we need pre-given information about: Programs written in functional or imperative languages can be tested, given a formal specification, by means of a random test generator. This test method will be illustrated for a number of example programs that are written in Haskell. The course assumes basic familiarity with this language and focusses on how to test programs written in either functional or imperative style, and how to use tools for automated test generation. Basic familiarity with logic and functional programming in Haskell. More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. Course examination consists of weekly assignments plus a final exam both the theory and practical parts. Course catalogue number 5364SSVT6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering understand and write specifications in the language of predicate logic use type-specification and abstraction to make programs more easily testable write formal specifications for testing Haskell code use random test generation for automating the test process Lecture Seminar Laptop seminar Self-study Literature:Graham Hutton,Programming in Haskell, Cambridge University Press 2016 (Second Edition).Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,Logic in Action, electronically available fromhttp://www.logicinaction.orgKees Doets and Jan van Eijck,The Haskell Road to Logic, Maths and Programming. College Publications, London 2012. Graham Hutton,Programming in Haskell, Cambridge University Press 2016 (Second Edition). Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,Logic in Action, electronically available fromhttp://www.logicinaction.org Kees Doets and Jan van Eijck,The Haskell Road to Logic, Maths and Programming. College Publications, London 2012. Graham Hutton,Programming in Haskell, Cambridge University Press 2016 (Second Edition). Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,Logic in Action, electronically available fromhttp://www.logicinaction.org Kees Doets and Jan van Eijck,The Haskell Road to Logic, Maths and Programming. College Publications, London 2012. which tests are relevant --> this information states the preconditions of the code what the outcomes of the relevant tests should be --> this information states the postconditions of the code","Course catalogue number 5364EMSS6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of This course is an introduction to the domain of embedded systems, i.e., computing systems which are not immediately recognized as such. Examples include smart phones, televisions, and Internet-of-Things (IoT) devices, but also complex cyber-physical systems like airplanes, cars, and satellites. Designing such embedded systems fundamentally differs from traditional design methods for general-purpose computer software. Embedded systems are subject to specific requirements, especially in terms of efficiency (size, weight and power) and costs. At the same time, embedded systems are subject to increased reliability constraints. The go-to solution to resolve system errors for general-purpose computing, i.e., a complete system restart, is typically precluded in an embedded system. The system must always be available and must always reliably produce correct results. To further complicate matters, the correctness of most embedded systems is not just defined by the correct result of a computation, but by the correct result and the correct timing. Imagine an air-bag controller, which must inflate the air-bag in time before the driver’s head hits the steering wheel, or a flight control system, which must correct turbulences, before the airplane becomes unstable. Concerning less critical cases, we have for instance media players where the playback is delayed or the quality is degraded. The course covers the following topics: More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. A Canvas site for the course is available Course catalogue number 5364EMSS6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) prof. dr. K.B. Akesson MSc (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   prof. dr. K.B. Akesson MSc (co-ordinator) Master's Software Engineering The student is able to explain the key characteristics of embedded software and systems The student is able to specify embedded systems using aspect models at different levels of abstraction The student is able to functionally verify weak termination of systems using methods based on Petri Net models The student is able to verify schedulability of periodic tasks and perform cache analysis on a single-core system, and explain the added challenges in a multi-core system The student is able to explain how design-space exploration identifies hardware and software configurations that satisfy multi-dimensional constraints on e.g. cost, performance and energy consumption The student is able to work together in a team to develop software that satisfies its requirements on a given embedded platform Characteristics and constraints of embedded systems Model-based specification of the functional and non-functional behavior of an embedded system Analysis and verification of functional and non-functional behavior in embedded systems Selection and configuration of suitable embedded hardware architectures Programming (Java, Python, C++, or similar language) Computer Organization (preferred, not mandatory) Lecture Self-study Working independently on e.g. a project or thesis Laptop seminar Practical Project (group) Assignments (individual)","Course catalogue number 5364DCBS6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of DevOps is a modern software and applications development model that realises the continuous integration (CI), continuous deployment (CD) and continuous improvement of the services and applications that is deeply based on the cloud virtualisation, on demand services deployment and precision services monitoring currently available on the major cloud platforms. The course discusses the basic concepts of DevOps, including its philosophy, workflow, monitoring methods, and tools. Students will apply these concepts to understand how they can be best implemented to automate development, test, and release practices. Students will work in teams to apply DevOps model and tools to develop working applications and will use one of cloud and DevOps platforms. The following topics will be covered in the course: The course will also feature guest lectures from local cloud providers and DevOps companies. Familiarity with one of the programming languages: Java, C or Python, and with any IDE platform More information about procedures and registration periods can be found athttp://student.uva.nl/se/az/item/course-registration.html The schedule for this course is published onDataNose. The course assessment includes the following components: individual practical assignments; literature study; group project report  and code; project development process. Course catalogue number 5364DCBS6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. Z. Zhao (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. Z. Zhao (co-ordinator) Master's Software Engineering Graduates are familiar with the concept of DevOps and related technologies, their benefits for organisational IT infrastructure and services management; understand organisational aspects of DevOps, describe relation of DevOps to other technologies Graduates will understand how to build cloud-based applications and use cloud automation tools in the DevOps process applied to a range of applications and software development scenarios/processes Graduates will understand functionalities offered by the popular DevOps and cloud automations tools such as Chef, Terraform, Ansible,  and have practical hands on experience with one of such tools Introduction DevOps, core concepts and models, Continuous Delivery (CD), Continuous Integration (CI), Continuous Deployment. Agile development, relation to Agile, Scrum, Kanban, Lean Cloud Computing architecture, service models, virtualisation, resources management and monitoring DevOps and software engineering on major cloud platforms: AWS, Microsoft Azure. Cloud powered applications deployment, accounts management Cloud automation tools and platforms: Chef, Terraform, Ansible, and DevOps tools available from the major cloud providers AWS and Azure Software delivery life cycle in an agile DevOps organisation, QA in cloud based software development systems, secure applications development with DevSecOps DevOps applications architecture, configuration management, monitoring, environment setup on the selected cloud platform AWS or Microsoft Azure. Lecture Self-study Working independently on e.g. a project or thesis Laptop seminar Presentation/symposium Availability of Canvas site",-
2022-2023,-,-,"Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of This highly interactive course explores requirement engineering (RE) approaches and pitfalls by discussing real life cases. Supplementary lectures will go into truth finding, sense making, best practices, methods and will provide an abstract model for RE. At the heart, RE is about knowledge elicitation, creation and validation. Making decisions about what system to construct. We humans are by no means truth telling and finding machines. You will explore psychological and philosophical sources to get a better understanding of how that works. To do proper requirements engineering requires a number of skills, during this course we will work to develop your skills in a small real life project. This first hand experience will enable you to better appreciate the intricacies in applying theory even in a simple domain. Knowledge of requirement engineering, for example books of Sommerville, Robertson, van Lamsweerde, Wiegers or Pohl. 'Modeling techniques', e.g. UML diagrams to describe software behaviour. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration-the-right-system-for-the-right-course The schedule for this course is published onDataNose. Reading tests, paper and lab work. Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering You will understand why organizational and stakeholder needs are hard to express, capture and understand You will learn the shortcomings in the (agile) methods and best practices that are widely used Furthermore you will learn how to use scenarios and hard data to improve the likelihood of creating the right system Lecture Seminar Working independently on e.g. a project or thesis Supervision/feedback meeting Self-study Presentation/symposium Literature:Steven Pinker, Rationality. What it is, why it seems scarce, why it matters Steven Pinker, Rationality. What it is, why it seems scarce, why it matters Syllabus:  Steven Pinker, Rationality. What it is, why it seems scarce, why it matters ","Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For both part-time and full-time students. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of During paper sessions you learn skills to find, read and assess relevant scientific publications. You will also learn to build argumentation structures you need for your theory and analysis. For your graduation project, you can choose from a number of defined themes. It is also possible to define a project yourself, once you have thoroughly examined the foundation and feasibility of your idea. The lecturer will help you during the preparation. You will also discuss your ideas with other students. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration-the-right-system-for-the-right-course The schedule for this course is published onDataNose. The student can pass the course by getting approval from the course coordinator and the academic supervisor for two deliverables: Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For both part-time and full-time students. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. ir. M.C. Bor (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. ir. M.C. Bor (co-ordinator) Master's Software Engineering Problem analysis Scientific literature survey Theory building Hypothesizing Structuring research and validation Project planning Scientific reporting Self-study Presentation/symposium Working independently on e.g. a project or thesis Supervision/feedback meeting Seminar Other:Study materials are made available through the course’s Canvas page. Study materials are made available through the course’s Canvas page. Study materials are made available through the course’s Canvas page. An interest in reading and writing scientific literature Affinity with reading and writing English text Knowledge of current challenges and results in software engineering Graduation project proposal Survey of related literature","Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Developing large scale software systems is challenging for many reasons. Our understanding of what needs to be done is at best incomplete, at points invalid, and subject to change. It’s hard to determine the adequacy of requirements, plans, designs and increments. The biggest projects require collaboration of thousands of people, with imperfect mechanisms for division of work, coordination, assessment of quality and assessment of progress. It proofs hard to be a truely learning organization and to adapt in the right way. The code that is produced restricts the solution space for what still needs to be developed, and at worst proofs an obstacle to add the features that are needed. The course setup is as follows: Knowledge of software methods like Rup, Scrum, Xp and software practices like pair programming, test first. Experience with working in big projects. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration-the-right-system-for-the-right-course The schedule for this course is published onDataNose. Reading tests, essays. Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering Insight in methods and best practices in the field of Software Engineering. Understand what problems these try to solve. Being able to make a contextual analysis and propose a fitting organization. Insight into complexity of developing large software systems Understanding what agility is, and how this is related to process, ability and architecture Understanding what planning entails, and how planning can contribute to a successful outcome Insight in individual, team and organizational performance Insight in organizational patterns to decompose and distribute tasks and empower engineers while ensuring their combined work leads to a successful outcome Every week you will read research papers about a different topic and supplement this with information from professional and expert blogs Engineers, consultants and technical managers from a variety of companies will share their experiences and give insight in how they create and deliver software. In the past we had presentations from companies like Netflix, Spotify, Microsoft Azure, ICTU, BitVavo,  Adyen, Booking.com, Bol.com, ING. You will apply your knowledge on a small case for which you will design an adequate  software engineering organization and think about how this would work out for a number of situations. You will learn from well documented failed cases. The lectures and tutorials are designed as dialogue to help you think about the subject matter Lecture Seminar Presentation/symposium Supervision/feedback meeting",-,"Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Carry out the research as proposed by the plan you made in the preparation phase. An academic supervisor will be available for (weekly) feedback and discussion. Part-time students will need to discuss their planning with the coordinator and the academic supervisor, as there are various possibilities to distribute the necessary work across the study time. Preparation Master Project The schedule for this course is published onDataNose. The Master Project Software Engineering is assessed along three dimensions: Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. ir. M.C. Bor (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. ir. M.C. Bor (co-ordinator) Master's Software Engineering Acquiring the ability to do research by designing, executing and reporting on a project in the area of software engineering research Adding knowledge or gathering new evidence in the field of software engineering Self-study Presentation/symposium Working independently on e.g. a project or thesis Supervision/feedback meeting Literature:Scientific literature Scientific literature Scientific literature research carried out written thesis presentation and discussion during the defense session In order to start the Master’s project you need to have approval from the Preparation Master Project course coordinator and your academic supervisor on your project plan and related literature survey.","Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of This course is designed around lab sessions in which we study real and large (open-source) software systems. We use Rascal -a programming language workbench, or meta programming language- to apply and build software metrics, software analyses, software visualisations and software transformations. Seehttp://www.rascal-mpl.org.The student is supported with introductory material and interactive lab sessions (including a guest lecture) to learn Rascal. The course consists of a series of lectures on the theory of software maintenance and evolution, guest lecturers from field experts, working in pairs on practical assignments and a guided study of research papers on maintenance, maintainability, empirical software engineering and language engineering. Example topics are clone detection, maintainability metrics, and (automated) refactoring. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration-the-right-system-for-the-right-course The schedule for this course is published onDataNose. This course uses the following form of assessments, that will be detailed at the start of the course: The course reader and assignments will be made available on Canvas. Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. L.T. van Binsbergen (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. L.T. van Binsbergen (co-ordinator) Master's Software Engineering Understand a wide range of challenges stemming from the fact that software is developed in large, dynamic teams, is subjected to changing requirements and needs to be adapted to new contexts Apply language engineering and empirical software engineering techniques to large code-bases in order to analyze them using various software quality metrics (e.g. to measure maintainability) Analyze scientific contributions from selected papers addressing the challenges in software evolution discussed in lectures and covered in practicals Evaluate one's own implementation of a software analysis tool by experimenting with the implementation (e.g. tweaking parameters or implementation choices), drawing comparisons with alternative approaches in literature, and/or against a set of clearly specified requirements Advanced programming skills in several programming languages Experience with sizeable programming projects (e.g. Project Software Engineering) Ideally also knowledge of compiler construction (e.g. parsing, ASTs, basic code analysis, etc.) Good (academic) English reading and writing skills Lecture Laptop seminar Computer lab session/practical training Self-study Presentation/symposium Syllabus:Reader consisting of selected papers on software evolution Reader consisting of selected papers on software evolution Other:http://www.rascal-mpl.orgPotentially other (academic) sources made available on Canvas http://www.rascal-mpl.org Potentially other (academic) sources made available on Canvas Reader consisting of selected papers on software evolution http://www.rascal-mpl.org Potentially other (academic) sources made available on Canvas practical lab assignments performed in pairs and assessed by a demonstration/presentation and a report individual reading and writing exercise in the form of an annotated bibliography for a selection of papers",-,"Course catalogue number 5364SSVT6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Software specification, verification, and testing entail checking whether a given software system satisfies given requirements and/or specifications. Without a specification, it is impossible to state what a piece of software should do, and there is no reasonable way to set up the test process. An informal specification is not enough. If we aim to automate the test process we need pre-given information about: Programs written in functional or imperative languages can be tested, given a formal specification, by means of a random test generator. This test method will be illustrated for a number of example programs that are written in Haskell. The course assumes basic familiarity with this language and focusses on how to test programs written in either functional or imperative style, and how to use tools for automated test generation. Basic familiarity with logic and functional programming in Haskell. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration-the-right-system-for-the-right-course The schedule for this course is published onDataNose. Course examination consists of weekly assignments plus a final exam both the theory and practical parts. Course catalogue number 5364SSVT6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering understand and write specifications in the language of predicate logic use type-specification and abstraction to make programs more easily testable write formal specifications for testing Haskell code use random test generation for automating the test process Lecture Seminar Laptop seminar Self-study Literature:Graham Hutton,Programming in Haskell, Cambridge University Press 2016 (Second Edition).Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,Logic in Action, electronically available fromhttp://www.logicinaction.orgKees Doets and Jan van Eijck,The Haskell Road to Logic, Maths and Programming. College Publications, London 2012. Graham Hutton,Programming in Haskell, Cambridge University Press 2016 (Second Edition). Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,Logic in Action, electronically available fromhttp://www.logicinaction.org Kees Doets and Jan van Eijck,The Haskell Road to Logic, Maths and Programming. College Publications, London 2012. Graham Hutton,Programming in Haskell, Cambridge University Press 2016 (Second Edition). Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,Logic in Action, electronically available fromhttp://www.logicinaction.org Kees Doets and Jan van Eijck,The Haskell Road to Logic, Maths and Programming. College Publications, London 2012. which tests are relevant --> this information states the preconditions of the code what the outcomes of the relevant tests should be --> this information states the postconditions of the code",-,"Course catalogue number 5364DCBS6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of DevOps is a modern software and applications development model that realises the continuous integration (CI), continuous deployment (CD) and continuous improvement of the services and applications that is deeply based on the cloud virtualisation, on demand services deployment and precision services monitoring currently available on the major cloud platforms. The course discusses the basic concepts of DevOps, including its philosophy, workflow, monitoring methods, and tools. Students will apply these concepts to understand how they can be best implemented to automate development, test, and release practices. Students will work in teams to apply DevOps model and tools to develop working applications and will use one of cloud and DevOps platforms. The following topics will be covered in the course: The course will also feature guest lectures from local cloud providers and DevOps companies. Familiarity with one of the programming languages: Java, C or Python, and with any IDE platform. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration-the-right-system-for-the-right-course The schedule for this course is published onDataNose. The course assessment includes the following components: individual practical assignments; literature study; group project report  and code; project development process. Course catalogue number 5364DCBS6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. Z. Zhao (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   dr. Z. Zhao (co-ordinator) Master's Software Engineering Graduates are familiar with the concept of DevOps and related technologies, their benefits for organisational IT infrastructure and services management; understand organisational aspects of DevOps, describe relation of DevOps to other technologies Graduates will understand how to build cloud-based applications and use cloud automation tools in the DevOps process applied to a range of applications and software development scenarios/processes Graduates will understand functionalities offered by the popular DevOps and cloud automations tools such as Chef, Terraform, Ansible,  and have practical hands on experience with one of such tools Introduction DevOps, core concepts and models, Continuous Delivery (CD), Continuous Integration (CI), Continuous Deployment. Agile development, relation to Agile, Scrum, Kanban, Lean Cloud Computing architecture, service models, virtualisation, resources management and monitoring DevOps and software engineering on major cloud platforms: AWS, Microsoft Azure. Cloud powered applications deployment, accounts management Cloud automation tools and platforms: Chef, Terraform, Ansible, and DevOps tools available from the major cloud providers AWS and Azure Software delivery life cycle in an agile DevOps organisation, QA in cloud based software development systems, secure applications development with DevSecOps DevOps applications architecture, configuration management, monitoring, environment setup on the selected cloud platform AWS or Microsoft Azure. Lecture Self-study Working independently on e.g. a project or thesis Laptop seminar Presentation/symposium Other:Online materials will be provided via Canvas. Online materials will be provided via Canvas. Online materials will be provided via Canvas. Availability of Canvas site","Course catalogue number 5364MBDC6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Cyber-physical systems (CPS) are systems that integrate computation, sensing, actuation, and networking to interact with and control the physical world. They are built for a particular purpose and exist in many application domains. Well-known examples of CPS from different domains include satellites, airplanes, cars, cleaning robots, smart grids, smart lighting, x-ray machines, printers, radars, and lithography machines. The design of CPS is a multi-disciplinary activity that combines different fields, such as embedded systems, software engineering, control theory, and mechatronics, and is fundamentally different from the design of general-purpose computer systems, such as a desktop computer. CPS are subject to different non-functional requirements, such as size, weight, energy consumption, reliability, security, and cost. Some cyber-physical systems, such as a car or an airplane, are furthermore safety critical, and must guarantee that a system failure cannot result in death or injury. Such a system must always be available and must reliably produce correct results. To further complicate matters, the correctness of most CPS is not just defined by the correct result of a computation, but by the correct result and the correct timing. For example, consider an air-bag controller in a car, which must inflate the air-bag in time before the driver’s head hits the steering wheel, or a flight control system, which must correct turbulence before the airplane becomes unstable. Trends show that CPS across application domains are getting more and more complex. The consequences of this increasing complexity are visible in daily practice in which industry struggles to efficiently develop correct and well-performing CPS. This course is an introduction to CPS and their design, with a focus on computing aspects (hardware and software). It teaches how the increasing complexity of CPS can be addressed by model-based design methodologies in which abstraction, provided by models used for specification, analysis, simulation, or synthesis, play an essential role in increasing system quality and reducing development time and overall system cost. The course covers the following topics: More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration-the-right-system-for-the-right-course The schedule for this course is published onDataNose. A Canvas site for the course is available Course catalogue number 5364MBDC6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) prof. dr. K.B. Akesson MSc (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add course to planner Sem. 1 Sem. 2   prof. dr. K.B. Akesson MSc (co-ordinator) Master's Software Engineering The student is able to explain the key characteristics and complexity drivers of cyber-physical systems The student is able to specify aspects of cyber-physical systems using models at different levels of abstraction The student is able to functionally verify weak termination of systems using methods based on Petri Net models The student is able to verify schedulability of periodic tasks and perform cache analysis on a single-core system, and explain the added challenges in a multi-core system The student is able to explain how design-space exploration identifies hardware and software configurations that satisfy multi-dimensional constraints on e.g. cost, performance and energy consumption The student is able to work together in a team to develop software that satisfies its requirements for a given cyber-physical system in a model-based manner An introduction to cyber-physical systems and their key characteristics and complexity drivers Model-based specification, analysis, and verification of functional and non-functional behavior of cyber-physical systems Model-based software development for cyber-physical systems Identification and selection of suitable hardware and software configurations that satisfy multi-dimensional constraints on e.g. cost, performance, and energy consumption in a cyber-physical system Programming (Java, Python, C++, or similar language) Computer Organization (preferred, not mandatory) Lecture Laptop seminar Self-study Working independently on e.g. a project or thesis Three assignments Practical group project"
2023-2024,-,-,"Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of This highly interactive course explores requirement engineering (RE) approaches and pitfalls by discussing real life cases. Supplementary lectures will go into truth finding, sense making, best practices, methods and will provide an abstract model for RE. At the heart, RE is about knowledge elicitation, creation and validation. Making decisions about what system to construct. We humans are by no means truth telling and finding machines. You will explore psychological and philosophical sources to get a better understanding of how that works. To do proper requirements engineering requires a number of skills, during this course we will work to develop your skills in a small real life project. This first hand experience will enable you to better appreciate the intricacies in applying theory even in a simple domain. Knowledge of requirement engineering, for example books of Sommerville, Robertson, van Lamsweerde, Wiegers or Pohl. 'Modeling techniques', e.g. UML diagrams to describe software behaviour. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration Reading tests, paper and lab work. Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering You will understand why organizational and stakeholder needs are hard to express, capture and understand You will learn the shortcomings in the (agile) methods and best practices that are widely used Furthermore you will learn how to use scenarios and hard data to improve the likelihood of creating the right system Lecture Seminar Working independently on e.g. a project or thesis Supervision/feedback meeting Self-study Presentation/symposium Literature:Noise: a flaw in human judgement (Kahneman) Noise: a flaw in human judgement (Kahneman) Syllabus:  Noise: a flaw in human judgement (Kahneman) ","Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For both part-time and full-time students. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of During paper sessions you learn skills to find, read and assess relevant scientific publications. You will also learn to build argumentation structures you need for your theory and analysis. For your graduation project, you can choose from a number of defined themes. It is also possible to define a project yourself, once you have thoroughly examined the foundation and feasibility of your idea. The lecturer will help you during the preparation. You will also discuss your ideas with other students. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration The schedule for this course is published onDataNose. The student can pass the course by getting approval from the course coordinator and the academic supervisor for two deliverables: Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For both part-time and full-time students. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. ir. M.C. Bor (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   dr. ir. M.C. Bor (co-ordinator) Master's Software Engineering Problem analysis Scientific literature survey Theory building Hypothesizing Structuring research and validation Project planning Scientific reporting Self-study Presentation/symposium Working independently on e.g. a project or thesis Supervision/feedback meeting Seminar Other:Study materials are made available through the course’s Canvas page. Study materials are made available through the course’s Canvas page. Study materials are made available through the course’s Canvas page. An interest in reading and writing scientific literature Affinity with reading and writing English text Knowledge of current challenges and results in software engineering Graduation project proposal Survey of related literature","Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Developing large scale software systems is challenging for many reasons. Our understanding of what needs to be done is at best incomplete, at points invalid, and subject to change. It’s hard to determine the adequacy of requirements, plans, designs and increments. The biggest projects require collaboration of thousands of people, with imperfect mechanisms for division of work, coordination, assessment of quality and assessment of progress. It proofs hard to be a truely learning organization and to adapt in the right way. Every design decision, every line of code restricts the solution space for what still needs to be developed, and at worst proofs to be an obstacle to add the features that are needed. The course setup is as follows: Knowledge of software methods like Rup, Scrum, Xp and software practices like pair programming, test first. Experience with working in big projects. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration Reading tests, essays. Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering Insight in methods and best practices in the field of Software Engineering. Understand what problems these try to solve. Being able to make a contextual analysis and propose a fitting organizational setup to engineer a system. Insight into complexity of developing large software systems Understanding what agility is, and how this is related to process, ability and architecture Understanding what planning entails, and how planning can contribute to a successful outcome Insight in individual, team and organizational performance Insight in organizational patterns to decompose and distribute tasks and empower engineers while ensuring their combined work leads to a successful outcome Every week you will read research papers about a different topic and supplement this with information from professional and expert blogs Engineers, consultants and technical managers from a variety of companies will share their experiences and give insight in how they create and deliver software. In the past we had presentations from companies like Netflix, Spotify, Microsoft Azure, ICTU, BitVavo,  Adyen, Booking.com, Bol.com, ING. You will apply your knowledge on a small case for which you will design an adequate  software engineering organization and think about how this would work out for a number of situations. You will learn from well documented failed cases. The lectures and tutorials are designed as dialogue to help you think about the subject matter Lecture Seminar Presentation/symposium Supervision/feedback meeting",-,"Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Carry out the research as proposed by the plan you made in the preparation phase. An academic supervisor will be available for (weekly) feedback and discussion. Part-time students will need to discuss their planning with the coordinator and the academic supervisor, as there are various possibilities to distribute the necessary work across the study time. Preparation Master Project The Master Project Software Engineering is assessed along three dimensions: Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: All courses of the first semester and the first block of the second semester have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. ir. M.C. Bor (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   dr. ir. M.C. Bor (co-ordinator) Master's Software Engineering Acquiring the ability to do research by designing, executing and reporting on a project in the area of software engineering research Adding knowledge or gathering new evidence in the field of software engineering Self-study Presentation/symposium Working independently on e.g. a project or thesis Supervision/feedback meeting Literature:Scientific literature Scientific literature Scientific literature research carried out written thesis presentation and discussion during the defense session In order to start the Master’s project you need to have approval from the Preparation Master Project course coordinator and your academic supervisor on your project plan and related literature survey.","Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of This course is designed around lab sessions in which we study real and large (open-source) software systems. We use Rascal -a programming language workbench, or meta programming language- to apply and build software metrics, software analyses, software visualisations and software transformations. Seehttp://www.rascal-mpl.org.The student is supported with introductory material and interactive lab sessions (including a guest lecture) to learn Rascal. The course consists of a series of lectures on the theory of software maintenance and evolution, guest lecturers from field experts, working in pairs on practical assignments and a guided study of research papers on maintenance, maintainability, empirical software engineering and language engineering. Example topics are clone detection, maintainability metrics, and (automated) refactoring. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration This course uses the following form of assessments, that will be detailed at the start of the course: The course reader and assignments will be made available on Canvas. Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. L.T. van Binsbergen (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   dr. L.T. van Binsbergen (co-ordinator) Master's Software Engineering Understand a wide range of challenges stemming from the fact that software is developed in large, dynamic teams, is subjected to changing requirements and needs to be adapted to new contexts Apply language engineering and empirical software engineering techniques to large code-bases in order to analyze them using various software quality metrics (e.g. to measure maintainability) Analyze scientific contributions from selected papers addressing the challenges in software evolution discussed in lectures and covered in practicals Evaluate one's own implementation of a software analysis tool by experimenting with the implementation (e.g. tweaking parameters or implementation choices), drawing comparisons with alternative approaches in literature, and/or against a set of clearly specified requirements Advanced programming skills in several programming languages Experience with sizeable programming projects (e.g. Project Software Engineering) Ideally also knowledge of compiler construction (e.g. parsing, ASTs, basic code analysis, etc.) Good (academic) English reading and writing skills Lecture Laptop seminar Computer lab session/practical training Self-study Presentation/symposium Syllabus:Reader consisting of selected papers on software evolution Reader consisting of selected papers on software evolution Other:http://www.rascal-mpl.orgPotentially other (academic) sources made available on Canvas http://www.rascal-mpl.org Potentially other (academic) sources made available on Canvas Reader consisting of selected papers on software evolution http://www.rascal-mpl.org Potentially other (academic) sources made available on Canvas practical lab assignments performed in pairs and assessed by a demonstration/presentation and a report individual reading and writing exercise in the form of an annotated bibliography for a selection of papers",-,"Course catalogue number 5364SSVT6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Software specification, verification, and testing entail checking whether a given software system satisfies given requirements and/or specifications. Without a specification, it is impossible to state what a piece of software should do, and there is no reasonable way to set up the test process. An informal specification is not enough. If we aim to automate the test process we need pre-given information about: Programs written in functional or imperative languages can be tested, given a formal specification, by means of a random test generator. This test method will be illustrated for a number of example programs that are written in Haskell. The course assumes basic familiarity with this language and focusses on how to test programs written in either functional or imperative style, and how to use tools for automated test generation. Basic familiarity with logic and functional programming in Haskell. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration The course is mainly aimed at Software Engineering master students. Course examination consists of weekly assignments plus a final exam both the theory and practical parts. We will mainly use Canvas to broadcast information and course materials, as well as announcements during the course contact hours. Course catalogue number 5364SSVT6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering understand and write specifications in the language of predicate logic use type-specification and abstraction to make programs more easily testable write formal specifications for testing Haskell code use random test generation for automating the test process Lecture Seminar Laptop seminar Self-study Literature:Graham Hutton,Programming in Haskell, Cambridge University Press 2016 (Second Edition).Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,Logic in Action, electronically available fromhttp://www.logicinaction.orgKees Doets and Jan van Eijck,The Haskell Road to Logic, Maths and Programming. College Publications, London 2012. Graham Hutton,Programming in Haskell, Cambridge University Press 2016 (Second Edition). Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,Logic in Action, electronically available fromhttp://www.logicinaction.org Kees Doets and Jan van Eijck,The Haskell Road to Logic, Maths and Programming. College Publications, London 2012. Graham Hutton,Programming in Haskell, Cambridge University Press 2016 (Second Edition). Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,Logic in Action, electronically available fromhttp://www.logicinaction.org Kees Doets and Jan van Eijck,The Haskell Road to Logic, Maths and Programming. College Publications, London 2012. which tests are relevant --> this information states the preconditions of the code what the outcomes of the relevant tests should be --> this information states the postconditions of the code",-,"Course catalogue number 5364DCBS6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of DevOps is a modern software and applications development model that realises the continuous integration (CI), continuous deployment (CD) and continuous improvement of the services and applications that is deeply based on the cloud virtualisation, on demand services deployment and precision services monitoring currently available on the major cloud platforms. The course discusses the basic concepts of DevOps, including its philosophy, workflow, monitoring methods, and tools. Students will apply these concepts to understand how they can be best implemented to automate development, test, and release practices. Students will work in teams to apply DevOps model and tools to develop working applications and will use one of cloud and DevOps platforms. The following topics will be covered in the course: The course will also feature guest lectures from local cloud providers and DevOps companies. Familiarity with one of the programming languages: Java, C or Python, and with any IDE platform. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration The course assessment includes the following components: individual practical assignments; literature study; group project report  and code; project development process. Course catalogue number 5364DCBS6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. Z. Zhao (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   dr. Z. Zhao (co-ordinator) Master's Software Engineering Graduates are familiar with the concept of DevOps and related technologies, their benefits for organisational IT infrastructure and services management; understand organisational aspects of DevOps, describe relation of DevOps to other technologies Graduates will understand how to build cloud-based applications and use cloud automation tools in the DevOps process applied to a range of applications and software development scenarios/processes Graduates will understand functionalities offered by the popular DevOps and cloud automations tools such as Chef, Terraform, Ansible,  and have practical hands on experience with one of such tools Introduction DevOps, core concepts and models, Continuous Delivery (CD), Continuous Integration (CI), Continuous Deployment. Agile development, relation to Agile, Scrum, Kanban, Lean Cloud Computing architecture, service models, virtualisation, resources management and monitoring DevOps and software engineering on major cloud platforms: AWS, Microsoft Azure. Cloud powered applications deployment, accounts management Cloud automation tools and platforms: Chef, Terraform, Ansible, and DevOps tools available from the major cloud providers AWS and Azure Software delivery life cycle in an agile DevOps organisation, QA in cloud based software development systems, secure applications development with DevSecOps DevOps applications architecture, configuration management, monitoring, environment setup on the selected cloud platform AWS or Microsoft Azure. Lecture Self-study Working independently on e.g. a project or thesis Laptop seminar Presentation/symposium Other:Online materials will be provided via Canvas. Online materials will be provided via Canvas. Online materials will be provided via Canvas. Availability of Canvas site","Course catalogue number 5364MBDC6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Cyber-physical systems (CPS) are systems that integrate computation, sensing, actuation, and networking to interact with and control the physical world. They are built for a particular purpose and exist in many application domains. Well-known examples of CPS from different domains include satellites, airplanes, cars, x-ray machines, printers, radars, and lithography machines. The design of CPS is a multi-disciplinary activity that combines different fields, such as embedded systems, software engineering, control theory, and mechatronics, and is fundamentally different from the design of general-purpose computer systems, such as a desktop computer. CPS are subject to different non-functional requirements, such as size, weight, energy consumption, reliability, security, and cost. Some cyber-physical systems, such as a car or an airplane, are furthermore safety critical, and must guarantee that a system failure cannot result in death or injury. Such a system must always be available and must reliably produce correct results. To further complicate matters, the correctness of most CPS is not just defined by the correct result of a computation, but by the correct result and the correct timing. For example, consider an air-bag controller in a car, which must inflate the air-bag in time before the driver’s head hits the steering wheel, or a flight control system, which must correct turbulence before the airplane becomes unstable. Trends show that CPS across application domains are getting more and more complex. The consequences of this increasing complexity are visible in daily practice in which industry struggles to efficiently develop correct and well-performing CPS. This course is an introduction to CPS and their design, with a focus on computing aspects (hardware and software). It teaches how the increasing complexity of CPS can be addressed by model-based design methodologies in which abstraction, provided by models used for specification, analysis, simulation, or synthesis, play an essential role in increasing system quality and reducing development time and overall system cost. The course covers the following topics: More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration A Canvas site for the course is available Course catalogue number 5364MBDC6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) prof. dr. K.B. Akesson MSc (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   prof. dr. K.B. Akesson MSc (co-ordinator) Master's Software Engineering The student is able to explain the key characteristics and complexity drivers of cyber-physical systems The student is able to model the behavior of software using Statecharts and generate code The student is able to functionally verify systems using methods based on Petri Net models The student is able to create a domain-specific language (DSL) that allows specification and validation of models in a particular domain, and generation of design artifacts The student is able to verify schedulability of periodic tasks and perform cache analysis on a single-core system, and explain the added challenges in a multi-core system The student is able to explain how design-space exploration identifies hardware and software configurations that satisfy multi-dimensional constraints on e.g. cost, performance and energy consumption The student is able to work together in a team to develop software that satisfies its requirements for a given cyber-physical system in a model-based manner An introduction to cyber-physical systems and their key characteristics and complexity drivers Model-based specification, analysis, and verification of functional and non-functional behavior of cyber-physical systems Model-based software development for cyber-physical systems Identification and selection of suitable hardware and software configurations that satisfy multi-dimensional constraints on e.g. cost, performance, and energy consumption in a cyber-physical system Programming (Java, Python, C++, or similar language) Computer Organization (preferred, not mandatory) Lecture Laptop seminar Self-study Working independently on e.g. a project or thesis Three assignments Practical group project"
2024-2025,-,-,"Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of At the heart Requirements Engineering is making careful decisions about what system to construct. To understand what decisions to make we have to gather and structure  knowledge. About the domain, but also about what is feasible. Humans are by no means truth telling and finding machines and our decision making is often flawed. This interactive course explores requirement engineering approaches and pitfalls by discussing real life cases. You will dive into  psychological and philosophical sources. You will also practice a lot, with the primary focus on interviewing.  Knowledge of requirement engineering, for example books of Sommerville, Robertson, van Lamsweerde, Wiegers or Pohl. 'Modeling techniques', e.g. UML diagrams to describe software behaviour. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration Reading tests, lab work, exam. Course catalogue number 5364REEN6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering You will understand why organizational and stakeholder needs are hard to express, capture and understand You will learn the shortcomings in the (agile) methods and best practices that are widely used Furthermore you will practice knowledge gathering and system modeling techniques Lecture Seminar Working independently on e.g. a project or thesis Supervision/feedback meeting Self-study Presentation/symposium Literature:Noise: a flaw in human judgement (Kahneman) Noise: a flaw in human judgement (Kahneman) Syllabus:  Noise: a flaw in human judgement (Kahneman) ","Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For both part-time and full-time students. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of During paper sessions you learn skills to find, read and assess relevant scientific publications. You will also learn to build argumentation structures you need for your theory and analysis. For your graduation project, you can choose from a number of defined themes. It is also possible to define a project yourself, once you have thoroughly examined the foundation and feasibility of your idea. The lecturer will help you during the preparation. You will also discuss your ideas with other students. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration The student can pass the course by getting approval from the course coordinator and the academic supervisor for two deliverables: Course catalogue number 5364PRMS6Y Credits 6 EC Language of instruction English Entry requirements For both part-time and full-time students. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. K. Papagiannopoulos (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   dr. K. Papagiannopoulos (co-ordinator) Master's Software Engineering Problem analysis Scientific literature survey Theory building Hypothesizing Structuring research and validation Project planning Scientific reporting Self-study Presentation/symposium Working independently on e.g. a project or thesis Supervision/feedback meeting Seminar Other:Study materials are made available through the course’s Canvas page. Study materials are made available through the course’s Canvas page. Study materials are made available through the course’s Canvas page. An interest in reading and writing scientific literature Affinity with reading and writing English text Knowledge of current challenges and results in software engineering Graduation project proposal Survey of related literature","Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Developing large scale software systems is challenging for many reasons. Our understanding of what needs to be done is at best incomplete, at points invalid, and subject to change. It’s hard to determine the adequacy of plans and code. The biggest projects require collaboration of thousands of people, yet our mechanisms for division of work, coordination, and keeping track of progress have severe limitations. Learning is the credo, but in reality it proofs hard to adapt. Everything we do has impact, and not before long we work within the constraints of our own legacy. During this course you will read a lot about the many aspects of organizing software engineering. There will be guest lecturers to share their experiences with you. You will analyze a failed case and come up with a game plan for a project. Knowledge of software methods like Rup, Scrum, Xp and software practices like pair programming, test first. Experience with working in real software engineering. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration Reading tests, reports, exam. Course catalogue number 5364SOPR6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) drs. H.L. Dekkers (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   drs. H.L. Dekkers (co-ordinator) Master's Software Engineering Understanding the dynamics of realizing software solutions in a business or government context Understanding the choices you can make to successfully create and deliver a software system An introduction to empirical research to software engineering Lecture Seminar Presentation/symposium Supervision/feedback meeting",-,"Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: 4 out of the 6 mandatory courses have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Carry out the research as proposed by the plan you made in the preparation phase. An academic supervisor will be available for (weekly) feedback and discussion. Part-time students will need to discuss their planning with the coordinator and the academic supervisor, as there are various possibilities to distribute the necessary work across the study time. Preparation Master Project The Master Project Software Engineering is assessed along three dimensions: Course catalogue number 5364MAS18Y Credits 18 EC Language of instruction English Entry requirements For part-time (2 year) students: all other courses in the program have been passed, and the course Preparation Masterproject Software Engineering has been passed. For full-time (1 year) students: 4 out of the 6 mandatory courses have been passed. The course Preparation Masterproject Software Engineering also has been passed. Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. ir. M.C. Bor (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   dr. ir. M.C. Bor (co-ordinator) Master's Software Engineering Acquiring the ability to do research by designing, executing and reporting on a project in the area of software engineering research Adding knowledge or gathering new evidence in the field of software engineering Self-study Presentation/symposium Working independently on e.g. a project or thesis Supervision/feedback meeting Literature:Scientific literature Scientific literature Scientific literature research carried out written thesis presentation and discussion during the defense session In order to start the Master’s project you need to have approval from the thesis coordinator and your academic supervisor on your project proposal.","Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of This course is designed around lab sessions in which we study real and large (open-source) software systems. We use Rascal -a programming language workbench, or meta programming language- to apply and build software metrics, software analyses, software visualisations and software transformations. Seehttp://www.rascal-mpl.org.The student is supported with introductory material and interactive lab sessions (including a guest lecture) to learn Rascal. The course consists of a series of lectures on the theory of software maintenance and evolution, guest lecturers from field experts, working in pairs on practical assignments and a guided study of research papers on maintenance, maintainability, empirical software engineering and language engineering. Example topics are clone detection, maintainability metrics, and (automated) refactoring. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration This course uses the following form of assessments, that will be detailed at the start of the course: The course reader and assignments will be made available on Canvas. Course catalogue number 5364SOEV6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. L.T. van Binsbergen (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   dr. L.T. van Binsbergen (co-ordinator) Master's Software Engineering Understand a wide range of challenges stemming from the fact that software is developed in large, dynamic teams, is subjected to changing requirements and needs to be adapted to new contexts Apply language engineering and empirical software engineering techniques to large code-bases in order to analyze them using various software quality metrics (e.g. to measure maintainability) Analyze scientific contributions from selected papers addressing the challenges in software evolution discussed in lectures and covered in practicals Evaluate one's own implementation of a software analysis tool by experimenting with the implementation (e.g. tweaking parameters or implementation choices), drawing comparisons with alternative approaches in literature, and/or against a set of clearly specified requirements Advanced programming skills in several programming languages including functional programming Experience with sizeable programming projects (e.g. Project Software Engineering) Ideally also knowledge of compiler construction (e.g. parsing, ASTs, basic code analysis, etc.) Good (academic) English reading and writing skills Lecture Laptop seminar Computer lab session/practical training Self-study Presentation/symposium Syllabus:Reader consisting of selected papers on software evolution Reader consisting of selected papers on software evolution Other:http://www.rascal-mpl.orgPotentially other (academic) sources made available on Canvas http://www.rascal-mpl.org Potentially other (academic) sources made available on Canvas Reader consisting of selected papers on software evolution http://www.rascal-mpl.org Potentially other (academic) sources made available on Canvas practical lab assignments performed in pairs and assessed by a demonstration/presentation and a report individual reading and writing exercise in the form of an annotated bibliography for a selection of papers",-,"Course catalogue number 5364SSVT6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Software specification, verification, and testing entail checking whether a given software system satisfies given requirements and/or specifications. Without a specification, it is impossible to state what a piece of software should do, and there is no reasonable way to set up the test process. An informal specification is not enough. If we aim to automate the test process we need pre-given information about: Programs written in functional or imperative languages can be tested, given a formal specification, by means of a random test generator. This test method will be illustrated for a number of example programs that are written in Haskell. The course assumes basic familiarity with this language and focusses on how to test programs written in either functional or imperative style, and how to use tools for automated test generation. Basic familiarity with logic and functional programming in Haskell. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration The course is mainly aimed at Software Engineering master students. Course examination consists of several assignments plus a final assessment of both the theory and practical parts. We will mainly use Canvas to broadcast information and course materials, as well as announcements during the course contact hours. Course catalogue number 5364SSVT6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. A.M. Oprescu (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   dr. A.M. Oprescu (co-ordinator) Master's Software Engineering understand and write specifications in the language of predicate logic use type-specification and abstraction to make programs more easily testable write formal specifications for testing Haskell code use random test generation for automating the test process Lecture Seminar Laptop seminar Self-study Literature:Graham Hutton,Programming in Haskell, Cambridge University Press 2016 (Second Edition).Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,Logic in Action, electronically available fromhttp://www.logicinaction.orgKees Doets and Jan van Eijck,The Haskell Road to Logic, Maths and Programming. College Publications, London 2012. Graham Hutton,Programming in Haskell, Cambridge University Press 2016 (Second Edition). Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,Logic in Action, electronically available fromhttp://www.logicinaction.org Kees Doets and Jan van Eijck,The Haskell Road to Logic, Maths and Programming. College Publications, London 2012. Graham Hutton,Programming in Haskell, Cambridge University Press 2016 (Second Edition). Recommended background reading: Johan van Benthem, Hans van Ditmarsch, Jan van Eijck and Jan Jaspars,Logic in Action, electronically available fromhttp://www.logicinaction.org Kees Doets and Jan van Eijck,The Haskell Road to Logic, Maths and Programming. College Publications, London 2012. which tests are relevant --> this information states the preconditions of the code what the outcomes of the relevant tests should be --> this information states the postconditions of the code",-,"Course catalogue number 5364DCBS6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of DevOps is a modern software and applications development model that realises the continuous integration (CI), continuous deployment (CD) and continuous improvement of the services and applications that is deeply based on the cloud virtualisation, on demand services deployment and precision services monitoring currently available on the major cloud platforms. The course discusses the basic concepts of DevOps, including its philosophy, workflow, monitoring methods, and tools. Students will apply these concepts to understand how they can be best implemented to automate development, test, and release practices. Students will work in teams to apply DevOps model and tools to develop working applications and will use one of cloud and DevOps platforms. The following topics will be covered in the course: The course will also feature guest lectures from local cloud providers and DevOps companies. Familiarity with one of the programming languages: Java, C or Python, and with any IDE platform. More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration The course assessment includes the following components: individual practical assignments; literature study; group project report  and code; project development process. Course catalogue number 5364DCBS6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. Z. Zhao (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   dr. Z. Zhao (co-ordinator) Master's Software Engineering Students are familiar with the concept of DevOps and related technologies, their benefits for organisational IT infrastructure and services management; understand organisational aspects of DevOps, describe relation of DevOps to other technologies Students will understand how to build cloud-based applications and use cloud automation tools in the DevOps process applied to various applications and software development scenarios/processes. Students can analyze practical cloud application problems, apply agile and DevOps practices in teamwork, and develop solutions using cloud computing and automation techniques. Introduction DevOps, core concepts and models, Continuous Delivery (CD), Continuous Integration (CI), Continuous Deployment. Agile development, relation to Agile, Scrum, Kanban, Lean Cloud Computing architecture, service models, virtualisation, resources management and monitoring DevOps and software engineering on major cloud platforms: AWS, Microsoft Azure. Cloud powered applications deployment, accounts management Cloud automation tools and platforms: Chef, Terraform, Ansible, and DevOps tools available from the major cloud providers AWS and Azure Software delivery life cycle in an agile DevOps organisation, QA in cloud based software development systems, secure applications development with DevSecOps DevOps applications architecture, configuration management, monitoring, environment setup on the selected cloud platform AWS or Microsoft Azure. Lecture Self-study Working independently on e.g. a project or thesis Laptop seminar Presentation/symposium Supervision/feedback meeting Other:Online materials will be provided via Canvas. Online materials will be provided via Canvas. Online materials will be provided via Canvas. Availability of Canvas site","Course catalogue number 5364MBDC6Y Credits 6 EC Language of instruction English Time period(s)  See also College/graduate Graduate School of Informatics Lecturer(s) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl servicedesk-esc-science@uva.nl Is part of Cyber-physical systems (CPS) are systems that integrate computation, sensing, actuation, and networking to interact with and control the physical world. They are built for a particular purpose and exist in many application domains. Well-known examples of CPS from different domains include satellites, airplanes, cars, x-ray machines, printers, radars, and lithography machines. The design of CPS is a multi-disciplinary activity that combines different fields, such as embedded systems, software engineering, control theory, and mechatronics, and is fundamentally different from the design of general-purpose computer systems, such as a desktop computer. CPS are subject to different non-functional requirements, such as size, weight, energy consumption, reliability, security, and cost. Some cyber-physical systems, such as a car or an airplane, are furthermore safety critical, and must guarantee that a system failure cannot result in death or injury. Such a system must always be available and must reliably produce correct results. To further complicate matters, the correctness of most CPS is not just defined by the correct result of a computation, but by the correct result and the correct timing. For example, consider an air-bag controller in a car, which must inflate the air-bag in time before the driver’s head hits the steering wheel, or a flight control system, which must correct turbulence before the airplane becomes unstable. Trends show that CPS across application domains are getting more and more complex. The consequences of this increasing complexity are visible in daily practice in which industry struggles to efficiently develop correct and well-performing CPS. This course is an introduction to CPS and their design, with a focus on computing aspects (hardware and software). It teaches how the increasing complexity of CPS can be addressed by model-based design methodologies in which abstraction, provided by models used for specification, analysis, simulation, or synthesis, play an essential role in increasing system quality and reducing development time and overall system cost. The course covers the following topics: More information about procedures and registration periods can be found athttps://student.uva.nl/en/topics/course-registration A Canvas site for the course is available Course catalogue number 5364MBDC6Y Credits 6 EC Language of instruction English Time period(s) Sem. 1Sem. 2See also Sem. 1 Sem. 2   Sem. 1 Sem. 2   College/graduate Graduate School of Informatics Lecturer(s) dr. ir. M.C. Bor (co-ordinator) Contact Education Desk FNWIScience Park 904B1020 5257100servicedesk-esc-science@uva.nl Is part of Master's Software Engineering Add to course registration Sem. 1 Sem. 2   dr. ir. M.C. Bor (co-ordinator) Master's Software Engineering The student is able to explain the key characteristics and complexity drivers of cyber-physical systems The student is able to model the behavior of software using Statecharts and generate code The student is able to functionally verify systems using methods based on Petri Net models The student is able to create a domain-specific language (DSL) that allows specification and validation of models in a particular domain, and generation of design artifacts The student is able to verify schedulability of periodic tasks and perform cache analysis on a single-core system, and explain the added challenges in a multi-core system The student is able to explain how design-space exploration identifies hardware and software configurations that satisfy multi-dimensional constraints on e.g. cost, performance and energy consumption The student is able to work together in a team to develop software that satisfies its requirements for a given cyber-physical system in a model-based manner An introduction to cyber-physical systems and their key characteristics and complexity drivers Model-based specification, analysis, and verification of functional and non-functional behavior of cyber-physical systems Model-based software development for cyber-physical systems Identification and selection of suitable hardware and software configurations that satisfy multi-dimensional constraints on e.g. cost, performance, and energy consumption in a cyber-physical system Programming (Java, Python, C++, or similar language) Computer Organization (preferred, not mandatory) Lecture Laptop seminar Self-study Working independently on e.g. a project or thesis Three assignments Practical group project"
